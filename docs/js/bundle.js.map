{"version":3,"file":"js/bundle.js","mappings":";;;;AAmCA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;AAsBA;;AASA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAIA;;;ACrDA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AAGA;AACA;AACA;;;AAGA;;;AAGA;;;;;AAKA;;;;;;AAOA;AAIA;;;;;AAKA;AACA;;;AAGA;;AAEA;;AC1EA;AACA;;;AAGA;;;;;;;;AAQA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;;;;AAMA;;AAKA;;;AAGA;;AAMA;;AAIA;;;;;AC/CA;;;ACCA;;AAEA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;;;;;;;AASA;;;;AAIA;;;;;;AAMA;AACA;;;;AAIA;AACA;;AAEA;;;;;;AAMA;;;AAGA;;;;;;;;;;AAUA;AACA;;;AAIA;;;AASA;;;;AAIA;;;AAGA;;;AAGA;;;AAGA;;;;AAIA;AACA;AACA;;;AAGA;;;AAGA;;AAEA;;AAEA;;;AAGA;;AArCA;;AA6CA;AACA;AACA;AACA;;AAGA;AA+IA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAgBA;;;;ACrUA;;ACSA;AACA;AACA;;;;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;;;;;;;;;;;;;AAaA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AACA;;AAEA;;AAKA;;;AAGA;;AAOA;;AAEA;;;;AAIA;AACA;;;AAGA;;AAGA;;AClHA;AACA;AACA;AACA;;;;AAIA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;AAKA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAeA;AACA;AACA;;;;AAIA;;;;;;;;AAQA;;;;AAIA;;;;;;;;;;AAUA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;;;;;;;AAQA;;;;AAIA;;;;;;;;;;;;;;AAcA;;;;;AAKA;;;;;;AAMA;;AAEA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;AAIA;;;AAGA;;;;AAIA;;;AAGA;;;ACnIA;;;;;;AAMA;AACA;;AAEA;;;;;;;AAOA;;;;AAIA;;;;AAIA;;;;;AAKA;AACA;;;AAGA;;;;;AAKA;;;;;;AAMA;;;;;;AAMA;;;;;;;;;;;;;AAaA;;;;AAIA;AACA;;AAEA;;;;;;AAMA;;;;;;;;AAQA;AACA;AACA;;;;;;;;AASA;AAeA;AACA;;;AAKA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;;AAGA;;;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3HA;;AAIA;AACA;;AAGA;AAqBA;AACA;;;AC7EA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;;;AAeA;;;;;;;;AAqDA;;;;ACvDA;AACA;AACA;AACA;;;;AAIA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;AAOA;;;;;;;;AAQA;AAkBA;AACA;;AAEA;;;;AAQA;AACA;AACA;AACA;AACA;;AAIA;;;AAKA;AACA;;AAEA;;AAGA;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtJA;;ACjBA;;AAEA;;;;;AAKA;;AAEA;AACA;;;AAGA;AAIA;;AAEA;AACA;;AAEA;AAEA;;;;;ACLA;AACA;AACA;AACA;;;;;;;;;;AAUA;;;;;;AAMA;;;;AAIA;AACA;;;;AAIA;;;AAGA;;;AAGA;;;;;;AAMA;;;AAGA;;;AAGA;;;;;;;;;;AAUA;;;;;;;AAOA;AACA;AACA;;AAGA;;AAcA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;;;AAkDA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;;;;;;;;;ACnKA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;;;;;;AAQA;AACA;;;;;;AAMA;;;;AAIA;;;;AAIA;;;;;;;;;;;AAYA;;;;AAMA;AACA;;AAEA;;;AAGA;AAEA;;AAGA;AAEA;;;;ACjFA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;;;;AAIA;;;;;AAKA;AACA;AACA;;AAEA;;;;AAIA;;;AAGA;AACA;;;;AAIA;;;AAIA;;;AAKA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AChBA;;;;AAIA;;;AAGA;;;;;;;;AAQA;;;;;AAKA;;;;;;;;;AAUA;;;AAcA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAMA;;;ACrFA;AACA;AACA;AACA;;AAEA;;;;;;AAMA;AACA;AACA;;;AAGA;;;;;;;;AAQA;;;;;AAKA;AACA;;;AAGA;AACA;;;;;;;AAOA;;;;;AAKA;AACA;AACA;;;;;;;AAOA;;;;;;;;;;AAUA;AACA;;;;;;AAMA;AACA;;;;;;;;;;AAUA;AACA;;AAEA;;;;AAIA;;;;AAIA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;;;AAIA;;;;AAKA;AAGA;AACA;AACA;;;;;AAKA;;;;AAIA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;;AAGA;;AAOA;AACA;AACA;;AAGA;;;;;ACzJA;AACA;;;;;;;;;;;AAWA;;;;;AAKA;;;;;AAKA;;AAGA;AAQA;;AAEA;;;AAIA;;ACvCA;AACA;;AAEA;;AAGA;;;;;;;;AC6BA;AACA;AACA;;;;;;;;;;;;;;AAcA;AACA;;;;;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;AAEA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAWA;;;;AAIA;;;;;;;;;;AAUA;AACA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;AAcA;;;AAsBA;;;;;;;AAOA;AACA;;;AAGA;;;AAIA;;AAQA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAEA;;;;;;ACnPA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAcA;AACA;;AAEA;;;;;;;;;;;;AAYA;AACA;;;;;;;;;;;AAWA;AACA;;;;;;;;;;AAUA;;;AAGA;;;;;;;;;;AAUA;AACA;;AAGA;;;AAMA;;;;AAIA;;;;AAIA;;AAEA;;;;AAIA;AACA;;;AAGA;;;;;;;AAQA;;;;;;AC7GA;;;;;;;;;;;;;;;AAgBA;AAKA;;;;AAKA;;;AAKA;;AAGA;ACnEA;;;;;;AAMA;;;;;;;AAOA;;;;;;;;ACyBA;;;;AAIA;;;AAGA;;;;;;;;;AASA;;;;AAIA;;;;;;;;;AAUA;;;AAaA;AACA;AACA;;AAEA;;;;;AAMA;;;ACnFA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAeA;AACA;;;;;;;AAQA;;AAIA;AAEA;;;;;;;ACtBA;AACA;AACA;;;;AAIA;AACA;;;;;;AAhBA;;;;;;;;;AA+BA;;;;;AAKA;;;;;;AAMA;AACA;;;AAGA;AACA;;AAEA;AACA;;;AAGA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAlEA;;;;;;;;;;;;AAkFA;;;;;;AAMA;;AAGA;;;AAwBA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;;;AAKA;;;;;;;;;ACxHA;AACA;;;AAGA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;;AAIA;;AAIA;AACA;AACA;;;AAIA;;;;;;;ACrEA;AACA;;;;;;;;;AASA;AACA;;;;;;;;;AASA;AACA;;;;;;;;;AASA;AACA;;;;;;;;AAQA;AACA;;;;;;;;AAQA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;AAQA;;ACxGA;AACA;;AAGA;;;AA4BA;;AAEA;AACA;AACA;;;;;AAKA;;ACxCA;;AAEA;;AAGA;;;AAKA;AACA;;AAGA;;AAeA;AACA;;;AAIA;;AAUA;;AAEA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AC3DA;;;AAGA;;;AAIA;;;AAKA;AACA;;AAGA;;AA6BA;;;AAWA;;AAEA;AACA;AACA;AACA;;;;;AAKA;;AClEA;;;AAGA;;;AAIA;;;AAKA;AACA;;AAGA;;AA6BA;;;AAWA;;AAEA;AACA;AACA;AACA;;;;;AAKA;;ACjEA;;AAGA;ACNA;;;AAIA;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAMA;;AChBA;;;;;AAKA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAGA;AACA;;;;AAQA;AACA;AACA;;AAEA;AACA;;;;;;AAMA;AACA;AACA;AACA;;AAEA;;;;;;AAMA;AACA;AACA;AACA;;AAEA;;;;;;AAMA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA;AACA;;;AAGA;;;;;;AAOA;;ACrHA;;;;;ACDA;;;AAGA;AACA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;;AAQA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AASA;;ACjEA;;;AAGA;AACA;;;AAIA;;;AAKA;AACA;AACA;AAEA;;AAoBA;;;AAWA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;;AAOA;;AChEA;;AAEA;;AAGA;;AAIA;AACA;AAEA;;AAcA;;AAGA;;AAkBA;;AAEA;AACA;AACA;;;;AAIA;;AChBA;AACA;;AAEA;;AAyBA;AACA;;AAEA;;AAyBA;AACA;;AAEA;;;;;AAsCA;;;AAGA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;AAOA;;AC1KA;;AAEA;AACA;;;;AAKA;;;AAKA;AACA;;AAGA;;AAaA;;AAGA;;AAUA;;AAEA;AACA;AACA;AACA;;;;AAIA;;ACpDA;;AAEA;;AAGA;;;AAKA;AACA;;AAGA;;AAqBA;;AAeA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AC3DA;;AAEA;;AAGA;;;AAKA;AACA;;AAGA;;AAqBA;;AAeA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AC1CA;AACA;AACA;;AAIA;;AAuCA;AACA;AACA;AACA;;AAIA;;;;;AA4BA;;;AAGA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;AAQA;;;;AC3KA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;;;;;;AAMA;AACA;AACA;;;;;;;AAQA;;ACzDA;;AAEA;;AAGA;;AAIA;AACA;AAEA;;AAcA;;AAEA;;AAGA;;;AAiEA;;AAEA;AACA;AACA;;;;;AAKA;;ACzGA;;AAEA;;AAGA;;AAIA;AACA;AAEA;;AAcA;;AAEA;;AAGA;;;AAwBA;;AAEA;AACA;;AAEA;;;;;AAKA;;ACjEA;;AAEA;;AAGA;;AAIA;AACA;AAEA;;AAcA;;AAGA;;;AAwBA;;AAEA;AACA;AACA;;;;;AAKA;;AC7DA;;AAEA;;AAGA;;AAIA;AACA;AAEA;;AAcA;;AAEA;;AAGA;;;AAgBA;;AAEA;AACA;AACA;;;;;AAKA;;ACxDA;;AAEA;;AAGA;;AAIA;AACA;AAEA;;AAcA;;AAGA;;;AAgBA;;AAEA;AACA;AACA;;;;;AAKA;;;AC9CA;;AAEA;;;AAGA;AACA;;;;;AAKA;;;;;ACpBA;;;AAGA;AACA;AACA;;;;;;;;AAQA;;;AAGA;AACA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;;;AASA;AACA;;;;;;;;AAQA;;;AAGA;AACA;AACA;;;;;;;AAOA;;;AAGA;AACA;AACA;;;;;;;;AAQA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;AAOA;;AClHA;;;AAGA;AACA;;;AAIA;;AAIA;AACA;AACA;AAEA;;AA0BA;;;AAiBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;;;AAGA;;AC1EA;;;AAGA;AACA;;;AAIA;;AAIA;AACA;AACA;AAEA;;AAoBA;;;AAYA;;AAEA;AACA;AACA;AACA;AACA;;;;;AAKA;;AC5DA;;AAEA;;AAGA;;AAIA;AACA;AAEA;;AAcA;;AAGA;;;AAgBA;;AAEA;AACA;AACA;;;;;AAKA;;;;;;ACvDA;;;AAGA;AACA;;;;;;;;;AASA;AACA;;;;;;;;;AASA;AACA;;;;;;;;;AASA;AACA;;;;;;;;;AASA;AACA;;;;;;;AAQA;;ACvDA;;AAEA;;AAGA;;;AAKA;AACA;AAEA;;AAUA;;AAGA;;AAMA;;AAEA;AACA;AACA;;;;;AAKA;;ACrCA;;AAEA;;AAGA;;;AAKA;AACA;AACA;AAEA;AAwBA;AAEA;;AAUA;;AAEA;AACA;AACA;AACA;;;;;AAKA;ACoEA;AACA;AACA;AACA;AACA;AAEA;;AAMA;AACA;;AAGA;;AAKA;AACA;;AAGA;;AAIA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;AAGA","sources":["webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/loader.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/tooltip.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/menu.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/grid-layout.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/dialog.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/form.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/popover.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/style/global-style.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/list.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/resizer.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/icon.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/select.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/buttongroup.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/navigation.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/input.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/search.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/switch.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/checkbox.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/notification.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/progress.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/bindings/tooltip.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/table.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/modal.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/dropdown.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/contextmenu.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/radio.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/tag.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/slider.js","webpack://mindmap-core/./node_modules/@pucelle/flit-ui/out/components/popup.js","webpack://mindmap-core/./docs/components/configuration-map.ts","webpack://mindmap-core/./docs/components/color-select.ts","webpack://mindmap-core/./docs/components/multi-color-select.ts","webpack://mindmap-core/./docs/components/color-theme-select.ts","webpack://mindmap-core/./docs/components/struct-theme-select.ts","webpack://mindmap-core/./docs/components/zoom-show.ts","webpack://mindmap-core/./docs/components/exporter.ts","webpack://mindmap-core/./docs/components/toolbar.ts","webpack://mindmap-core/./docs/components/birdeye-previewer.ts","webpack://mindmap-core/./docs/components/configuration-node-shape.ts","webpack://mindmap-core/./docs/components/shape-select.ts","webpack://mindmap-core/./docs/components/border-width-select.ts","webpack://mindmap-core/./docs/components/configuration-node-content.ts","webpack://mindmap-core/./docs/components/icon-select.ts","webpack://mindmap-core/./docs/components/icon-priority-select.ts","webpack://mindmap-core/./docs/components/icon-progress-select.ts","webpack://mindmap-core/./docs/components/configuration-node-text.ts","webpack://mindmap-core/./docs/components/text-editor-toolbar.ts","webpack://mindmap-core/./docs/components/font-family-select.ts","webpack://mindmap-core/./docs/components/font-size-select.ts","webpack://mindmap-core/./docs/components/line-height-select.ts","webpack://mindmap-core/./docs/components/text-align-select.ts","webpack://mindmap-core/./docs/components/text-vertical-align-select.ts","webpack://mindmap-core/./docs/components/text-katex-editor.ts","webpack://mindmap-core/./docs/components/configuration-node-connect.ts","webpack://mindmap-core/./docs/components/layout-name-select.ts","webpack://mindmap-core/./docs/components/connect-name-select.ts","webpack://mindmap-core/./docs/components/connect-out-adjust-select.ts","webpack://mindmap-core/./docs/components/configuration-node-relline.ts","webpack://mindmap-core/./docs/components/relline-shape-select.ts","webpack://mindmap-core/./docs/components/relline-marker-select.ts","webpack://mindmap-core/./docs/index.ts"],"sourcesContent":["\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar Loader_1;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Loader = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\n/** `<f-loader>` shows an loading animation to indicate resource is loading. */\r\nlet Loader = Loader_1 = class Loader extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Size of loader, one of `small | medium | large`.\r\n         * Default value is `medium`.\r\n         */\r\n        this.size = 'medium';\r\n        /**\r\n         * Whether work as a cover to cover whole parent.\r\n         * Default value is `false`.\r\n         */\r\n        this.asCover = false;\r\n        /** How many round per second. */\r\n        this.speed = 0.6;\r\n    }\r\n    static style() {\r\n        let { mainColor, backgroundColor } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t\tcolor: ${mainColor};\n\t\t}\n\n\t\t.as-cover{\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\tz-index: 10;\n\t\t\tbackground: ${backgroundColor.alpha(0.9)};\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\ttext-align: center;\n\t\t}\n\n\t\tsvg{\n\t\t\tmargin: auto;\n\t\t}\n\n\t\tpath{\n\t\t\tstroke: currentColor;\n\t\t\tfill: none;\n\t\t\tstroke-linecap: square;\n\t\t}\n\n\t\t.bg{\n\t\t\tstroke-opacity: 0.3;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        let strokeWidth = this.getStrokeWidth();\r\n        let halfWidth = strokeWidth / 2;\r\n        let size = Loader_1.sizes[this.size];\r\n        let d = `M${halfWidth} ${halfWidth} H${size - halfWidth} V${size - halfWidth} H${halfWidth}Z`;\r\n        let dashArray = `${size - strokeWidth} ${(size - strokeWidth) * 3}`;\r\n        return (0, flit_1.html) `\n\t\t\t<template\n\t\t\t\t:class=\"size-${this.size}\"\n\t\t\t\t:class.as-cover=${this.asCover}\n\t\t\t\t:style.width.px=${size}\n\t\t\t\t:style.height.px=${size}\n\t\t\t\t:style.animation=\"loader-snake-${this.size} 2s linear infinite\"\n\t\t\t>\n\t\t\t\t<svg viewBox=\"0 0 ${size} ${size}\" width=${size} height=${size}>\n\t\t\t\t\t<path class=\"bg\" d=${d} style=\"stroke-width: ${strokeWidth}\" />\n\t\t\t\t\t<path :refElement=\"snake\" d=${d} style=\"stroke-width: ${strokeWidth}; stroke-dasharray: ${dashArray};\" />\n\t\t\t\t</svg>\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    getStrokeWidth() {\r\n        return Loader_1.strokeWidths[this.size];\r\n    }\r\n    onReady() {\r\n        let strokeWidth = this.getStrokeWidth();\r\n        let size = Loader_1.sizes[this.size];\r\n        this.refElements.snake.animate([\r\n            {\r\n                strokeDashoffset: 0,\r\n            },\r\n            {\r\n                strokeDashoffset: -(size - strokeWidth) * 4,\r\n            }\r\n        ], {\r\n            duration: 1000 / this.speed,\r\n            iterations: Infinity\r\n        });\r\n    }\r\n};\r\nLoader.sizes = {\r\n    small: 18,\r\n    medium: 28,\r\n    large: 48,\r\n};\r\nLoader.strokeWidths = {\r\n    small: 3,\r\n    medium: 4,\r\n    large: 5,\r\n};\r\nLoader = Loader_1 = __decorate([\r\n    (0, flit_1.define)('f-loader')\r\n], Loader);\r\nexports.Loader = Loader;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Tooltip = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst popup_1 = require(\"../components/popup\");\r\n/** `<f-tooltip>` shows a short text message beside it's trigger element. */\r\nlet Tooltip = class Tooltip extends popup_1.Popup {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Tooltip type:\r\n         *\r\n         * `default`: when mouse hover to trigger.\r\n         * `prompt`: shows be default and can be closed.\r\n         * `error`: always show if having error.\r\n         */\r\n        this.type = 'default';\r\n    }\r\n    static style() {\r\n        let { adjust, adjustFontSize, popupBackgroundColor, textColor, errorColor } = theme_1.theme;\r\n        let types = [\r\n            ['default', popupBackgroundColor],\r\n            ['prompt', textColor.toMiddle(30)],\r\n            ['error', errorColor.toMiddle(5)]\r\n        ];\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: flex;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tmax-width: ${adjust(220)}px;\n\t\t\tpadding: ${adjust(4)}px ${adjust(8)}px;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t}\n\n\t\t.text{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t}\n\n\t\t.close{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(28)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tmargin-top: ${adjust(-4)}px;\n\t\t\tmargin-bottom: ${adjust(-4)}px;\n\t\t\tmargin-right: ${adjust(-8)}px;\n\t\t\tcursor: pointer;\n\n\t\t\t&:active{\n\t\t\t\ttransform: translateY(1px);\n\t\t\t}\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\t\t}\n\n\t\t${types.map(([type, color]) => {\r\n            let textColor = color.getLightness() > 0.5 ? '#000' : '#fff';\r\n            return (0, flit_1.css) `\n\t\t\t.type-${type}{\n\t\t\t\tbackground: ${color};\n\t\t\t\tcolor: ${textColor};\n\n\t\t\t\t.triangle{\n\t\t\t\t\tborder-bottom-color: ${color};\n\n\t\t\t\t\t&-herizontal{\n\t\t\t\t\t\tborder-right-color: ${color};\n\t\t\t\t\t\tborder-bottom-color: transparent;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t`;\r\n        })}\n\n\t\t.type-prompt{\n\t\t\tpointer-events: auto;\n\t\t}\n\n\t\t`.extends(super.style());\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<template class=\"type-${this.type}\">\n\t\t\t\t<div class=\"text\">\n\t\t\t\t\t<slot />\n\t\t\t\t</div>\n\n\t\t\t\t${this.type === 'prompt' ? (0, flit_1.html) `\n\t\t\t\t\t<div class=\"close\" @click=${this.close}>\n\t\t\t\t\t\t<f-icon .type=\"close\" />\n\t\t\t\t\t</div>\n\t\t\t\t` : ''}\n\t\t\t</template>\n\t\t`.extends(super.render());\r\n    }\r\n};\r\nTooltip = __decorate([\r\n    (0, flit_1.define)('f-tooltip')\r\n], Tooltip);\r\nexports.Tooltip = Tooltip;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Menu = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst popup_1 = require(\"./popup\");\r\n/** `<f-menu>` shows a menu with a list beside it's trigger element. */\r\nlet Menu = class Menu extends popup_1.Popup {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Menu title. */\r\n        this.title = '';\r\n        this.defaultPopupOptions = {\r\n            // The `trigger` option doesn't work here because of no trigger element binded yet.\r\n            alignPosition: 'bc',\r\n            fixTriangle: true,\r\n        };\r\n    }\r\n    static style() {\r\n        let { adjust, adjustFontSize, textColor } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tmin-width: ${adjust(180)}px;\n\t\t\tmax-width: ${adjust(320)}px;\n\n\t\t\tf-list{\n\t\t\t\tpadding: ${adjust(8)}px ${adjust(16)}px;\n\t\t\t\tborder-bottom: none;\n\t\t\t\tmax-height: 100%;\n\t\t\t\toverflow-y: auto;\n\t\t\t}\n\t\t}\n\n\t\t.triangle{\n\t\t\tleft: ${adjust(15)}px;\n\t\t}\n\n\t\t.header{\n\t\t\tdisplay: flex;\n\t\t\tline-height: ${adjust(22)}px;\n\t\t\theight: ${adjust(28) + 1}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tpadding-bottom: ${adjust(6)}px;\n\t\t\tborder-bottom: 1px solid ${textColor.alpha(0.8)};\n\t\t}\n\n\t\t.title{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tpadding: 0 ${adjust(16)}px 0 0;\n\t\t\tfont-weight: bold;\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t\t`.extends(super.style());\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<f-popup>\t\n\t\t\t\t${this.renderHead()}\n\t\t\t\t<slot />\n\t\t\t</f-popup>\n\t\t`.extends(super.render());\r\n    }\r\n    renderHead() {\r\n        if (this.title) {\r\n            return (0, flit_1.html) `\n\t\t\t\t<div class=\"header\">\n\t\t\t\t\t<div class=\"title\">${this.title}</div>\n\t\t\t\t</div>\n\t\t\t`;\r\n        }\r\n        return '';\r\n    }\r\n};\r\nMenu = __decorate([\r\n    (0, flit_1.define)('f-menu')\r\n], Menu);\r\nexports.Menu = Menu;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ColLayout = exports.RowLayout = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\n/**\r\n * `<f-row>` used to do grid layout, can contain several `<f-col>`.\r\n * If available width changes, count of `<f-col>` in one line may be adjusted.\r\n */\r\nlet RowLayout = class RowLayout extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.cols = [];\r\n        /** Column count in one line. */\r\n        this.columnCount = 24;\r\n        /** Gutter betweens columns in pixels. */\r\n        this.gutter = 0;\r\n        /** Column alignment starts from. */\r\n        this.justify = 'start';\r\n    }\r\n    static style() {\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: flex;\n\t\t\tflex-wrap: wrap;\n\t\t}\n\t\t`;\r\n    }\r\n    onReady() {\r\n        this.watchImmediately(() => this.justify, (justify) => {\r\n            this.el.style.justifyContent = justify === 'start' ? '' : justify === 'end' ? 'flex-end' : justify;\r\n        });\r\n    }\r\n    /** Register child `<f-col>`. */\r\n    register(col) {\r\n        this.cols.push(col);\r\n    }\r\n    /** Returns whether `col` is the first column. */\r\n    isFirstCol(col) {\r\n        return col === this.cols[0];\r\n    }\r\n    /** Get column count in left. */\r\n    getLeftColumnCount(col) {\r\n        let { columnCount } = this;\r\n        let count = 0;\r\n        for (let c of this.cols) {\r\n            if (c === col) {\r\n                break;\r\n            }\r\n            let span = Math.min(c.span, columnCount);\r\n            let offset = c.offset % columnCount;\r\n            count += span + offset;\r\n        }\r\n        return count;\r\n    }\r\n};\r\nRowLayout = __decorate([\r\n    (0, flit_1.define)('f-row')\r\n], RowLayout);\r\nexports.RowLayout = RowLayout;\r\n/** `<f-col>` will be contained inside a `<f-row>` to do grid layout. */\r\nlet ColLayout = class ColLayout extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Column span, default value is  */\r\n        this.span = 1;\r\n        this.offset = 0;\r\n    }\r\n    onCreated() {\r\n        let row = (0, flit_1.getComponent)(this.el.parentElement);\r\n        if (!(row instanceof RowLayout)) {\r\n            throw new Error(`\"<f-col>\" must be included in a \"<f-row>\"`);\r\n        }\r\n        row.register(this);\r\n        this.row = row;\r\n    }\r\n    onUpdated() {\r\n        this.el.style.marginLeft = this.getMarginLeft();\r\n        this.el.style.width = this.getWidth();\r\n    }\r\n    getMarginLeft() {\r\n        let leftColCount = this.row.getLeftColumnCount(this);\r\n        let { columnCount, gutter } = this.row;\r\n        let offset = this.offset % columnCount;\r\n        let isFirstCol = (leftColCount + offset) % columnCount === 0;\r\n        if (offset > 0) {\r\n            return (offset / gutter) * 100 + '%';\r\n        }\r\n        else {\r\n            return isFirstCol ? '0' : gutter + 'px';\r\n        }\r\n    }\r\n    getWidth() {\r\n        let { gutter, columnCount } = this.row;\r\n        let span = Math.min(this.span, columnCount);\r\n        let percent = span / columnCount;\r\n        let gutterPXs = gutter * (span - 1 - (columnCount - 1) * percent);\r\n        return `calc(${percent * 100}% - ${-gutterPXs}px)`;\r\n    }\r\n};\r\nColLayout = __decorate([\r\n    (0, flit_1.define)('f-col')\r\n], ColLayout);\r\nexports.ColLayout = ColLayout;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.dialog = exports.QuickDialog = exports.Dialog = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst element_1 = require(\"../utils/element\");\r\n/** `<f-dialog>` shows critical content and in a overlay modal, you must interact with it before continue. */\r\nlet Dialog = class Dialog extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Options for current dialog. */\r\n        this.currentOptions = null;\r\n        /** Also as a marker to know if current options are expired. */\r\n        this.resolve = null;\r\n        /** Dialog stack, will show one by one. */\r\n        this.stack = [];\r\n        /** Whether any dialog opened. */\r\n        this.opened = true;\r\n        /** Where to append current dialog. */\r\n        this.appendTo = 'body';\r\n    }\r\n    static style() {\r\n        let { textColor, adjust, adjustFontSize, popupBorderRadius, popupShadowBlurRadius, popupShadowColor, popupBackgroundColor } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tz-index: 1000;\n\t\t\twidth: ${adjust(360)}px;\n\t\t\tposition: fixed;\n\t\t\tborder-radius: ${popupBorderRadius}px;\n\t\t\tbox-shadow: 0 0 ${popupShadowBlurRadius}px ${popupShadowColor};\n\t\t\tbackground: ${popupBackgroundColor};\n\t\t\tmax-width: 96%;\n\t\t\tmax-height: 96%;\n\t\t\tpadding: ${adjust(8)}px ${adjust(16)}px ${adjust(16)}px;\n\t\t}\n\n\t\t.mask{\n\t\t\tposition: fixed;\n\t\t\tz-index: 1000;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\t}\n\n\t\t.header{\n\t\t\tdisplay: flex;\n\t\t\tline-height: ${adjust(22)}px;\n\t\t\theight: ${adjust(28) + 1}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tpadding-bottom: ${adjust(6)}px;\n\t\t\tborder-bottom: 1px solid ${textColor.alpha(0.8)};\n\t\t}\n\n\t\t.title{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tpadding: 0 ${adjust(16)}px 0 0;\n\t\t\tfont-weight: bold;\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\n\t\t.content{\n\t\t\tdisplay: flex;\n\t\t\tmargin-top: ${adjust(8)}px;\n\t\t}\n\n\t\t.icon{\n\t\t\tpadding-right: ${adjust(12)}px;\n\t\t}\n\n\t\t.message{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tpadding: ${adjust(4)}px 0;\n\t\t}\n\n\t\t.list{\n\t\t\tmargin: ${adjust(8)}px 0;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tlist-style-type: square;\n\t\t\tpadding-left: ${adjust(28)}px;\n\t\t}\n\n\t\t.actions{\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: flex-end;\n\t\t\tmargin-top: ${adjust(16)}px;\n\n\t\t\tbutton{\n\t\t\t\tmargin-left: ${adjust(8)}px;\n\t\t\t}\n\n\t\t\t.third{\n\t\t\t\tmargin-left: 0;\n\t\t\t\tmargin-right: auto;\n\t\t\t}\n\t\t}\n\n\t\t.input{\n\t\t\tmargin-top: ${adjust(8)}px;\n\t\t\tmargin-bottom: ${adjust(8)}px;\n\t\t\twidth: 100%;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        let options = this.currentOptions;\r\n        if (!options) {\r\n            return '';\r\n        }\r\n        return (0, flit_1.html) `\n\t\t\t<template\n\t\t\t\ttabindex=\"0\"\n\t\t\t\t${(0, flit_1.show)(this.opened, { name: 'fade', enterAtStart: true, onend: this.onTransitionEnd })}\n\t\t\t>\n\t\t\t\t<div class=\"mask\"\n\t\t\t\t\t:refElement=\"mask\"\n\t\t\t\t\t${(0, flit_1.show)(this.opened, { name: 'fade', enterAtStart: true })}\n\t\t\t\t/>\n\n\t\t\t\t${options.title ? (0, flit_1.html) `\n\t\t\t\t\t<div class=\"header\">\n\t\t\t\t\t\t<div class=\"title\">\n\t\t\t\t\t\t\t${options.title}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t` : ''}\n\n\t\t\t\t<div class=\"content\">\n\n\t\t\t\t\t${options.icon ? (0, flit_1.html) `<div class=\"icon\">\n\t\t\t\t\t\t<f-icon .type=\"${options.icon}\" />\n\t\t\t\t\t</div>` : ''}\n\n\t\t\t\t\t<div class=\"message\">\n\t\t\t\t\t\t${options.message}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t${options.list && options.list.length > 0 ? (0, flit_1.html) `\n\t\t\t\t\t\t<ul class=\"list\">\n\t\t\t\t\t\t\t${options.list.map(text => (0, flit_1.html) `<li>${text}</li>`)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t` : ''}\n\t\t\t\t</div>\n\n\t\t\t\t${this.renderActions(options.actions)}\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    renderActions(actions) {\r\n        if (actions && actions.length > 0) {\r\n            let results = actions.map(action => (0, flit_1.html) `\n\t\t\t\t<button class=\"action\"\n\t\t\t\t\t?primary=${action.primary}\n\t\t\t\t\t:class.third=${action.third}\n\t\t\t\t\t@click=${() => this.onClickActionButton(action)}>\n\t\t\t\t\t${action.text}\n\t\t\t\t</button>\n\t\t\t`);\r\n            return (0, flit_1.html) `<div class=\"actions\">${results}</div>`;\r\n        }\r\n        return '';\r\n    }\r\n    onClickActionButton(action) {\r\n        var _a, _b, _c;\r\n        // Interrupted.\r\n        if ((_b = (_a = this.currentOptions) === null || _a === void 0 ? void 0 : _a.interruptAction) === null || _b === void 0 ? void 0 : _b.call(_a, (_c = action.value) !== null && _c !== void 0 ? _c : '')) {\r\n            return;\r\n        }\r\n        if (this.resolve) {\r\n            this.resolve(action.value);\r\n            this.resolve = null;\r\n        }\r\n        if (this.stack.length > 0) {\r\n            let item = this.stack.shift();\r\n            this.applyOptions(item.options, item.resolve);\r\n        }\r\n        else {\r\n            this.hide();\r\n        }\r\n    }\r\n    onTransitionEnd(type, finish) {\r\n        if (type === 'leave' && finish) {\r\n            if (this.refElements.mask) {\r\n                this.refElements.mask.remove();\r\n            }\r\n            this.el.remove();\r\n        }\r\n        else if (type === 'enter') {\r\n            let input = this.el.querySelector('input');\r\n            if (input) {\r\n                input.focus();\r\n            }\r\n        }\r\n    }\r\n    async onConnected() {\r\n        await (0, flit_1.untilRenderComplete)();\r\n        if (this.refElements.mask && this.el.previousElementSibling !== this.refElements.mask) {\r\n            this.el.before(this.refElements.mask);\r\n        }\r\n        this.toCenter();\r\n        if (this.el.tabIndex === 0) {\r\n            this.el.focus();\r\n        }\r\n        (0, flit_1.on)(window, 'resize', this.onWindowResize, this);\r\n    }\r\n    onDisconnected() {\r\n        (0, flit_1.off)(window, 'resize', this.onWindowResize, this);\r\n    }\r\n    onWindowResize() {\r\n        if (this.opened) {\r\n            this.toCenter();\r\n        }\r\n    }\r\n    toCenter() {\r\n        (0, ff_1.align)(this.el, document.documentElement, 'c');\r\n    }\r\n    /** Apply options as current options. */\r\n    applyOptions(options, resolve) {\r\n        this.currentOptions = options;\r\n        this.resolve = resolve;\r\n    }\r\n    /** Add an option to stack. */\r\n    async addOptions(options) {\r\n        let resolve;\r\n        let promise = new Promise(scopedResolve => {\r\n            resolve = scopedResolve;\r\n        });\r\n        if (this.resolve) {\r\n            this.stack.push({\r\n                options,\r\n                resolve: resolve,\r\n            });\r\n        }\r\n        else {\r\n            this.applyOptions(options, resolve);\r\n            this.show();\r\n        }\r\n        return promise;\r\n    }\r\n    /** Show current dialog. */\r\n    show() {\r\n        this.opened = true;\r\n        if (this.appendTo) {\r\n            (0, element_1.appendTo)(this.el, this.appendTo);\r\n        }\r\n    }\r\n    /** Hide current dialog. */\r\n    hide() {\r\n        this.opened = false;\r\n    }\r\n    /** Trigger specified action manually. */\r\n    triggerAction(value) {\r\n        if (!this.currentOptions || !this.currentOptions.actions) {\r\n            return;\r\n        }\r\n        let action = this.currentOptions.actions.find(action => action.value === value);\r\n        if (action) {\r\n            this.onClickActionButton(action);\r\n        }\r\n    }\r\n};\r\nDialog = __decorate([\r\n    (0, flit_1.define)('f-dialog')\r\n], Dialog);\r\nexports.Dialog = Dialog;\r\nclass QuickDialog {\r\n    constructor() {\r\n        this.dialogComponent = null;\r\n    }\r\n    addOptions(options) {\r\n        if (!this.dialogComponent) {\r\n            this.dialogComponent = (0, flit_1.getRenderedAsComponent)((0, flit_1.render)((0, flit_1.html) `<f-dialog />`));\r\n        }\r\n        return this.dialogComponent.addOptions(options);\r\n    }\r\n    /** Show default type dialog or add it to dialog stack. */\r\n    show(message, options = {}) {\r\n        return this.addOptions({\r\n            message,\r\n            actions: [{ value: 'ok', text: ff_1.translations.get('ok') }],\r\n            ...options,\r\n        });\r\n    }\r\n    /** Show confirm type dialog or add it to dialog stack. */\r\n    confirm(message, options = {}) {\r\n        return this.addOptions({\r\n            icon: 'confirm',\r\n            message,\r\n            actions: [\r\n                { value: 'cancel', text: ff_1.translations.get('cancel') },\r\n                { value: 'ok', text: ff_1.translations.get('ok'), primary: true },\r\n            ],\r\n            ...options,\r\n        });\r\n    }\r\n    /** Show prompt type dialog or add it to dialog stack. */\r\n    async prompt(message, options = {}) {\r\n        let value = options.defaultValue ? String(options.defaultValue) : '';\r\n        let input;\r\n        let originalInterruptAction = options.interruptAction;\r\n        let messageWithInput = (0, flit_1.html) `\n\t\t\t${message}\n\n\t\t\t${options.inputType === 'textarea'\r\n            ? (0, flit_1.html) `\n\t\t\t\t<f-textarea class=\"input\" \n\t\t\t\t\t.placeholder=${options.placeholder}\n\t\t\t\t\t.validator=${options.validator}\n\t\t\t\t\t.type=${options.inputType || 'text'}\n\t\t\t\t\t.value=${value}\n\t\t\t\t\t:refElement=${async (i) => input = await (0, flit_1.getComponentAsync)(i)}\n\t\t\t\t\t@@input=${(v) => value = v}\n\t\t\t\t/>\n\t\t\t` : (0, flit_1.html) `\n\t\t\t\t<f-input class=\"input\" \n\t\t\t\t\t.placeholder=${options.placeholder}\n\t\t\t\t\t.validator=${options.validator}\n\t\t\t\t\t.type=${options.inputType || 'text'}\n\t\t\t\t\t.value=${value}\n\t\t\t\t\t:refElement=${async (i) => input = await (0, flit_1.getComponentAsync)(i)}\n\t\t\t\t\t@@input=${(v) => value = v}\n\t\t\t\t\t@keydown.enter=${() => this.dialogComponent.triggerAction('ok')}\n\t\t\t\t/>\n\t\t\t`}\n\t\t\t\n\t\t`;\r\n        let btn = await this.addOptions({\r\n            message: messageWithInput,\r\n            actions: [\r\n                { value: 'cancel', text: ff_1.translations.get('cancel') },\r\n                { value: 'ok', text: ff_1.translations.get('ok'), primary: true },\r\n            ],\r\n            ...options,\r\n            interruptAction: (button) => {\r\n                return (originalInterruptAction === null || originalInterruptAction === void 0 ? void 0 : originalInterruptAction(button)) || button === 'ok' && input.valid === false;\r\n            },\r\n        });\r\n        if (btn === 'ok') {\r\n            return value;\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexports.QuickDialog = QuickDialog;\r\n/** A quick global API to show dialogs. */\r\nexports.dialog = new QuickDialog();\r\n/** Default transitions for `<f-dialog>`. */\r\nff_1.translations.addIf('enus', {\r\n    ok: 'OK',\r\n    cancel: 'Cancel',\r\n    yes: 'Yes',\r\n    no: 'No',\r\n});\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Form = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\n/** `<f-form>` can contain `<f-input>` or `<f-textarea>` and check their valid state in bundle. */\r\nlet Form = class Form extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** All child `<f-input>` or `<f-textarea>`. */\r\n        this.inputs = [];\r\n        /** Whether all input or textare are valid. */\r\n        this.valid = true;\r\n    }\r\n    static style() {\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: block;\n\t\t}\n\t\t`;\r\n    }\r\n    /** Register a child `<f-input>` or `<f-textarea>`. */\r\n    register(input) {\r\n        this.inputs.push(input);\r\n        this.valid = this.valid && input.valid !== false;\r\n        input.on('change', this.onInputChange, this);\r\n    }\r\n    onInputChange(_value, valid) {\r\n        if (valid !== this.valid) {\r\n            if (valid) {\r\n                this.valid = this.inputs.every(input => input.valid);\r\n            }\r\n            else {\r\n                this.valid = false;\r\n            }\r\n        }\r\n    }\r\n    /** Validate all child inputs or textareas. */\r\n    validate() {\r\n        for (let input of this.inputs) {\r\n            input.setTouched(true);\r\n        }\r\n    }\r\n    /** Reset valid state for all child inputs or textareas. */\r\n    reset() {\r\n        for (let input of this.inputs) {\r\n            input.setTouched(false);\r\n        }\r\n    }\r\n};\r\nForm = __decorate([\r\n    (0, flit_1.define)('f-form')\r\n], Form);\r\nexports.Form = Form;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Popover = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst popup_1 = require(\"./popup\");\r\n/**\r\n * `<f-popover>` shows content message in a popup beside it's trigger element.\r\n *\r\n * `:slot=action` - Add action buttons and show them at head.\r\n */\r\nlet Popover = class Popover extends popup_1.Popup {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Popover title. */\r\n        this.title = '';\r\n        /** Whether shows a close icon to quickly close current popover. */\r\n        this.closable = false;\r\n        this.defaultPopupOptions = {\r\n            // `trigger` not work here because when need to handle trigger, current component is not created.\r\n            alignPosition: 'bc',\r\n            fixTriangle: true,\r\n        };\r\n    }\r\n    static style() {\r\n        let { adjust, adjustFontSize, textColor } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tpadding: ${adjust(8)}px ${adjust(16)}px;\n\t\t\tmin-width: ${adjust(240)}px;\n\t\t\tmax-width: ${adjust(400)}px;\n\t\t}\n\n\t\t.triangle{\n\t\t\tleft: ${adjust(12)}px;\n\t\t}\n\n\t\t.header{\n\t\t\tdisplay: flex;\n\t\t\tline-height: ${adjust(22)}px;\n\t\t\theight: ${adjust(28) + 1}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tpadding-bottom: ${adjust(6)}px;\n\t\t\tborder-bottom: 1px solid ${textColor.alpha(0.8)};\n\t\t\tmargin-bottom: ${adjust(8)}px;\n\t\t}\n\n\t\t.title{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tfont-weight: bold;\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\n\t\t.close{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(28)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tmargin-top: ${adjust(-6)}px;\n\t\t\tmargin-right: ${adjust(-9)}px;\n\t\t\tcursor: pointer;\n\n\t\t\t&:active{\n\t\t\t\ttransform: translateY(1px);\n\t\t\t}\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\t\t}\n\n\t\t.actions{\n\t\t\tmargin-left: ${adjust(15)}px;\n\n\t\t\tbutton{\n\t\t\t\tmargin-left: ${adjust(6)}px;\n\t\t\t\theight: ${adjust(22)}px;\n\t\t\t\tline-height: ${20}px;\n\t\t\t\tpadding: 0 ${adjust(8)}px;\n\t\t\t}\n\t\t}\n\n\t\t.content{\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tpadding: ${adjust(4)}px 0;\n\t\t}\n\t\t`.extends(super.style());\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<template>\t\n\t\t\t\t${this.renderHead()}\n\t\t\t\t<div class=\"content\"><slot /></div>\n\t\t\t</template>\n\t\t`.extends(super.render());\r\n    }\r\n    renderHead() {\r\n        if (this.title) {\r\n            let shouldRenderClose = this.closable && !this.slots.action;\r\n            return (0, flit_1.html) `\n\t\t\t<div class=\"header\">\n\t\t\t\t<div class=\"title\">${this.title}</div>\n\n\t\t\t\t<div class=\"actions\" :show=${this.slots.action}>\n\t\t\t\t\t<slot name=\"action\" />\n\t\t\t\t</div>\n\n\t\t\t\t${shouldRenderClose ? (0, flit_1.html) `\n\t\t\t\t\t<div class=\"close\" @click=${this.close}>\n\t\t\t\t\t\t<f-icon .type=\"close\" />\n\t\t\t\t\t</div>\n\t\t\t\t` : ''}\n\t\t\t</div>\n\t\t\t`;\r\n        }\r\n        return '';\r\n    }\r\n};\r\nPopover = __decorate([\r\n    (0, flit_1.define)('f-popover')\r\n], Popover);\r\nexports.Popover = Popover;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"./theme\");\r\n(0, flit_1.addGlobalStyle)(() => {\r\n    let { mainColor, textColor, borderColor, errorColor, fontSize, borderRadius, focusBlurRadius, adjust, adjustFontSize, backgroundColor } = theme_1.theme;\r\n    return (0, flit_1.css) `\n\thtml{\n\t\tcolor: ${textColor};\n\t\tfont-size: ${fontSize}px;\n\t\tline-height: ${adjust(28)}px;\n\t\tbackground-color: ${backgroundColor};\n\t}\n\n\th1{\n\t\tfont-size: ${adjustFontSize(68)}px;\n\t\tline-height: 1.2;\n\t\tfont-weight: 700;\n\t}\n\n\th2{\n\t\tfont-size: ${adjustFontSize(36)}px;\n\t\tline-height: 1.2;\n\t\tfont-weight: 100;\n\t}\n\n\th3{\n\t\tfont-size: ${adjustFontSize(26)}px;\n\t\tline-height: 1.2;\n\t\tfont-weight: 400;\n\t}\n\n\th4{\n\t\tfont-size: ${adjustFontSize(22)}px;\n\t\tline-height: 1.2;\n\t\tfont-weight: 400;\n\t}\n\n\th5{\n\t\tfont-size: ${adjustFontSize(18)}px;\n\t\tline-height: 1.2;\n\t}\n\n\th6{\n\t\tfont-size: ${adjustFontSize(14)}px;\n\t\tline-height: 1.2;\n\t}\n\n\tbutton{\n\t\tdisplay: inline-flex;\n\t\tjustify-content: center;\n\t\theight: ${adjust(28)}px;\n\t\tline-height: ${adjust(28) - 2}px;\n\t\tborder: 1px solid ${borderColor};\n\t\tcolor: ${textColor};\n\t\tborder-radius: ${borderRadius}px;\n\t\tpadding: 0 ${adjust(12)}px;\n\t\tbackground: ${backgroundColor};\n\t\ttext-align: center;\n\t\tcursor: pointer;\n\t\tvertical-align: top;\n\t\twhite-space: nowrap;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t\t\n\t\t&:hover, &:focus{\n\t\t\tborder-color: #666;\n\t\t\tbackground-color: #666;\n\t\t\tcolor: #fff;\n\t\t}\n\n\t\t&:active{\n\t\t\tbackground: ${textColor};\n\t\t\tborder-color: ${textColor};\n\t\t\tcolor: ${backgroundColor};\n\t\t}\n\n\t\t&:focus{\n\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor};\n\t\t}\n\n\t\tf-icon, f-icon-loading{\n\t\t\tposition: relative;\n\t\t\ttop: -1px;\n\n\t\t\t&:first-child{\n\t\t\t\tmargin-right: ${adjust(6)}px;\n\t\t\t}\n\n\t\t\t&:last-child{\n\t\t\t\tmargin-left: ${adjust(6)}px;\n\t\t\t}\n\n\t\t\t&:only-child{\n\t\t\t\tmargin-left: 0;\n\t\t\t\tmargin-right: 0;\n\t\t\t}\n\t\t}\n\n\t\t&[primary]{\n\t\t\tbackground: ${mainColor};\n\t\t\tborder-color: ${mainColor};\n\t\t\tcolor: #fff;\n\n\t\t\t&:hover, &:focus{\n\t\t\t\tbackground: ${mainColor.darken(15)};\n\t\t\t\tborder-color: ${mainColor.darken(15)};\n\t\t\t}\n\t\t\n\t\t\t&:active{\n\t\t\t\tbackground: ${mainColor.darken(30)};\n\t\t\t\tborder-color: ${mainColor.darken(30)};\n\t\t\t}\n\t\t}\n\n\t\t&[flat]{\n\t\t\tborder: none;\n\t\t\tpadding-left: 0;\n\t\t\tpadding-right: 0;\n\t\t\tline-height: ${adjust(28)}px;\n\n\t\t\t&:hover, &:focus{\n\t\t\t\tbackground: none;\n\t\t\t\tcolor: ${textColor};\n\t\t\t}\n\n\t\t\t&:active{\n\t\t\t\tbackground: none;\n\t\t\t}\n\n\t\t\t&:focus{\n\t\t\t\tbox-shadow: none;\n\t\t\t}\n\t\t}\n\t}\n\n\ta[primary]{\n\t\tcolor: ${mainColor};\n\t}\n\n\tlabel{\n\t\tfont-weight: bold;\n\t\tfont-size: ${adjustFontSize(13)}px;\n\n\t\t&[required]{\n\t\t\t&::after{\n\t\t\t\tposition: relative;\n\t\t\t\tcontent: '*';\n\t\t\t\tcolor: ${errorColor};\n\t\t\t\tmargin-left: 2px;\n\t\t\t\ttop: ${adjust(-5)}px;\n\t\t\t}\n\t\t}\n\n\t\tf-icon{\n\t\t\tmargin-left: 4px;\n\t\t\tcolor: ${textColor.toMiddle(20)};\n\t\t}\n\t}\n\n\n\t.fade-enter, .fade-leave{\n\t\ttransition: opacity 0.2s ease-out;\n\t}\n\t\n\t.fade-enter-from, .fade-leave-to{\n\t\topacity: 0;\n\t}\n\t\n\t.fade-enter-to, .fade-leave-from{\n\t\topacity: 1;\n\t}\n\n\n\t::-webkit-scrollbar{\n\t\theight: 10px;\n\t\twidth: 10px;\n\t\tbackground: ${backgroundColor.toMiddle(10)};\n\t}\n\n\t::-webkit-scrollbar-thumb{\n\t\tbackground: ${backgroundColor.toMiddle(30)};\n\n\t\t&:hover{\n\t\t\tbackground: ${backgroundColor.toMiddle(40)};\n\t\t}\n\n\t\t&:active{\n\t\t\tbackground: ${backgroundColor.toMiddle(50)};\n\t\t}\n\t}\n`;\r\n});\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.List = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst tooltip_1 = require(\"../bindings/tooltip\");\r\nconst tree_data_navigator_1 = require(\"./helpers/tree-data-navigator\");\r\n/**\r\n * `<f-list>` will render data items to a list,\r\n * and provide single or multiple selection.\r\n * It shouldn't include too many levels, since it doesn't have overflow setting like `f-tree`.\r\n */\r\nlet List = class List extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Selected indices by keyboard navigation. */\r\n        this.treeNavigationIndices = [];\r\n        /** Whether watching keyboard navigation events. */\r\n        this.watchingKeyBoardNavigation = false;\r\n        /** List type:\r\n         * `selection`: provide single item or multiple items selection with a checkbox icon.\r\n         * `navigation`: provide single item navigation with a vertical line icon.\r\n         * Default value is `selection`.\r\n         */\r\n        this.type = 'selection';\r\n        /**\r\n         * Whether each item is selectable, only when at `selection` mode.\r\n         * Default value is `false`.\r\n         */\r\n        this.selectable = false;\r\n        /**\r\n         * Whether can select multiple items, only for type `selection`.\r\n         * Default value is `false`.\r\n         */\r\n        this.multipleSelect = false;\r\n        /** Input data list. */\r\n        this.data = [];\r\n        /** Indicates current select values. */\r\n        this.selected = [];\r\n        /**\r\n         * Unique active value for `navigation` type.\r\n         * If this value set when initializing, will make the associated item visible.\r\n         * Otherwise you can call `ensureActiveItemVisible()` to do same thing.\r\n         */\r\n        this.active = null;\r\n        /** If specified, when the element get focus, you can use keyboard arrow keys to navigate inside current list. */\r\n        this.navigateFrom = null;\r\n    }\r\n    static style() {\r\n        let { mainColor, adjust, borderColor, adjustFontSize } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: block;\n\t\t\tborder-bottom: 1px solid ${borderColor.alpha(0.4)};\n\t\t}\n\t\t\n\t\t.option{\n\t\t\tposition: relative;\n\t\t\tdisplay: flex;\n\t\t\tpadding-top: ${adjust(2)}px;\n\t\t\tpadding-bottom: ${adjust(2)}px;\n\t\t\tcursor: pointer;\n\t\t\tborder-top: 1px solid ${borderColor.alpha(0.4)};\n\n\t\t\t&:first-child{\n\t\t\t\tborder-top: none;\n\t\t\t}\n\n\t\t\t&:hover{\n\t\t\t\tcolor: ${mainColor};\n\t\t\t}\n\n\t\t\t&.selected{\n\t\t\t\tcolor: ${mainColor};\n\t\t\t}\n\n\t\t\t&.active{\n\t\t\t\tcolor: ${mainColor};\n\n\t\t\t\t&::after{\n\t\t\t\t\tcontent: '';\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\ttop: ${adjust(3)}px;\n\t\t\t\t\tbottom: ${adjust(3)}px;\n\t\t\t\t\tright: 0;\n\t\t\t\t\twidth: 2px;\n\t\t\t\t\tbackground: ${mainColor.alpha(0.8)};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&.arrow-selected{\n\t\t\t\tbackground-color: ${mainColor.alpha(0.1)};\n\t\t\t}\n\t\t}\n\n\t\t.toggle{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(22)}px;\n\t\t\topacity: 0.7;\n\t\t}\n\n\t\t.icon{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(22)}px;\n\t\t}\n\n\t\t.text{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tpadding-right: 4px;\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\n\t\t.selected-icon{\n\t\t\tmargin: 0 ${adjust(6)}px;\n\t\t}\n\n\t\t.subsection{\n\t\t\tpadding-left: ${adjust(22)}px;\n\t\t\tpadding-bottom: ${adjust(4)}px;\n\t\t\toverflow: hidden;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\n\t\t\t.option{\n\t\t\t\tpadding-top: 0;\n\t\t\t\tpadding-bottom: 0;\n\t\t\t\tborder-top: none;\n\t\t\t\tline-height: ${adjust(26)}px;\n\t\t\t}\n\n\t\t\t.subsection{\n\t\t\t\tpadding-top: 0;\n\t\t\t}\n\n\t\t\t.subsection:not(:last-child){\n\t\t\t\tpadding-bottom: ${adjust(3)}px;\n\t\t\t\tmargin-bottom: ${adjust(3)}px;\n\t\t\t\tborder-bottom: 1px solid ${borderColor.alpha(0.4)};\n\t\t\t}\n\n\t\t\t.subsection:last-child{\n\t\t\t\tpadding-bottom: 0;\n\t\t\t\tmargin-bottom: 0;\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `${this.renderOptions(this.data, this.treeNavigationIndices)}`;\r\n    }\r\n    renderOptions(items, indices) {\r\n        let siblingsHaveIcon = items.some(item => item.icon);\r\n        let siblingsHaveChildren = items.some(item => item.children);\r\n        let options = (0, flit_1.repeat)(items, (item, index) => {\r\n            let childIndices = (indices === null || indices === void 0 ? void 0 : indices[0]) === index ? indices.slice(1) : null;\r\n            return this.renderOption(item, siblingsHaveIcon, siblingsHaveChildren, childIndices);\r\n        });\r\n        return options;\r\n    }\r\n    renderOption(item, siblingsHaveIcon, siblingsHaveChildren, indices) {\r\n        let subsection = item.children && item.opened ? (0, flit_1.html) `\n\t\t\t<div class=\"subsection\">${this.renderOptions(item.children, indices)}</div>\n\t\t` : null;\r\n        let tip = item.tip ? (0, tooltip_1.tooltip)(item.tip) : null;\r\n        return (0, flit_1.html) `\n\t\t\t<div\n\t\t\t\tclass=\"option\"\n\t\t\t\t:class=${this.renderClassName(item)}\n\t\t\t\t:class.arrow-selected=${(indices === null || indices === void 0 ? void 0 : indices.length) === 0}\n\t\t\t\t@click.prevent=${() => this.onClickOption(item)}\n\t\t\t\t${tip}\n\n\t\t\t>\n\t\t\t\t${item.children ? (0, flit_1.html) `\n\t\t\t\t\t<div class='toggle' @click.stop=${() => this.toggleOpened(item)}>\n\t\t\t\t\t\t<f-icon .type=${item.opened ? 'triangle-down' : 'triangle-right'} />\n\t\t\t\t\t</div>\n\t\t\t\t` : siblingsHaveChildren ? (0, flit_1.html) `\n\t\t\t\t\t<div class='toggle' />\n\t\t\t\t` : ''}\n\n\t\t\t\t${siblingsHaveIcon ? (0, flit_1.html) `\n\t\t\t\t\t<div class='icon'>\n\t\t\t\t\t\t<f-icon .type=${item.icon} />\n\t\t\t\t\t</div>\n\t\t\t\t` : ''}\n\t\t\n\t\t\t\t<div class=\"text\">\n\t\t\t\t\t${item.text}\n\t\t\t\t</div>\n\n\t\t\t\t${this.isSelected(item) ? (0, flit_1.html) `<f-icon class=\"selected-icon\" .type=\"checked\" />` : ''}\n\t\t\t</div>\n\n\t\t\t${(0, flit_1.toggle)(subsection, { properties: ['height', 'marginBottom', 'paddingBottom', 'opacity'] })}\n\t\t`;\r\n    }\r\n    onCreated() {\r\n        if (this.active) {\r\n            this.ensureActiveItemVisible();\r\n        }\r\n    }\r\n    onReady() {\r\n        if (this.navigateFrom) {\r\n            let lastElement = null;\r\n            this.watchImmediately(() => {\r\n                if (typeof this.navigateFrom === 'function') {\r\n                    return this.navigateFrom();\r\n                }\r\n                else {\r\n                    return this.navigateFrom;\r\n                }\r\n            }, navigateFrom => {\r\n                if (lastElement) {\r\n                    (0, flit_1.off)(lastElement, 'keydown', this.moveArrowSelectedByEvent, this);\r\n                    (0, flit_1.off)(lastElement, 'blur', this.onNavigateFromElementBlur, this);\r\n                }\r\n                if (navigateFrom) {\r\n                    (0, flit_1.on)(navigateFrom, 'keydown', this.moveArrowSelectedByEvent, this);\r\n                    (0, flit_1.on)(navigateFrom, 'blur', this.onNavigateFromElementBlur, this);\r\n                }\r\n                lastElement = navigateFrom;\r\n            });\r\n        }\r\n    }\r\n    /** Moves arrow selected by a keyboard event. */\r\n    moveArrowSelectedByEvent(event) {\r\n        if (event.key === 'ArrowUp') {\r\n            this.watchingKeyBoardNavigation = true;\r\n            this.treeNavigationIndices = tree_data_navigator_1.TreeDataNavigator.moveArrowUp(this.data, this.treeNavigationIndices);\r\n        }\r\n        else if (event.key === 'ArrowDown') {\r\n            this.watchingKeyBoardNavigation = true;\r\n            this.treeNavigationIndices = tree_data_navigator_1.TreeDataNavigator.moveArrowDown(this.data, this.treeNavigationIndices);\r\n        }\r\n        else if (event.key === 'ArrowLeft') {\r\n            if (this.watchingKeyBoardNavigation) {\r\n                this.treeNavigationIndices = tree_data_navigator_1.TreeDataNavigator.moveArrowLeft(this.data, this.treeNavigationIndices);\r\n            }\r\n        }\r\n        else if (event.key === 'ArrowRight') {\r\n            if (this.watchingKeyBoardNavigation && this.treeNavigationIndices) {\r\n                let item = tree_data_navigator_1.TreeDataNavigator.getItemByIndices(this.data, this.treeNavigationIndices);\r\n                if (item && !item.opened && item.children) {\r\n                    this.toggleOpened(item);\r\n                    this.treeNavigationIndices = tree_data_navigator_1.TreeDataNavigator.moveArrowRight(this.data, this.treeNavigationIndices);\r\n                }\r\n            }\r\n        }\r\n        else if (event.key === 'Enter') {\r\n            if (this.watchingKeyBoardNavigation && this.treeNavigationIndices) {\r\n                let el = this.el.querySelector(this.scopeClassName('.arrow-selected'));\r\n                if (el) {\r\n                    let box = el.getBoundingClientRect();\r\n                    let centerEl = document.elementFromPoint(box.x + box.width / 2, box.y + box.height / 2);\r\n                    if (centerEl instanceof HTMLElement) {\r\n                        centerEl.click();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.watchingKeyBoardNavigation = false;\r\n            this.treeNavigationIndices = [];\r\n        }\r\n    }\r\n    onNavigateFromElementBlur() {\r\n        this.watchingKeyBoardNavigation = false;\r\n        this.treeNavigationIndices = [];\r\n    }\r\n    renderClassName(item) {\r\n        if (this.type === 'navigation') {\r\n            if (this.active === item.value) {\r\n                return 'active';\r\n            }\r\n        }\r\n        else {\r\n            if (this.isSelected(item)) {\r\n                return 'selected';\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    isSelected(item) {\r\n        return this.selected.includes(item.value);\r\n    }\r\n    onClickOption(item) {\r\n        if (item.value === undefined) {\r\n            this.toggleOpened(item);\r\n        }\r\n        else if (this.type === 'navigation') {\r\n            this.active = item.value;\r\n            this.emit('navigate', item.value);\r\n        }\r\n        else if (this.selectable) {\r\n            if (this.multipleSelect) {\r\n                if (this.selected.includes(item.value)) {\r\n                    (0, ff_1.remove)(this.selected, item.value);\r\n                }\r\n                else {\r\n                    (0, ff_1.add)(this.selected, item.value);\r\n                }\r\n            }\r\n            else {\r\n                this.selected = [item.value];\r\n            }\r\n            this.emit('select', this.multipleSelect ? this.selected : this.selected[0]);\r\n        }\r\n        else {\r\n            this.emit('click', item.value);\r\n        }\r\n    }\r\n    toggleOpened(item) {\r\n        if (item.children) {\r\n            item.opened = !item.opened;\r\n        }\r\n    }\r\n    /** Open sub list recursively to make sure active item becomes visible. */\r\n    ensureActiveItemVisible() {\r\n        if (this.active) {\r\n            this.ensureActiveItemVisibleRecursively(this.data);\r\n        }\r\n    }\r\n    ensureActiveItemVisibleRecursively(items) {\r\n        return items.some(item => {\r\n            if (item.value === this.active) {\r\n                return true;\r\n            }\r\n            if (item.children) {\r\n                let hasActiveChildItem = this.ensureActiveItemVisibleRecursively(item.children);\r\n                if (hasActiveChildItem) {\r\n                    item.opened = true;\r\n                }\r\n            }\r\n            return item.opened;\r\n        });\r\n    }\r\n};\r\nList = __decorate([\r\n    (0, flit_1.define)('f-list')\r\n], List);\r\nexports.List = List;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Resizer = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\n/** `<f-resizer>` should an absolute type resizer bar, drag it will */\r\nlet Resizer = class Resizer extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Which position should align resizer relative to parent. */\r\n        this.position = 'right';\r\n        /** Resizing speed rate, set it to `2` if element aligns to center, and moves 1px will cause 2px increases. */\r\n        this.rate = 1;\r\n        /** Minimum size of parent. */\r\n        this.min = 0;\r\n        /** Maximum size of parent. */\r\n        this.max = Infinity;\r\n        /** Current size of parent. */\r\n        this.size = -1;\r\n    }\r\n    static style() {\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tposition: absolute;\n\t\t\tz-index: 100;\n\t\t}\n\n\t\t.top{\n\t\t\twidth: 100%;\n\t\t\theight: 10px;\n\t\t\ttop: -5px;\n\t\t\tleft: 0;\n\t\t\tcursor: ns-resize;\n\t\t}\n\n\t\t.bottom{\n\t\t\twidth: 100%;\n\t\t\theight: 10px;\n\t\t\tbottom: -5px;\n\t\t\tleft: 0;\n\t\t\tcursor: ns-resize;\n\t\t}\n\n\t\t.left{\n\t\t\twidth: 10px;\n\t\t\theight: 100%;\n\t\t\ttop: 0;\n\t\t\tleft: -5px;\n\t\t\tcursor: ew-resize;\n\t\t}\n\n\t\t.right{\n\t\t\twidth: 10px;\n\t\t\theight: 100%;\n\t\t\ttop: 0;\n\t\t\tright: -5px;\n\t\t\tcursor: ew-resize;\n\t\t}\n\n\t\t.resizing-mask{\n\t\t\tposition: fixed;\n\t\t\tz-index: 9999;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\n\t\t\t&.herizontal{\n\t\t\t\tcursor: ew-resize;\n\t\t\t}\n\n\t\t\t&.vertical{\n\t\t\t\tcursor: ns-resize;\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<template\n\t\t\t\t:class=${this.position}\n\t\t\t\t@mousedown=${this.onStartResize}\n\t\t\t></template>\n\t\t`;\r\n    }\r\n    onReady() {\r\n        if ((0, ff_1.getStyleValue)(this.el.parentElement, 'position') === 'static') {\r\n            throw new Error('Parent of \"<f-resizer>\" must can\\'t have an \"static\" position');\r\n        }\r\n    }\r\n    onStartResize(e) {\r\n        let startX = e.clientX;\r\n        let startY = e.clientY;\r\n        let startParentWidth = this.el.parentElement.offsetWidth;\r\n        let startParentHeight = this.el.parentElement.offsetHeight;\r\n        let onMouseMove = (e) => {\r\n            e.preventDefault();\r\n            this.resize(startParentWidth, startParentHeight, e.clientX - startX, e.clientY - startY);\r\n        };\r\n        let onMouseUp = () => {\r\n            (0, flit_1.off)(document, 'mousemove', onMouseMove);\r\n            cursorMask.remove();\r\n            this.emit('change', this.size);\r\n        };\r\n        let cursorMask = (0, flit_1.render)((0, flit_1.html) `\n\t\t\t<div class=\"resizing-mask\" class=\"${this.position === 'left' || this.position === 'right' ? 'herizontal' : 'vertical'}\" />\n\t\t`, this).getFirstElement();\r\n        document.body.append(cursorMask);\r\n        (0, flit_1.on)(document, 'mousemove', onMouseMove);\r\n        (0, flit_1.once)(document, 'mouseup', onMouseUp);\r\n    }\r\n    resize(startParentWidth, startParentHeight, movementX, movementY) {\r\n        let value;\r\n        if (this.position === 'top' || this.position === 'bottom') {\r\n            let flag = this.position === 'bottom' ? 1 : -1;\r\n            value = startParentHeight + flag * movementY * this.rate;\r\n            value = (0, ff_1.constrain)(value, this.min, this.max);\r\n            this.el.parentElement.style.height = value + 'px';\r\n        }\r\n        else {\r\n            let flag = this.position === 'right' ? 1 : -1;\r\n            value = startParentWidth + flag * movementX * this.rate;\r\n            value = (0, ff_1.constrain)(value, this.min, this.max);\r\n            this.el.parentElement.style.width = value + 'px';\r\n        }\r\n        this.size = value;\r\n        this.emit('change', this.size);\r\n    }\r\n};\r\nResizer = __decorate([\r\n    (0, flit_1.define)('f-resizer')\r\n], Resizer);\r\nexports.Resizer = Resizer;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.IconLoading = exports.Icon = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst icons_1 = require(\"../icons/icons\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst theme_1 = require(\"../style/theme\");\r\n/** `<f-icon type>` will show a specified type svg icon. */\r\nlet Icon = class Icon extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Icon type.\r\n         * You may extend icons by `icons.add(...)`.\r\n         */\r\n        this.type = '';\r\n    }\r\n    render() {\r\n        let code = icons_1.icons.get(this.type);\r\n        if (!code) {\r\n            return '';\r\n        }\r\n        let [viewBox, inner] = (0, ff_1.subMatches)(code, /<svg viewBox=\"(.+?)\">([\\s\\S]+?)<\\/svg>/)[0];\r\n        let [, , w, h] = viewBox.split(' ');\r\n        let width = theme_1.theme.adjust(Number(w));\r\n        let height = theme_1.theme.adjust(Number(h));\r\n        return (0, flit_1.html) `\n\t\t\t<template>\n\t\t\t\t<svg\n\t\t\t\t\tviewBox=${viewBox}\n\t\t\t\t\twidth=${width}\n\t\t\t\t\theight=${height}\n\t\t\t\t\t:html=${inner}\n\t\t\t\t></svg>\n\t\t\t</template>\n\t\t`;\r\n    }\r\n};\r\nIcon.style = (0, flit_1.css) `\n\t:host{\n\t\tdisplay: inline-flex;\n\t\tstroke: currentColor;\n\t\tfill: none;\n\t\tmargin: auto 0;\n\t\tvertical-align: middle;\n\n\t\tsvg{\n\t\t\tmargin: auto;\n\t\t}\n\t}\n\t`;\r\nIcon = __decorate([\r\n    (0, flit_1.define)('f-icon')\r\n], Icon);\r\nexports.Icon = Icon;\r\n/**\r\n * `<f-icon-loading>` will show a specified type svg icon,\r\n * and make it keep ratate when it's `loading` state is `true`.\r\n */\r\nlet IconLoading = class IconLoading extends Icon {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Loading icon type. Default value is `loading`. */\r\n        this.type = 'refresh';\r\n        /** Whether in loading state. */\r\n        this.loading = false;\r\n        /**\r\n         * Whether is playing animation.\r\n         * May keep playing for a little while after stop loading.\r\n         */\r\n        this.playing = false;\r\n    }\r\n    onCreated() {\r\n        this.watchImmediately(() => this.loading, (value) => {\r\n            if (value && !this.playing) {\r\n                this.play();\r\n                this.playing = true;\r\n            }\r\n        });\r\n    }\r\n    play() {\r\n        let fn = (value) => {\r\n            this.el.style.transform = `rotate(${value}deg)`;\r\n        };\r\n        // Playing web animation will cause svg icon becomes fuzzy.\r\n        (0, ff_1.animateInterpolatedValue)(fn, 0, 360, 1000, 'linear').promise.then(() => {\r\n            if (this.loading) {\r\n                this.play();\r\n            }\r\n            else {\r\n                this.playing = false;\r\n            }\r\n        });\r\n    }\r\n};\r\nIconLoading.style = (0, flit_1.css) `\n\t:host{\n\t\tdisplay: inline-flex;\n\t\tstroke: currentColor;\n\t\tfill: none;\n\t\tmargin: auto 0;\n\t\tvertical-align: top;\n\t\tposition: relative;\n\t}`;\r\nIconLoading = __decorate([\r\n    (0, flit_1.define)('f-icon-loading')\r\n], IconLoading);\r\nexports.IconLoading = IconLoading;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Select = void 0;\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst dropdown_1 = require(\"./dropdown\");\r\n/** `<f-select>` works just like `<select>`, you can select one or multiple option from it. */\r\nlet Select = class Select extends dropdown_1.Dropdown {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Inputted text for filtering list items. */\r\n        this.inputted = '';\r\n        /** Is in editing mode, in which you can input text to filter list items. */\r\n        this.editing = false;\r\n        /** Trigger event type. Default value is `click`. */\r\n        this.trigger = 'click';\r\n        /** Whether shows triangle. Default value is `false`. */\r\n        this.triangle = false;\r\n        /**\r\n         * Align margin betweens trigger element and popup content.\r\n         * Default value is '0' in pixels.\r\n         */\r\n        this.alignMargin = 0;\r\n        /**\r\n         * Whether can select multiple items, only for type `selection`.\r\n         * Default value is `false`.\r\n         */\r\n        this.multipleSelect = false;\r\n        /** Whether can input to search from all option text. */\r\n        this.searchable = false;\r\n        /** Placeholder for search input. */\r\n        this.placeholder = '';\r\n        /** Input data list. */\r\n        this.data = [];\r\n        /** Current selected value or multiple values when `multipleSelect` is `true`. */\r\n        this.value = null;\r\n        /**\r\n         * Whether close pop-up after selected.\r\n         * Only works when doing single-selection.\r\n         */\r\n        this.hideAfterSelected = true;\r\n    }\r\n    static style() {\r\n        let { mainColor, adjust, borderColor, popupShadowBlurRadius, fieldBackgroundColor, popupShadowColor } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tvertical-align: top;\n\t\t\twidth: ${adjust(200)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tbackground: ${fieldBackgroundColor};\n\t\t\tline-height: ${adjust(28)}px;\n\t\t\tjustify-content: space-between;\n\t\t\talign-items: center;\n\t\t\tcursor: pointer;\n\t\t\tbox-shadow: inset 0 -1px 0 0 ${borderColor};\n\n\t\t\t&:hover, &.opened{\n\t\t\t\tbox-shadow: inset 0 -1px 0 0 ${mainColor};\n\n\t\t\t\t.icon{\n\t\t\t\t\tcolor: ${mainColor};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&.not-inputable input{\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t}\n\n\t\t.down-icon{\n\t\t\tmargin-left: 3px;\n\t\t\tmargin-right: 4px;\n\t\t}\n\t\n\t\t.display, .input{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tpadding: 0 0 0 ${adjust(8)}px;\n\t\t\theight: 100%;\n\t\t\tborder: none;\n\t\t\tbackground: transparent;\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t\tbox-shadow: none;\n\n\t\t\t&:focus{\n\t\t\t\tbox-shadow: none;\n\t\t\t}\n\t\t}\n\n\t\t.placeholder{\n\t\t\topacity: 0.5;\n\t\t}\n\t\n\t\t.popup{\n\t\t\tpadding: 0;\n\t\t\tborder-radius: 0;\n\t\t\tfilter: none;\n\t\t\tbox-shadow: 0 1px ${popupShadowBlurRadius}px ${popupShadowColor};\n\t\t}\n\n\t\t.list{\n\t\t\tborder-bottom: none;\n\n\t\t\t.option__f-list{\n\t\t\t\tpadding-left: ${adjust(8)}px;\n\t\t\t\tborder-top: none;\n\t\t\t}\n\t\t}\n\n\t\t.selected-icon{\n\t\t\tmargin-right: -4px;\n\t\t}\n\t\t`.extends(super.style());\r\n    }\r\n    onCreated() {\r\n        this.initializeStartValue();\r\n    }\r\n    initializeStartValue() {\r\n        if (this.multipleSelect && !Array.isArray(this.value)) {\r\n            this.value = [];\r\n        }\r\n    }\r\n    setOpened(opened) {\r\n        super.setOpened(opened);\r\n        if (this.searchable && !opened && this.editing) {\r\n            this.endEditing();\r\n        }\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<template :class.not-inputable=${!this.searchable}>\n\t\t\t\t${this.renderDisplayOrInput()}\n\t\t\t</template>\n\t\t`.extends(super.render());\r\n    }\r\n    renderDisplayOrInput() {\r\n        if (this.editing) {\r\n            return (0, flit_1.html) `\n\t\t\t\t<input type=\"text\"\n\t\t\t\t\tclass=\"input\"\n\t\t\t\t\t:refElement=\"input\"\n\t\t\t\t\t.value=${this.inputted}\n\t\t\t\t\t.placeholder=${this.placeholder}\n\t\t\t\t\t?readonly=${!this.editing}\n\t\t\t\t\t@click=${this.onClick}\n\t\t\t\t\t@input=${this.onInput}\n\t\t\t\t>\n\t\t\t`;\r\n        }\r\n        else {\r\n            let text = this.renderCurrentDisplay();\r\n            return (0, flit_1.html) `\n\t\t\t\t<div\n\t\t\t\t\tclass=\"input\"\n\t\t\t\t\t:class.placeholder=${!text}\n\t\t\t\t\t@click=${this.onClick}\n\t\t\t\t>\n\t\t\t\t\t${text || this.placeholder}\n\t\t\t\t</div>\n\t\t\t`;\r\n        }\r\n    }\r\n    renderPopup() {\r\n        let data = this.getDisplayData();\r\n        return (0, flit_1.html) `\n\t\t\t<f-popup\n\t\t\t\tclass=\"popup\"\n\t\t\t\t:refElement=\"popup\"\n\t\t\t\t.triangle=\"false\"\n\t\t\t>\n\t\t\t\t<f-list class=\"list\"\n\t\t\t\t\t:refElement=\"list\"\n\t\t\t\t\t.type=\"selection\"\n\t\t\t\t\t.selectable\n\t\t\t\t\t.data=${data}\n\t\t\t\t\t.multipleSelect=${this.multipleSelect}\n\t\t\t\t\t.selected=${this.multipleSelect ? this.value : [this.value]}\n\t\t\t\t\t.navigateFrom=${() => this.refElements.input}\n\t\t\t\t\t@@select=${this.onSelected}\n\t\t\t\t/>\n\t\t\t</f-popup>\n\t\t`;\r\n    }\r\n    renderCurrentDisplay() {\r\n        if (this.multipleSelect) {\r\n            let displays = [];\r\n            for (let { value, text } of this.data) {\r\n                if (this.value.includes(value)) {\r\n                    displays.push(text.toString());\r\n                }\r\n            }\r\n            return displays.join('; ');\r\n        }\r\n        else {\r\n            for (let { value, text } of this.data) {\r\n                if (this.value === value) {\r\n                    return text;\r\n                }\r\n            }\r\n            return '';\r\n        }\r\n    }\r\n    getDisplayData() {\r\n        var _a;\r\n        if (this.searchable && this.inputted) {\r\n            let lowerSearchWord = this.inputted.toLowerCase();\r\n            let filteredData = [];\r\n            for (let item of this.data) {\r\n                let searchText = (_a = item.searchText) !== null && _a !== void 0 ? _a : String(item.text).toLowerCase();\r\n                if (searchText.includes(lowerSearchWord)) {\r\n                    filteredData.push(item);\r\n                }\r\n            }\r\n            return filteredData;\r\n        }\r\n        else {\r\n            return this.data;\r\n        }\r\n    }\r\n    onClick() {\r\n        if (this.searchable && !this.editing) {\r\n            this.startEditing();\r\n        }\r\n    }\r\n    onSelected(selected) {\r\n        if (this.multipleSelect) {\r\n            this.value = selected;\r\n        }\r\n        else {\r\n            this.value = selected;\r\n            if (this.hideAfterSelected) {\r\n                this.hidePopup();\r\n            }\r\n        }\r\n        this.emit('change', this.value);\r\n    }\r\n    async startEditing() {\r\n        this.editing = true;\r\n        await (0, flit_1.untilRenderComplete)();\r\n        this.refElements.input.focus();\r\n    }\r\n    endEditing() {\r\n        this.editing = false;\r\n        this.inputted = '';\r\n    }\r\n    onPopupOpened() {\r\n        (0, flit_1.onRenderComplete)(() => {\r\n            this.mayFocusInput();\r\n            this.scrollToViewSelectedOption();\r\n        });\r\n    }\r\n    mayFocusInput() {\r\n        if (this.editing && this.refElements.input) {\r\n            this.refElements.input.focus();\r\n        }\r\n    }\r\n    onWillAlign() {\r\n        this.syncPopupWidth();\r\n    }\r\n    syncPopupWidth() {\r\n        if (this.refElements.popup) {\r\n            this.refElements.popup.style.minWidth = String(this.el.offsetWidth) + 'px';\r\n        }\r\n    }\r\n    scrollToViewSelectedOption() {\r\n        if (this.refElements.list) {\r\n            let selectedOption = this.refElements.list.querySelector('[class*=selected]');\r\n            if (selectedOption && (0, ff_1.getScrollDirection)(this.refElements.list) === 'y') {\r\n                (0, ff_1.scrollToTop)(selectedOption);\r\n            }\r\n        }\r\n    }\r\n    onInput() {\r\n        this.inputted = this.refElements.input.value;\r\n        this.showPopup();\r\n    }\r\n};\r\nSelect = __decorate([\r\n    (0, flit_1.define)('f-select')\r\n], Select);\r\nexports.Select = Select;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ButtonGroup = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\n/** `<f-buttongroup>` can contains several `<button>` elements as a button group. */\r\nlet ButtonGroup = class ButtonGroup extends flit_1.Component {\r\n    static style() {\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tvertical-align: top;\n\t\t}\n\n\t\tbutton{\n\t\t\t&:nth-child(n+2){\n\t\t\t\tmargin-left: -1px;\n\t\t\t\tborder-top-left-radius: 0;\n\t\t\t\tborder-bottom-left-radius: 0;\n\t\t\t}\n\t\n\t\t\t&:nth-last-child(n+2){\n\t\t\t\tborder-top-right-radius: 0;\n\t\t\t\tborder-bottom-right-radius: 0;\n\t\t\t}\n\t\n\t\t\t&[primary]{\n\t\t\t\tposition: relative;\n\t\t\t\tz-index: 1;\n\t\t\t}\n\n\t\t\t&:hover{\n\t\t\t\tposition: relative;\n\t\t\t\tz-index: 1;\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n};\r\nButtonGroup = __decorate([\r\n    (0, flit_1.define)('f-buttongroup')\r\n], ButtonGroup);\r\nexports.ButtonGroup = ButtonGroup;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Navigation = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst list_1 = require(\"./list\");\r\nconst theme_1 = require(\"../style/theme\");\r\n/** `<f-navigation>` can navigate to different pages within a navigation tree. */\r\nlet Navigation = class Navigation extends list_1.List {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Type, always be `navigation`. */\r\n        this.type = 'navigation';\r\n        /** Navigation title. */\r\n        this.title = '';\r\n    }\r\n    static style() {\r\n        let { backgroundColor, adjust, adjustFontSize } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tpadding: ${adjust(8)}px ${adjust(16)}px;\n\t\t\tborder-bottom: none;\n\t\t\tbackground: ${backgroundColor.toMiddle(9)};\n\t\t\toverflow-y: auto;\n\t\t}\n\n\t\t.title{\n\t\t\tfont-size: ${adjustFontSize(18)}px;\n\t\t\tfont-weight: 300;\n\t\t\tmargin-top: ${adjust(4)}px;\n\t\t\tmargin-bottom: ${adjust(8)}px;\n\t\t}\n\n\t\t`.extends(super.style());\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t${this.title ? (0, flit_1.html) `\n\t\t\t<div class=\"title\">\n\t\t\t\t${this.title}\n\t\t\t</div>` : ''}\n\n\t\t\t${this.renderOptions(this.data, this.treeNavigationIndices)}\n\t\t`;\r\n    }\r\n};\r\nNavigation = __decorate([\r\n    (0, flit_1.define)('f-navigation')\r\n], Navigation);\r\nexports.Navigation = Navigation;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Textarea = exports.Input = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst tooltip_1 = require(\"../bindings/tooltip\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst form_1 = require(\"./form\");\r\n/**\r\n * `<f-input>` works just like a `<input type=\"text\">`,\r\n * you can also set validator to validate it's value, or set customized error message.\r\n */\r\nlet Input = class Input extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Input type, same with `<input type=...>`. */\r\n        this.type = 'text';\r\n        /** Whether input was touched, error messages only appear after touched. */\r\n        this.touched = false;\r\n        /** Whether current input is valid, be `null` if not validated yet. */\r\n        this.valid = null;\r\n        /** Placeholder when input is empty. */\r\n        this.placeholder = '';\r\n        /** Current value. */\r\n        this.value = '';\r\n        /** To validate current value, returns an error message or `null` if passes. */\r\n        this.validator = null;\r\n        /** Custom error message. */\r\n        this.error = '';\r\n        /** Whether show error on a tooltip, so it doesn't need to leave a space for error message. */\r\n        this.errorInTooltip = false;\r\n    }\r\n    static style() {\r\n        let { adjust, adjustFontSize, errorColor, borderColor, mainColor, successColor, focusBlurRadius, fieldBackgroundColor } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t\tposition: relative;\n\t\t\twidth: ${adjust(200)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tbackground: ${fieldBackgroundColor};\n\t\t\tbox-shadow: inset 0 -1px 0 0 ${borderColor};\n\t\t}\n\n\t\tinput, textarea{\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tborder: none;\n\t\t\tbackground: none;\n\t\t\t\n\t\t\t&:focus{\n\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor.alpha(0.5)};\n\t\t\t}\n\t\t}\n\n\t\tinput{\n\t\t\theight: 100%;\n\t\t\tpadding: 0 0 0 ${adjust(8)}px;\n\t\t}\n\n\t\ttextarea{\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tpadding: ${adjust(4)}px ${adjust(8)}px;\n\t\t}\n\n\t\t.valid{\n\t\t\tbox-shadow: inset 0 -1px 0 0 ${successColor};\n\n\t\t\tinput, textarea{\n\t\t\t\tpadding-right: ${adjust(28)}px;\n\n\t\t\t\t&:focus{\n\t\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${successColor.alpha(0.5)};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.invalid{\n\t\t\tbox-shadow: inset 0 -1px 0 0 ${errorColor};\n\n\t\t\tinput, textarea{\n\t\t\t\tpadding-right: ${adjust(28)}px;\n\n\t\t\t\t&:focus{\n\t\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${errorColor.alpha(0.5)};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.valid-icon{\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\tright: 6px;\n\t\t\tcolor: ${successColor};\n\t\t}\n\n\t\t.error{\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\ttop: 100%;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tline-height: ${adjust(22)}px;\n\t\t\tcolor: ${errorColor};\n\t\t}\n\t\t`;\r\n    }\r\n    onCreated() {\r\n        this.validate();\r\n        let form = (0, flit_1.getClosestComponentOfType)(this.el, form_1.Form);\r\n        if (form) {\r\n            form.register(this);\r\n        }\r\n    }\r\n    render() {\r\n        let errorTip = this.errorInTooltip && this.error && this.touched\r\n            ? (0, tooltip_1.tooltip)(this.error, { type: 'error' })\r\n            : null;\r\n        return (0, flit_1.html) `\n\t\t\t<template\n\t\t\t\t:class.valid=${this.touched && this.valid}\n\t\t\t\t:class.invalid=${this.touched && this.valid === false}\n\t\t\t>\n\t\t\t\t<input type=${this.type}\n\t\t\t\t\t.placeholder=${this.placeholder || ''}\n\t\t\t\t\t.value=${this.value}\n\t\t\t\t\t:refElement=\"input\"\n\t\t\t\t\t${errorTip}\n\t\t\t\t\t@blur=${this.onBlur}\n\t\t\t\t\t@input=${this.onInput}\n\t\t\t\t\t@change=${this.onChange}\n\t\t\t\t/>\n\t\t\t\t${this.touched && this.valid ? (0, flit_1.html) `<f-icon class=\"valid-icon\" .type=\"checked\" />` : ''}\n\t\t\t\t${this.touched && this.error && !this.errorInTooltip ? (0, flit_1.html) `<div class=\"error\">${this.error}</div>` : ''}\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    onBlur() {\r\n        this.touched = true;\r\n        // Validate after change event is not enough.\r\n        // We clear error message after input,\r\n        // So may still not valid even though not changed.\r\n        this.validate();\r\n    }\r\n    onInput(e) {\r\n        if (e.isComposing) {\r\n            return;\r\n        }\r\n        let value = this.refElements.input.value;\r\n        if (this.validator) {\r\n            this.valid = null;\r\n            this.error = '';\r\n        }\r\n        this.emit('input', value);\r\n    }\r\n    onChange() {\r\n        let input = this.refElements.input;\r\n        let value = this.value = input.value;\r\n        this.validate();\r\n        this.emit('change', value, this.valid);\r\n    }\r\n    validate() {\r\n        if (this.validator) {\r\n            this.error = this.validator(this.value);\r\n            this.valid = !this.error;\r\n        }\r\n    }\r\n    /** Set `touched` property. */\r\n    setTouched(touched) {\r\n        this.touched = touched;\r\n    }\r\n};\r\nInput = __decorate([\r\n    (0, flit_1.define)('f-input')\r\n], Input);\r\nexports.Input = Input;\r\n/**\r\n * `<f-textarea>` works just like a `<textarea>`,\r\n * you can also set validator to validate it's value, or set customized error message.\r\n */\r\nlet Textarea = class Textarea extends Input {\r\n    static style() {\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\theight: auto;\n\t\t}\n\t\t`.extends(super.style());\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<textarea\n\t\t\t\tplaceholder=${this.placeholder}\n\t\t\t\t.value=${this.value}\n\t\t\t\t:refElement=\"input\"\n\t\t\t\t:class.valid=${this.touched && this.valid === true}\n\t\t\t\t:class.invalid=${this.touched && this.valid === false}\n\t\t\t\t@focus=${this.onBlur}\n\t\t\t\t@input=${this.onInput}\n\t\t\t\t@change=${this.onChange}\n\t\t\t/>\n\t\t`;\r\n    }\r\n};\r\nTextarea = __decorate([\r\n    (0, flit_1.define)('f-textarea')\r\n], Textarea);\r\nexports.Textarea = Textarea;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Search = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\n/**\r\n * `<f-search>` can be inputted text to do searching.\r\n * Now only a input, will extend to list suggestted local or remote data in future.\r\n */\r\nlet Search = class Search extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Whether search input get focus. */\r\n        this.focused = false;\r\n        /** When in composition inputting. */\r\n        this.inCompositionInputting = false;\r\n        /**\r\n         * Whether update value after change event.\r\n         * If is `false`, update value after input event.\r\n         */\r\n        this.lazy = true;\r\n        /** Search input placeholder. */\r\n        this.placeholder = '';\r\n        /** Current inputted value. */\r\n        this.value = '';\r\n    }\r\n    static style() {\r\n        let { adjust, borderColor, borderRadius, mainColor, focusBlurRadius, lineHeight, fieldBackgroundColor } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t\tposition: relative;\n\t\t}\n\n\t\tinput{\n\t\t\twidth: 100%;\n\t\t\tborder: none;\n\t\t\tbackground: ${fieldBackgroundColor};\n\t\t\theight: ${adjust(28)}px;\n\t\t\tpadding: 0 ${adjust(lineHeight - 2)}px 0 ${adjust(lineHeight - 2)}px;\n\t\t\tline-height: ${lineHeight - 2}px;\n\t\t\tborder: 1px solid ${borderColor};\n\t\t\tborder-radius: ${borderRadius}px;\n\t\t\t\n\t\t\t&:focus{\n\t\t\t\tborder-color: ${mainColor};\n\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor.alpha(0.5)};\n\t\t\t}\n\t\t}\n\n\t\t.search-icon{\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\tleft: ${adjust(8)}px;\n\t\t\tcolor: ${borderColor.toMiddle(10)};\n\t\t}\n\n\t\t.clear{\n\t\t\tdisplay: flex;\n\t\t\tposition: absolute;\n\t\t\twidth: ${adjust(28)}px;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\tright: 0px;\n\t\t\tcolor: ${borderColor.toMiddle(10)};\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover{\n\t\t\t\tcolor: ${mainColor};\n\t\t\t}\n\n\t\t\t&:active{\n\t\t\t\ttransform: translateY(1px);\n\t\t\t}\n\t\t}\n\n\t\t.close-icon{\n\t\t\tmargin: auto;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<f-icon class=\"search-icon\" .type=\"search\" />\n\n\t\t\t<input type=\"text\"\n\t\t\t\tplaceholder=${this.placeholder}\n\t\t\t\t.value=${this.value}\n\t\t\t\t:refElement=\"input\"\n\t\t\t\t@focus=${this.onFocus}\n\t\t\t/>\n\n\t\t\t${this.value\r\n            ? (0, flit_1.html) `\n\t\t\t\t\t<div class=\"clear\" @click.stop=${this.clear}>\n\t\t\t\t\t\t<f-icon class=\"close-icon\" .type=\"close\" />\n\t\t\t\t\t</div>`\r\n            : ''}\n\t\t`;\r\n    }\r\n    onReady() {\r\n        if (this.lazy) {\r\n            (0, flit_1.on)(this.refElements.input, 'change', this.onChange, this);\r\n        }\r\n        else {\r\n            (0, flit_1.on)(this.refElements.input, 'compositionstart', this.onCompositionStart, this);\r\n            (0, flit_1.on)(this.refElements.input, 'compositionend', this.onCompositionEnd, this);\r\n            (0, flit_1.on)(this.refElements.input, 'input', this.onInput, this);\r\n        }\r\n    }\r\n    onFocus() {\r\n        this.focused = true;\r\n        (0, flit_1.once)(this.refElements.input, 'blur', () => this.focused = false);\r\n    }\r\n    onChange() {\r\n        this.updateValue();\r\n    }\r\n    onCompositionStart() {\r\n        this.inCompositionInputting = true;\r\n    }\r\n    onCompositionEnd() {\r\n        this.inCompositionInputting = false;\r\n        this.onInput();\r\n    }\r\n    onInput() {\r\n        this.updateValue();\r\n    }\r\n    updateValue() {\r\n        if (this.inCompositionInputting) {\r\n            return;\r\n        }\r\n        this.value = this.refElements.input.value;\r\n        this.emit('change', this.value);\r\n    }\r\n    clear() {\r\n        this.value = '';\r\n        this.emit('change', '');\r\n    }\r\n};\r\nSearch = __decorate([\r\n    (0, flit_1.define)('f-search')\r\n], Search);\r\nexports.Search = Search;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Switch = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\n/** `<f-switch>` work just like `<f-checkbox>` but easier to interact with. */\r\nlet Switch = class Switch extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Whether the switch is in on state. */\r\n        this.value = false;\r\n    }\r\n    static style() {\r\n        let { mainColor, adjust, focusBlurRadius, backgroundColor } = theme_1.theme;\r\n        let h = adjust(18);\r\n        let w = h * 2 - 8;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t\twidth: ${w}px;\n\t\t\theight: ${h}px;\n\t\t\tbackground: ${backgroundColor.toMiddle(23.3)};\n\t\t\tborder-radius: ${h / 2}px;\n\t\t\tpadding: 1px;\n\t\t\tmargin: ${(adjust(28) - h) / 2}px 0;\n\t\t\ttransition: background-color 0.2s ${(0, flit_1.getCSSEasingValue)('ease-out-cubic')};\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover{\n\t\t\t\tbackground: ${backgroundColor.toMiddle(33)};\n\t\t\t}\n\t\t\t\n\t\t\t&:focus{\n\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor};\n\t\t\t}\n\t\t}\n\t\n\t\t.ball{\n\t\t\twidth: ${h - 2}px;\n\t\t\theight: ${h - 2}px;\n\t\t\tbackground: ${backgroundColor};\n\t\t\tborder-radius: 50%;\n\t\t\ttransition: margin 0.2s ${(0, flit_1.getCSSEasingValue)('ease-out-cubic')};\n\t\t}\n\t\n\t\t.on{\t\t\n\t\t\tbackground: ${mainColor};\n\n\t\t\t.ball{\n\t\t\t\tborder-color: ${backgroundColor};\n\t\t\t\tmargin-left: calc(100% - ${h - 2}px);\n\t\t\t}\n\n\t\t\t&:hover{\n\t\t\t\tbackground: ${mainColor.darken(10)};\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<template\n\t\t\t\ttabindex=\"0\"\n\t\t\t\t:class.on=${this.value}\n\t\t\t\t@click=${this.onClick}\n\t\t\t\t@focus=${this.onFocus}\n\t\t\t\t@blur=${this.onBlur}\n\t\t\t>\n\t\t\t\t<div class=\"ball\"></div>\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    onClick() {\r\n        this.toggleState();\r\n    }\r\n    toggleState() {\r\n        this.value = !this.value;\r\n        this.emit('change', this.value);\r\n    }\r\n    onFocus() {\r\n        (0, flit_1.on)(document, 'keydown', this.onKeyDown, this);\r\n    }\r\n    onKeyDown(e) {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            this.toggleState();\r\n        }\r\n        else if (e.key === 'ArrowLeft') {\r\n            if (this.value) {\r\n                e.preventDefault();\r\n                this.toggleState();\r\n            }\r\n        }\r\n        else if (e.key === 'ArrowRight') {\r\n            if (!this.value) {\r\n                e.preventDefault();\r\n                this.toggleState();\r\n            }\r\n        }\r\n    }\r\n    onBlur() {\r\n        (0, flit_1.off)(document, 'keydown', this.onKeyDown, this);\r\n    }\r\n};\r\nSwitch = __decorate([\r\n    (0, flit_1.define)('f-switch')\r\n], Switch);\r\nexports.Switch = Switch;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Checkbox = exports.CheckboxGroup = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\n/** `<f-checkboxgroup>` can contains several `<f-checkbox>` as child. */\r\nlet CheckboxGroup = class CheckboxGroup extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** All child `<f-checkbox>`. */\r\n        this.checkboxs = [];\r\n        /** All values of checked child checkboxs. */\r\n        this.value = [];\r\n    }\r\n    /** Retister a child checkbox. */\r\n    register(checkbox) {\r\n        this.checkboxs.push(checkbox);\r\n        checkbox.on('change', this.onCheckboxChange.bind(this, checkbox));\r\n    }\r\n    onCheckboxChange(checkbox) {\r\n        if (checkbox.checked) {\r\n            (0, ff_1.add)(this.value, checkbox.value);\r\n        }\r\n        else {\r\n            (0, ff_1.removeWhere)(this.value, value => value == checkbox.value);\r\n        }\r\n        this.emit('change', this.value);\r\n    }\r\n};\r\nCheckboxGroup = __decorate([\r\n    (0, flit_1.define)('f-checkboxgroup')\r\n], CheckboxGroup);\r\nexports.CheckboxGroup = CheckboxGroup;\r\n/** `<f-checkbox>` just like `<input type=checkbox>`, you can click to check or uncheck one checkbox in a checkbox group. */\r\nlet Checkbox = class Checkbox extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.checkboxGroup = null;\r\n        /** Whether the checkbox was checked. */\r\n        this.checked = false;\r\n        /** Whether the checkbox in indeterminate state, than means, not determined checked or unchecked. */\r\n        this.indeterminate = false;\r\n        /** If having a parent `<f-checkboxgroup>`, the `value` property will be assign to it after current checkbox checked. */\r\n        this.value = null;\r\n    }\r\n    static style() {\r\n        let { mainColor, focusBlurRadius, adjust } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tvertical-align: top;\n\t\t\talign-items: center;\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover{\n\t\t\t\tcolor: ${mainColor};\n\t\t\t}\n\n\t\t\t&:focus{\n\t\t\t\tcolor: ${mainColor};\n\n\t\t\t\t.icon{\n\t\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.icon{\n\t\t\tposition: relative;\n\t\t\ttop: -2px;\n\t\t\tmargin-right: ${adjust(7)}px;\n\t\t\tborder-radius: 4px;\n\t\t}\n\n\t\t.indeterminate, .checked{\n\t\t\tcolor: ${mainColor};\n\t\t}\n\n\t\t.label{\n\t\t\tflex: 1;\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t\t`;\r\n    }\r\n    onCreated() {\r\n        let group = (0, flit_1.getClosestComponentOfType)(this.el, CheckboxGroup);\r\n        if (group) {\r\n            this.checkboxGroup = group;\r\n            this.checked = this.checkboxGroup.value.includes(this.value);\r\n            this.checkboxGroup.register(this);\r\n        }\r\n    }\r\n    render() {\r\n        let iconType = this.checked ? 'checkbox-checked' : this.indeterminate ? 'checkbox-indeterminate' : 'checkbox-unchecked';\r\n        return (0, flit_1.html) `\n\t\t\t<template\n\t\t\t\ttabindex=\"0\"\n\t\t\t\t:class.checked=${this.checked}\n\t\t\t\t:class.indeterminate=${this.indeterminate}\n\t\t\t\t@click=${this.onClick}\n\t\t\t\t@focus=${this.onFocus}\n\t\t\t\t@blur=${this.onBlur}\n\t\t\t>\n\t\t\t\t<f-icon class=\"icon\" .type=${iconType} />\n\t\t\t\t<div class=\"label\">\n\t\t\t\t\t<slot />\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    onClick() {\r\n        this.toggleChecked();\r\n    }\r\n    toggleChecked() {\r\n        this.checked = !this.checked;\r\n        this.indeterminate = false;\r\n        this.emit('change', this.checked);\r\n    }\r\n    onFocus() {\r\n        (0, flit_1.on)(document, 'keydown.enter', this.onEnter, this);\r\n    }\r\n    onEnter(e) {\r\n        e.preventDefault();\r\n        this.toggleChecked();\r\n    }\r\n    onBlur() {\r\n        (0, flit_1.off)(document, 'keydown', this.onEnter, this);\r\n    }\r\n};\r\nCheckbox = __decorate([\r\n    (0, flit_1.define)('f-checkbox')\r\n], Checkbox);\r\nexports.Checkbox = Checkbox;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.notification = exports.UniqueNotification = exports.QuickNotification = exports.Notification = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst element_1 = require(\"../utils/element\");\r\n/** `<f-notification>` helps to show a notification list to notify some info. */\r\nlet Notification = class Notification extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.seed = 1;\r\n        this.items = [];\r\n        /** Where to append notification list. */\r\n        this.appendTo = 'body';\r\n    }\r\n    static style() {\r\n        let { infoColor, adjust, successColor, errorColor, warningColor, popupBorderRadius, popupShadowBlurRadius, adjustFontSize, backgroundColor, textColor, popupShadowColor } = theme_1.theme;\r\n        let types = [\r\n            ['info', infoColor],\r\n            ['warning', warningColor],\r\n            ['error', errorColor],\r\n            ['success', successColor]\r\n        ];\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tposition: fixed;\n\t\t\tright: ${adjust(12)}px;\n\t\t\tbottom: ${adjust(12)}px;\n\t\t\tmin-width: ${adjust(280)}px;\n\t\t\tmax-width: ${adjust(480)}px;\n\t\t\tz-index: 1100;\t// Higher than tooltip, dialog, ...\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t}\n\n\t\t.item{\n\t\t\tposition: relative;\n\t\t\tdisplay: flex;\n\t\t\tmargin-top: ${adjust(12)}px;\n\t\t\tbackground: ${backgroundColor};\n\t\t\tbox-shadow: 0 0 ${popupShadowBlurRadius}px ${popupShadowColor};\n\t\t\tcursor: pointer;\n\t\t\toverflow: hidden;\n\t\t\tborder-radius: ${popupBorderRadius}px;\n\t\t}\n\n\t\t.stripe{\n\t\t\twidth: 4px;\n\t\t}\n\n\t\t.left{\n\t\t\tpadding: ${adjust(16)}px ${adjust(14)}px ${adjust(16)}px ${adjust(16)}px;\n\t\t}\n\n\t\t.type-icon{\n\t\t\tdisplay: block;\n\t\t\twidth: ${adjust(20)}px;\n\t\t\theight: ${adjust(20)}px;\n\n\t\t\tsvg{\n\t\t\t\twidth: ${adjust(20)}px;\n\t\t\t\theight: ${adjust(20)}px;\n\t\t\t}\n\t\t}\n\n\t\t.content{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tpadding: ${adjust(16)}px ${adjust(16)}px ${adjust(8)}px 0;\n\t\t}\n\n\t\t.close{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(28)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tcolor: ${textColor};\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\n\t\t\t&:hover{\n\t\t\t\tcolor: ${textColor.toMiddle(10)};\n\t\t\t}\n\n\t\t\t&:active{\n\t\t\t\ttransform: translateY(1px);\n\t\t\t}\n\t\t}\n\n\t\t.title{\n\t\t\tfont-weight: bold;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tmargin-bottom: ${adjust(4)}px;\n\t\t}\n\n\t\t.message{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tmargin-bottom: ${adjust(4)}px;\n\t\t\ttext-align: left;\n\t\t\tword-wrap: break-word;\n\n\t\t\ta{\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\t\t}\n\n\t\t.list{\n\t\t\tmargin: ${adjust(8)}px 0;\n\t\t\tline-height: ${adjust(20)}px;\n\t\t\tlist-style-type: square;\n\t\t\tpadding-left: ${adjust(28)}px;\n\t\t}\n\n\t\t.actions{\n\t\t\tmargin-top: ${adjust(8)}px;\n\t\t}\n\n\t\t.action{\n\t\t\tmargin-right: ${adjust(6)}px;\n\t\t\theight: ${adjust(22)}px;\n\t\t\tline-height: ${20}px;\n\t\t\tpadding: 0 ${adjust(8)}px;\n\t\t}\n\n\t\t${types.map(([type, color]) => (0, flit_1.css) `\n\t\t\t.type-${type}{\n\t\t\t\t&:hover{\n\t\t\t\t\tbackground: ${color.mix(backgroundColor, 95)};\n\t\t\t\t}\n\n\t\t\t\t.stripe{\n\t\t\t\t\tbackground: ${color};\n\t\t\t\t}\n\t\t\t}\n\t\t`)}\n\t\t`;\r\n    }\r\n    render() {\r\n        return (0, flit_1.repeat)(this.items, (item) => (0, flit_1.html) `<div class=\"item\"\n\t\t\t\t:class=\"type-${item.type}\"\n\t\t\t\t@mouseenter=${() => this.onMouseEnter(item)}\n\t\t\t\t@mouseleave=${() => this.onMouseLeave(item)}\n\t\t\t>\n\t\t\t\t<div class=\"stripe\" />\n\n\t\t\t\t<div class=\"left\">\n\t\t\t\t\t<f-icon class=\"type-icon\" .type=${item.type} />\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"content\">\n\t\t\t\t\t${item.title ? (0, flit_1.html) `<div class=\"title\">${item.title}</div>` : ''}\n\n\t\t\t\t\t<div class=\"message\">${item.message}</div>\n\t\t\t\t\t\n\t\t\t\t\t${item.list && item.list.length > 0 ? (0, flit_1.html) `\n\t\t\t\t\t\t<ul class=\"list\">\n\t\t\t\t\t\t\t${item.list.map(text => (0, flit_1.html) `<li>${text}</li>`)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t` : ''}\n\n\t\t\t\t\t${this.renderActions(item)}\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"close\" @click=${() => this.onClickClose(item)}>\n\t\t\t\t\t<f-icon .type=\"close\" />\n\t\t\t\t</div>\n\t\t\t</div>`, { name: 'fade', enterAtStart: true, onend: this.onTransitionEnd });\r\n    }\r\n    renderActions(item) {\r\n        let actions = item.actions;\r\n        if (actions && actions.length > 0) {\r\n            let results = actions.map(action => (0, flit_1.html) `\n\t\t\t\t<button class=\"action\"\n\t\t\t\t\t?primary=${action.primary}\n\t\t\t\t\t@click=${() => this.onClickActionButton(action, item)}>\n\t\t\t\t\t${action.text}\n\t\t\t\t</button>\n\t\t\t`);\r\n            return (0, flit_1.html) `<div class=\"actions\">${results}</div>`;\r\n        }\r\n        return '';\r\n    }\r\n    onClickActionButton(action, item) {\r\n        if (action.handler) {\r\n            action.handler();\r\n        }\r\n        this.hide(item.id);\r\n    }\r\n    onMouseEnter(item) {\r\n        item.hover = true;\r\n    }\r\n    onMouseLeave(item) {\r\n        item.hover = false;\r\n        if (!item.timeout) {\r\n            this.hideLater(item);\r\n        }\r\n    }\r\n    onClickClose(item) {\r\n        this.hide(item.id);\r\n    }\r\n    onTransitionEnd(type) {\r\n        if (type === 'leave' && this.items.length === 0) {\r\n            this.el.remove();\r\n        }\r\n    }\r\n    /** Shows a notification and returns it's list. */\r\n    show(options) {\r\n        if (options.id) {\r\n            let item = this.items.find(v => v.id === options.id);\r\n            if (item) {\r\n                Object.assign(item, options);\r\n                this.hideLater(item);\r\n                return options.id;\r\n            }\r\n        }\r\n        let item = {\r\n            id: this.seed++,\r\n            ...options,\r\n            hover: false,\r\n            timeout: null,\r\n        };\r\n        this.items.unshift(item);\r\n        this.hideLater(item);\r\n        if (this.items.length === 1 && this.appendTo) {\r\n            (0, element_1.appendTo)(this.el, this.appendTo);\r\n        }\r\n        return item.id;\r\n    }\r\n    hideLater(item) {\r\n        if (item.timeout) {\r\n            item.timeout.cancel();\r\n        }\r\n        item.timeout = new ff_1.Timeout(() => {\r\n            item.timeout = null;\r\n            if (!item.hover) {\r\n                this.hide(item.id);\r\n            }\r\n        }, item.hideDelay || 5000);\r\n    }\r\n    /** Hide notification by it's id. */\r\n    hide(id) {\r\n        let item = this.items.find(v => v.id === id);\r\n        if (item) {\r\n            (0, ff_1.remove)(this.items, item);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /** Hide all notifications. */\r\n    hideAll() {\r\n        this.items = [];\r\n        if (this.items.length === 0) {\r\n            this.el.remove();\r\n        }\r\n    }\r\n};\r\nNotification = __decorate([\r\n    (0, flit_1.define)('f-notification')\r\n], Notification);\r\nexports.Notification = Notification;\r\n/** Class to manage a notification list. */\r\nclass QuickNotification {\r\n    constructor() {\r\n        this.noti = null;\r\n    }\r\n    /** Returns a unique notification instance, all notification calls will share a unique notification item. */\r\n    unique() {\r\n        return new UniqueNotification(this);\r\n    }\r\n    showNotification(options) {\r\n        if (!this.noti) {\r\n            this.noti = (0, flit_1.getRenderedAsComponent)((0, flit_1.render)((0, flit_1.html) `<f-notification />`));\r\n        }\r\n        return this.noti.show(options);\r\n    }\r\n    /** Shows info type notification, returns it's id. */\r\n    info(message, options = {}) {\r\n        options.type = 'info';\r\n        options.message = message;\r\n        return this.showNotification(options);\r\n    }\r\n    /** Shows warn type notification, returns it's id. */\r\n    warn(message, options = {}) {\r\n        options.type = 'warning';\r\n        options.message = message;\r\n        return this.showNotification(options);\r\n    }\r\n    /** Shows error type notification, returns it's id. */\r\n    error(message, options = {}) {\r\n        options.type = 'error';\r\n        options.message = message;\r\n        return this.showNotification(options);\r\n    }\r\n    /** Shows success type notification, returns it's id. */\r\n    success(message, options = {}) {\r\n        options.type = 'success';\r\n        options.message = message;\r\n        return this.showNotification(options);\r\n    }\r\n    /** Hide notification by it's id. */\r\n    hide(id) {\r\n        return this.noti.hide(id);\r\n    }\r\n    /** Hide all notifications. */\r\n    hideAll() {\r\n        this.noti.hideAll();\r\n    }\r\n}\r\nexports.QuickNotification = QuickNotification;\r\n/** All notification calls will share a unique notification item. */\r\nclass UniqueNotification {\r\n    constructor(raw) {\r\n        this.id = null;\r\n        this.raw = raw;\r\n    }\r\n    overwriteNotificationId(options) {\r\n        if (this.id) {\r\n            options.id = this.id;\r\n        }\r\n    }\r\n    /** Shows info type notification, returns it's id. */\r\n    info(message, options = {}) {\r\n        this.overwriteNotificationId(options);\r\n        return this.id = this.raw.info(message, options);\r\n    }\r\n    /** Shows warn type notification, returns it's id. */\r\n    warn(message, options = {}) {\r\n        this.overwriteNotificationId(options);\r\n        return this.id = this.raw.warn(message, options);\r\n    }\r\n    /** Shows error type notification, returns it's id. */\r\n    error(message, options = {}) {\r\n        this.overwriteNotificationId(options);\r\n        return this.id = this.raw.error(message, options);\r\n    }\r\n    /** Shows success type notification, returns it's id. */\r\n    success(message, options = {}) {\r\n        this.overwriteNotificationId(options);\r\n        return this.id = this.raw.success(message, options);\r\n    }\r\n    /** Hide current notification. */\r\n    hide() {\r\n        if (this.id) {\r\n            return this.raw.hide(this.id);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nexports.UniqueNotification = UniqueNotification;\r\n/** A quick global API to show notifications. */\r\nexports.notification = new QuickNotification();\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Progress = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst tooltip_1 = require(\"../bindings/tooltip\");\r\n/** `<f-progress>` gives a progress notification in percentage, just like `<input type=progress>`. */\r\nlet Progress = class Progress extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Progress value betweens 0~1.\r\n         * Defult value is `0`.\r\n         */\r\n        this.value = 0;\r\n        /**\r\n         * Fixed decimal count of progress text.\r\n         * Defult value is `null`.\r\n         */\r\n        this.decimalCount = null;\r\n    }\r\n    static style() {\r\n        let { mainColor, adjust, adjustFontSize } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t\tposition: relative;\n\t\t\twidth: ${adjust(200)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t}\n\n\t\t.groove{\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\theight: 1px;\n\t\t\tmargin: auto 0;\n\t\t\tbackground: ${mainColor.alpha(0.2)};\n\t\t}\n\n\t\t.progress{\n\t\t\theight: 100%;\n\t\t\tbackground: ${mainColor};\n\t\t}\n\n\t\t.tooltip{\n\t\t\tfont-family: consolas;\n\t\t\tfont-size: ${adjustFontSize(14)}px;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        let tip = (0, tooltip_1.tooltip)(this.renderTooltipValue(), {\r\n            alignTo: () => this.refElements.progress,\r\n            alignPosition: 'bc-tr',\r\n            alignMargin: [8, 0],\r\n        });\r\n        return (0, flit_1.html) `\n\t\t\t<template ${tip}>\n\t\t\t\t<div class=\"groove\">\n\t\t\t\t\t<div class=\"progress\" :refElement=\"progress\" :style.width.percent=${Math.min(this.value, 1) * 100}></div>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    renderTooltipValue() {\r\n        let tipValue = (Math.min(this.value, 1) * 100);\r\n        let tipText = tipValue.toString();\r\n        if (this.decimalCount !== null) {\r\n            tipText = tipValue.toFixed(this.decimalCount);\r\n        }\r\n        tipText += '%';\r\n        return (0, flit_1.html) `<span class=\"${this.scopeClassName('tooltip')}\">${tipText}</span>`;\r\n    }\r\n};\r\nProgress = __decorate([\r\n    (0, flit_1.define)('f-progress')\r\n], Progress);\r\nexports.Progress = Progress;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.tooltip = exports.TooltipBinding = void 0;\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst popup_1 = require(\"./popup\");\r\nconst defaultTooltipOptions = {\r\n    alignPosition: 'r',\r\n    alignMargin: 3,\r\n    showDelay: 0,\r\n    hideDelay: 200,\r\n    triangle: true,\r\n    fixTriangle: false,\r\n    type: 'default',\r\n    pointerable: false,\r\n};\r\n/**\r\n * A `:tooltip` binding can help to show a short text message beside it's trigger element.\r\n *\r\n * `:tooltip=\"message\"`\r\n * `:tooltip=${message}`\r\n */\r\nclass TooltipBinding extends popup_1.PopupBinding {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.title = '';\r\n    }\r\n    update(title, options = {}) {\r\n        this.title = title;\r\n        super.update(this.getRenderFn.bind(this), this.getPopupOptions(options));\r\n    }\r\n    getRenderFn() {\r\n        return (0, flit_1.html) `\n\t\t\t<f-tooltip\n\t\t\t\t.herizontal=${this.isHerizontal()}\n\t\t\t\t.type=${this.getOption('type')}\n\t\t\t>\n\t\t\t\t${this.title}\n\t\t\t</f-tooltip>\n\t\t`;\r\n    }\r\n    getPopupOptions(options = {}) {\r\n        return {\r\n            ...defaultTooltipOptions,\r\n            key: 'tooltip',\r\n            ...options,\r\n        };\r\n    }\r\n    isHerizontal() {\r\n        let direction = (0, ff_1.getMainAlignDirection)(this.options.get('alignPosition'));\r\n        return direction === 'l' || direction === 'r';\r\n    }\r\n    showPopupLater() {\r\n        // Not popup if no `title` specified.\r\n        if (!this.title) {\r\n            return;\r\n        }\r\n        super.showPopupLater();\r\n    }\r\n    bindEnterEvents() {\r\n        if (this.shouldKeepVisible()) {\r\n            // If not wait window loaded, page scrolling position may be not determinated yet.\r\n            // So element may be aligned to a wrong position.\r\n            (0, ff_1.ensureWindowLoaded)().then(() => {\r\n                this.showPopupLater();\r\n            });\r\n        }\r\n        else {\r\n            super.bindEnterEvents();\r\n        }\r\n    }\r\n    shouldKeepVisible() {\r\n        return super.shouldKeepVisible()\r\n            || ['prompt', 'error'].includes(this.getOption('type'));\r\n    }\r\n    /** After trigger element position changed. */\r\n    onTriggerRectChanged() {\r\n        if (this.shouldKeepVisible() || (0, ff_1.isVisibleInViewport)(this.el, 0.1, this.popup.el)) {\r\n            if (this.popup) {\r\n                this.alignPopup();\r\n            }\r\n        }\r\n        else {\r\n            this.hidePopupLater();\r\n        }\r\n    }\r\n    getAlignOptions() {\r\n        let triangle = this.popup.refElements.triangle;\r\n        return {\r\n            margin: this.getOption('alignMargin'),\r\n            stickToEdges: false,\r\n            canShrinkInY: true,\r\n            triangle,\r\n            fixTriangle: this.getOption('fixTriangle'),\r\n        };\r\n    }\r\n}\r\nexports.TooltipBinding = TooltipBinding;\r\n/**\r\n * tooltip binding can help to show a short text message.\r\n *\r\n * `tooltip(title, {alignPosition, alignMargin, ...})`\r\n */\r\nexports.tooltip = (0, flit_1.defineBinding)('tooltip', TooltipBinding);\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Table = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst column_width_resizer_1 = require(\"./helpers/column-width-resizer\");\r\nconst remote_store_1 = require(\"../store/remote-store\");\r\nconst table_state_1 = require(\"./helpers/table-state\");\r\n/**\r\n * `<f-table>` works just like a `<table>`, it provides data view and per row or per column operation.\r\n * `store` provides data service and also data filtering and data ordering.\r\n * `columns` can config data column mode for table view.\r\n */\r\nlet Table = class Table extends flit_1.Component {\r\n    constructor(el) {\r\n        super(el);\r\n        /**\r\n         * If `true`, will only render the rows that in viewport.\r\n         * Default value is `false`.\r\n         * Implies to be `true` when uses `RemoteStore`.\r\n         */\r\n        this.live = false;\r\n        /**\r\n         * Item count in one page that should be rendered each time.\r\n         * Works only when `live` is `true`.\r\n         * Default value is `50`, set it smaller if don't need to render so much.\r\n         * Suggested to be large enough to cover table height, but not covers more than 2x of table height.\r\n         * Otherwise it should provide more than 120px scrolling buffer height more than table height.\r\n         */\r\n        this.renderCount = 50;\r\n        /** If what you are rendering is very complex and can't complete in one animation frame, set this to `true`. */\r\n        this.preRendering = false;\r\n        /**\r\n         * Whether each column is resizeable.\r\n         * Default value is `false`.\r\n         */\r\n        this.resizable = false;\r\n        /** Minimum column width in pixels. */\r\n        this.minColumnWidth = 64;\r\n        /** Transition for each row after created or removed. */\r\n        this.transition = undefined;\r\n        /** Column name to indicate which column is in order. */\r\n        this.orderName = null;\r\n        /** Current column order direction. */\r\n        this.orderDirection = '';\r\n        /** Resize column widths when `resizable` is `true`. */\r\n        this.resizer = null;\r\n        /** Whether set a first visible index and not applied yet. */\r\n        this.firstVisibleIndexSpecified = false;\r\n        this.stateCacher = new table_state_1.TableStateCacher(this);\r\n    }\r\n    static style() {\r\n        let { adjustFontSize, adjust, mainColor, textColor, backgroundColor } = theme_1.theme;\r\n        let scrollbarWidth = (0, ff_1.getScrollbarWidth)();\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\theight: 200px;\n\t\t}\n\n\t\t.head{\n\t\t\tpadding-right: ${scrollbarWidth}px;\t// Same with defined scrollbar width.\n\t\t\tcolor: ${textColor.toMiddle(20)};\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tfont-weight: bold;\n\t\t\tuser-select: none;\n\t\t}\n\n\t\t.columns{\n\t\t\tdisplay: flex;\n\t\t\theight: 100%;\n\t\t}\n\n\t\t.column{\n\t\t\tposition: relative;\n\t\t\tdisplay: flex;\n\t\t\talign-items: stretch;\n\t\t\tpadding: 0 ${adjust(8)}px;\n\t\t\tborder-bottom: 1px solid ${backgroundColor.toMiddle(20)};\n\n\t\t\t&:last-child{\n\t\t\t\tflex: 1;\n\t\t\t\tmin-width: 0;\n\t\t\t\tpadding-right: ${scrollbarWidth}px;\n\t\t\t\tmargin-right: -${scrollbarWidth}px;\n\t\t\t}\n\t\t}\n\n\t\t.column-left{\n\t\t\tdisplay: flex;\n\t\t\tflex: 1;\n\t\t\tmax-width: 100%;\n\n\t\t\t&:hover .order{\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t}\n\n\t\t.column-title{\n\t\t\tflex: 0 1 auto;\n\t\t\tmin-width: 0;\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\n\t\t.column-ordered{\n\t\t\tborder-bottom-color: #888;\n\t\t}\n\n\t\t.resizable .column-title{\n\t\t\tflex: 1;\n\t\t}\n\n\t\t.order{\n\t\t\twidth: ${adjust(16)}px;\n\t\t\tflex: none;\n\t\t\tmargin-right: ${adjust(-8)}px;\t// Gives 16 - 8 = 8px as cell padding-right.\n\t\t\tdisplay: none;\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\n\t\t\t&.current{\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t}\n\n\t\t.resizer{\n\t\t\tposition: relative;\n\t\t\tz-index: 1;\n\t\t\twidth: 17px;\n\t\t\tmargin-left: auto;\n\t\t\tmargin-right: ${adjust(-17)}px;\n\t\t\tcursor: e-resize;\n\n\t\t\t&::before{\n\t\t\t\tcontent: '';\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 8px;\n\t\t\t\ttop: 6px;\n\t\t\t\tbottom: 6px;\n\t\t\t\twidth: 1px;\n\t\t\t\tbackground: ${backgroundColor.toMiddle(20)};\n\t\t\t}\n\t\t}\n\n\t\t.scroller{\n\t\t\tflex: 1;\n\t\t\toverflow-y: scroll;\n\t\t\toverflow-x: hidden;\n\t\t}\n\n\t\t.body{\n\t\t\tflex: 1;\n\t\t\toverflow-y: scroll;\n\t\t\toverflow-x: hidden;\n\t\t\tposition: relative;\n\t\t\tborder-bottom: 1px solid ${backgroundColor.toMiddle(13)};\n\t\t}\n\n\t\t.table{\n\t\t\ttable-layout: fixed;\n\t\t\tposition: absolute;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\ttr{\n\t\t\t&:hover{\n\t\t\t\tbackground: ${mainColor.alpha(0.05)};\n\t\t\t}\n\n\t\t\t&.selected{\n\t\t\t\tbackground: ${mainColor.alpha(0.1)};\n\t\t\t}\n\n\t\t\t&:last-child td{\n\t\t\t\tborder-bottom-color: transparent;\n\t\t\t}\n\t\t}\n\n\t\ttd{\n\t\t\tvertical-align: middle;\n\t\t\tpadding: ${adjust(3)}px ${adjust(8)}px;\n\t\t\tborder-bottom: 1px solid ${backgroundColor.toMiddle(13)};\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t\tcursor: default;\n\t\t}\n\n\t\tf-checkbox{\n\t\t\tmax-width: 100%;\n\t\t\theight: 100%;\n\n\t\t\tf-icon{\n\t\t\t\tmargin-right: ${adjust(10)}px;\n\t\t\t}\n\t\t}\n\n\t\t.resizing-mask{\n\t\t\tposition: fixed;\n\t\t\tz-index: 9999;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\tcursor: ew-resize;\n\t\t}\n\t\t`;\r\n    }\r\n    /** If specified, it's returned result will be used to overwrite `column`. */\r\n    getColumns() {\r\n        return null;\r\n    }\r\n    onCreated() {\r\n        this.store.on('dataChange', this.onStoreDataChange, this);\r\n        this.watchImmediately(() => this.getColumns(), columns => {\r\n            if (columns) {\r\n                this.columns = columns;\r\n            }\r\n        });\r\n    }\r\n    onStoreDataChange() {\r\n        if (this.repeatDir instanceof flit_1.LiveAsyncRepeatDirective) {\r\n            this.repeatDir.reload();\r\n        }\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<div class=\"head\" :refElement=\"head\">\n\t\t\t\t<div class=\"columns\" :refElement=\"columnContainer\">\n\t\t\t\t\t${this.renderColumns()}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"body\">\n\t\t\t\t<table class=\"table\" :refElement=\"table\">\n\t\t\t\t\t<colgroup :refElement=\"colgroup\">\n\t\t\t\t\t\t${this.columns.map(column => (0, flit_1.html) `\n\t\t\t\t\t\t\t<col :style.text-align=${column.align || ''} />\n\t\t\t\t\t\t`)}\n\t\t\t\t\t</colgroup>\n\t\t\t\t\t${this.renderRows()}\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t`;\r\n    }\r\n    renderColumns() {\r\n        return this.columns.map((column, index) => {\r\n            let orderName = column.name;\r\n            let isOrdered = this.orderName === orderName;\r\n            let flexAlign = column.align === 'right' ? 'flex-end' : column.align === 'center' ? 'center' : '';\r\n            return (0, flit_1.html) `\n\t\t\t<div class=\"column\"\n\t\t\t\t:class.column-ordered=${isOrdered}\n\t\t\t\t@click=${(e) => this.doOrdering(e, index)}\n\t\t\t>\n\t\t\t\t<div class=\"column-left\" :style.justify-content=${flexAlign}>\n\t\t\t\t\t<div class=\"column-title\">${column.title}</div>\n\t\t\t\t\t${column.orderBy ? (0, flit_1.html) `\n\t\t\t\t\t\t<div class=\"order\" :class.current=${isOrdered && this.orderDirection !== ''}>\n\t\t\t\t\t\t\t<f-icon .type=${this.getOrderDirectionIcon(orderName)} />\n\t\t\t\t\t\t</div>`\r\n                : ''}\n\t\t\t\t</div>\n\n\t\t\t\t${this.resizable && index < this.columns.length - 1 ? (0, flit_1.html) `\n\t\t\t\t\t<div class=\"resizer\" @mousedown=${(e) => { var _a; return (_a = this.resizer) === null || _a === void 0 ? void 0 : _a.onStartResize(e, index); }} />`\r\n                : ''}\n\t\t\t</div>`;\r\n        });\r\n    }\r\n    renderRows() {\r\n        if (this.store instanceof remote_store_1.RemoteStore) {\r\n            return (0, flit_1.refDirective)((0, flit_1.liveAsyncRepeat)(this.store.getLiveAsyncRepeatDirectiveOptions(), this.renderRow.bind(this), {\r\n                renderCount: this.renderCount,\r\n                preRendering: this.preRendering,\r\n            }, this.transition), this.refDirective.bind(this));\r\n        }\r\n        else if (this.live) {\r\n            return (0, flit_1.refDirective)((0, flit_1.liveRepeat)(this.store.getCurrentData(), this.renderRow.bind(this), {\r\n                renderCount: this.renderCount,\r\n                preRendering: this.preRendering,\r\n            }, this.transition), this.refDirective.bind(this));\r\n        }\r\n        else {\r\n            return (0, flit_1.refDirective)((0, flit_1.repeat)(this.store.getCurrentData(), this.renderRow.bind(this), this.transition), this.refDirective.bind(this));\r\n        }\r\n    }\r\n    /**\r\n     * How to render each row.\r\n     * You should define a new component and overwrite this method if want to do more customized rendering.\r\n     */\r\n    renderRow(item, index) {\r\n        let tds = this.columns.map((column) => {\r\n            let result = item && column.render ? column.render.call(this, item, index) : '\\xa0';\r\n            return (0, flit_1.html) `<td :style.text-align=${column.align || ''}>${result}</td>`;\r\n        });\r\n        return (0, flit_1.html) `<tr>${tds}</tr>`;\r\n    }\r\n    /** Reference repeat directive, only for once. */\r\n    refDirective(dir) {\r\n        this.repeatDir = dir;\r\n        if ((this.repeatDir instanceof flit_1.LiveRepeatDirective) || (this.repeatDir instanceof flit_1.LiveAsyncRepeatDirective)) {\r\n            this.repeatDir.on('liveDataUpdated', this.onLiveDataUpdated, this);\r\n            this.repeatDir.on('liveDataRendered', this.onLiveDataRendered, this);\r\n        }\r\n    }\r\n    /** Triggers `liveDataUpdated` event. */\r\n    onLiveDataUpdated(data, index, scrollDirection) {\r\n        this.emit('liveDataUpdated', data, index, scrollDirection);\r\n    }\r\n    /** Triggers `liveDataRendered` event. */\r\n    onLiveDataRendered(data, index, scrollDirection) {\r\n        this.emit('liveDataRendered', data, index, scrollDirection);\r\n    }\r\n    /** Get order icon to indicate order direction. */\r\n    getOrderDirectionIcon(orderName) {\r\n        if (orderName === this.orderName) {\r\n            if (this.orderDirection === 'asc') {\r\n                return 'order-asc';\r\n            }\r\n            else if (this.orderDirection === 'desc') {\r\n                return 'order-desc';\r\n            }\r\n        }\r\n        return 'order-default';\r\n    }\r\n    /** Do column ordering for column with specified index. */\r\n    doOrdering(e, index) {\r\n        // Clicked column resizer.\r\n        if (e.target.closest(this.scopeClassName('.resizer'))) {\r\n            return;\r\n        }\r\n        let columns = this.columns;\r\n        let column = columns[index];\r\n        // Column is not orderable.\r\n        let canOrder = !!column.orderBy;\r\n        if (!canOrder) {\r\n            return;\r\n        }\r\n        let direction = '';\r\n        let descFirst = column.descFirst;\r\n        let columnName = column.name;\r\n        if (columnName === this.orderName) {\r\n            if (descFirst) {\r\n                direction = this.orderDirection === '' ? 'desc' : this.orderDirection === 'desc' ? 'asc' : '';\r\n            }\r\n            else {\r\n                direction = this.orderDirection === '' ? 'asc' : this.orderDirection === 'asc' ? 'desc' : '';\r\n            }\r\n        }\r\n        else {\r\n            direction = descFirst ? 'desc' : 'asc';\r\n        }\r\n        this.setOrder(columnName, direction);\r\n    }\r\n    onReady() {\r\n        this.resizer = new column_width_resizer_1.ColumnWidthResizer(this.refElements.head, this.refElements.columnContainer, this.refElements.colgroup, this.columns, this.minColumnWidth, this.scopeClassName('resizing-mask'));\r\n        this.watch(() => (0, flit_1.observeGetting)(this, 'columns'), async (columns) => {\r\n            var _a, _b;\r\n            (_a = this.resizer) === null || _a === void 0 ? void 0 : _a.setColumns(columns);\r\n            // Here we need it render new `<col>`s.\r\n            await (0, flit_1.untilRenderComplete)();\r\n            (_b = this.resizer) === null || _b === void 0 ? void 0 : _b.updatColumnWidthsPrecisely();\r\n        });\r\n        (0, flit_1.onRenderComplete)(() => {\r\n            var _a;\r\n            (_a = this.resizer) === null || _a === void 0 ? void 0 : _a.updatColumnWidthsPrecisely();\r\n        });\r\n    }\r\n    onConnected() {\r\n        (0, flit_1.onRenderComplete)(() => {\r\n            let unwatchSize = (0, ff_1.watchLayout)(this.el, 'size', () => { var _a; return (_a = this.resizer) === null || _a === void 0 ? void 0 : _a.updatColumnWidthsPrecisely(); });\r\n            this.once('disconnected', unwatchSize);\r\n        });\r\n    }\r\n    /** Order specified column by column name. */\r\n    setOrder(columnName, direction = '') {\r\n        var _a;\r\n        this.orderName = columnName;\r\n        this.orderDirection = direction;\r\n        let column = (_a = this.columns) === null || _a === void 0 ? void 0 : _a.find(col => col.name === columnName);\r\n        if (column) {\r\n            this.applyOrder(column, direction);\r\n        }\r\n        else {\r\n            this.watchOnce(() => this.columns, columns => {\r\n                let column = columns.find(col => col.name === columnName);\r\n                if (column) {\r\n                    this.applyOrder(column, direction);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /** Clear column order. */\r\n    clearOrder() {\r\n        this.orderName = null;\r\n        this.orderDirection = '';\r\n        this.store.setOrder(null);\r\n        this.store.sync();\r\n    }\r\n    /** Order specified column with specified direction by column name. */\r\n    applyOrder(column, direction = '') {\r\n        if (column.orderBy && direction !== '') {\r\n            this.store.setOrder(column.orderBy, direction);\r\n        }\r\n        else {\r\n            this.store.setOrder(null);\r\n        }\r\n        this.store.sync();\r\n        this.emit('orderChange', this.orderName, direction);\r\n    }\r\n    /** Column name to indicate which column is in order. */\r\n    getOrderName() {\r\n        return this.orderName;\r\n    }\r\n    /** Current column order direction. */\r\n    getOrderDirection() {\r\n        return this.orderDirection;\r\n    }\r\n    /** Get start index of live data in live mode, otherwise returns `0`. */\r\n    getStartIndex() {\r\n        var _a, _b;\r\n        if (this.repeatDir instanceof flit_1.RepeatDirective) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (_b = (_a = this.repeatDir) === null || _a === void 0 ? void 0 : _a.getStartIndex()) !== null && _b !== void 0 ? _b : 0;\r\n        }\r\n    }\r\n    /** Get end index of live data in live mode, otherwise returns data length. */\r\n    getEndIndex() {\r\n        var _a;\r\n        if (this.repeatDir instanceof flit_1.RepeatDirective) {\r\n            return this.store.getCurrentData().length;\r\n        }\r\n        else {\r\n            return (_a = this.repeatDir.getEndIndex()) !== null && _a !== void 0 ? _a : this.store.getFullData().length;\r\n        }\r\n    }\r\n    /**\r\n     * Set start index property, and scroll to appropriate position.\r\n     * You can safely call this before any thing rendered.\r\n     * Note the final `startIndex` property may be different,\r\n     * and you can't ensure the element is this index is visible.\r\n     */\r\n    async setStartIndex(index) {\r\n        await this.untilReady();\r\n        if (this.repeatDir instanceof flit_1.LiveRepeatDirective || this.repeatDir instanceof flit_1.LiveAsyncRepeatDirective) {\r\n            this.repeatDir.setStartIndex(index);\r\n        }\r\n        else {\r\n            this.repeatDir.setFirstVisibleIndex(index);\r\n        }\r\n    }\r\n    /** Whether specifies a start index. */\r\n    isStartIndexSpecified() {\r\n        if (this.repeatDir instanceof flit_1.LiveRepeatDirective || this.repeatDir instanceof flit_1.LiveAsyncRepeatDirective) {\r\n            return this.repeatDir.isStartIndexSpecified();\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Adjust `startIndex` and scroll position to make item in the specified index becomes visible if it's not.\r\n     * Returns whether find the element in specified index.\r\n     */\r\n    async makeIndexVisible(index) {\r\n        await this.untilReady();\r\n        return this.repeatDir.makeIndexVisible(index);\r\n    }\r\n    /**\r\n     * Make item in the specified index becomes visible at the top scroll position.\r\n     * Returns whether find the element in specified index.\r\n     * You can safely call this before any thing rendered.\r\n     */\r\n    async setFirstVisibleIndex(index) {\r\n        this.firstVisibleIndexSpecified = true;\r\n        await this.untilReady();\r\n        let setResult = await this.repeatDir.setFirstVisibleIndex(index);\r\n        this.firstVisibleIndexSpecified = false;\r\n        return setResult;\r\n    }\r\n    /** Returns whether set a first visible index and not applied yet. */\r\n    isFirstVisibleIndexSpecified() {\r\n        return this.firstVisibleIndexSpecified;\r\n    }\r\n    /**\r\n     * Get the index of the first visible element.\r\n     * Must after first time rendered.\r\n     */\r\n    getFirstVisibleIndex() {\r\n        if (this.repeatDir instanceof flit_1.LiveRepeatDirective || this.repeatDir instanceof flit_1.LiveAsyncRepeatDirective) {\r\n            return this.repeatDir.getFirstVisibleIndex();\r\n        }\r\n        else {\r\n            return (0, ff_1.locateFirstVisibleIndex)(this.refElements.table, this.refElements.table.rows);\r\n        }\r\n    }\r\n    /**\r\n     * Get currently rendered data item at specified index.\r\n     * Returns null if it's not rendered yet.\r\n     */\r\n    getRenderedItem(index) {\r\n        let isRendered = index >= this.getStartIndex() && index < this.getEndIndex();\r\n        if (isRendered) {\r\n            if (this.store instanceof remote_store_1.RemoteStore) {\r\n                return this.store.getImmediateData(index, index + 1)[0];\r\n            }\r\n            else {\r\n                return this.store.getCurrentData()[index];\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Get rendered row at specified index.\r\n     * Please makesure rendering is completed.\r\n     */\r\n    getRenderedRow(index) {\r\n        return this.refElements.table.rows[index - this.getStartIndex()] || null;\r\n    }\r\n    /** Checks whether have state cached in a specified name. */\r\n    hasState(name) {\r\n        return this.stateCacher.has(name);\r\n    }\r\n    /**\r\n     * Caches a state includes order, filter, startIndex...\r\n     * Remember the `name` must be unique for each table instance.\r\n     */\r\n    cacheState(name, options = {}) {\r\n        this.stateCacher.cache(name, options);\r\n    }\r\n    /**\r\n     * Restore table state by it's cached name.\r\n     * Returns customized data with `{}` as default value if restored successfully,\r\n     * Returns `undefined` if have no cache to restore.\r\n     * Will clear the cache after restored.\r\n     */\r\n    restoreState(name) {\r\n        return this.stateCacher.restore(name);\r\n    }\r\n    /** Clear cached state with specified name. */\r\n    clearState(name) {\r\n        this.stateCacher.clear(name);\r\n    }\r\n};\r\nTable = __decorate([\r\n    (0, flit_1.define)('f-table')\r\n], Table);\r\nexports.Table = Table;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Modal = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst element_1 = require(\"../utils/element\");\r\n/**\r\n * `<f-modal>` shows content and help to complete a child task in a popup modal.\r\n *\r\n * `:slot=\"action\"` - Add action buttons and show them at head.\r\n */\r\nlet Modal = class Modal extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Modal title. */\r\n        this.title = '';\r\n        /** Whether modal opened. */\r\n        this.opened = true;\r\n        /** Where to append current dialog. */\r\n        this.appendTo = 'body';\r\n    }\r\n    static style() {\r\n        let { adjustFontSize, textColor, popupBorderRadius, popupShadowBlurRadius, popupBackgroundColor, popupShadowColor, adjust } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tposition: fixed;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tz-index: 1000;\t// Same with popup\n\t\t\tborder-radius: ${popupBorderRadius}px;\n\t\t\tbox-shadow: 0 0 ${popupShadowBlurRadius}px ${popupShadowColor};\n\t\t\tbackground: ${popupBackgroundColor};\n\t\t\tmax-width: 100%;\n\t\t\tmax-height: 100%;\n\t\t\tpadding: ${adjust(8)}px ${adjust(16)}px;\n\t\t\toverflow: hidden;\n\t\t}\n\n\t\t.mask{\n\t\t\tposition: fixed;\n\t\t\tz-index: 1000;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\t}\n\n\t\t.header{\n\t\t\tdisplay: flex;\n\t\t\tflex: none;\n\t\t\theight: ${adjust(34) + 1}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tpadding-bottom: ${adjust(6)}px;\n\t\t\tborder-bottom: 1px solid ${textColor.alpha(0.8)};\n\t\t\tmargin-bottom: ${adjust(8)}px;\n\t\t}\n\n\t\t.title{\n\t\t\tflex: 1;\n\t\t\tmin-width: 0;\n\t\t\tfont-weight: bold;\n\t\t\toverflow: hidden;\n\t\t\twhite-space: nowrap;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\n\t\t.close{\n\t\t\tdisplay: flex;\n\t\t\twidth: ${adjust(28)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tmargin-top: 0;\n\t\t\tmargin-right: ${adjust(-7)}px;\n\t\t\tcursor: pointer;\n\n\t\t\t&:active{\n\t\t\t\ttransform: translateY(1px);\n\t\t\t}\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\n\t\t\tsvg{\n\t\t\t\twidth: ${adjust(24)}px;\n\t\t\t\theight: ${adjust(24)}px;\n\n\t\t\t\tline{\n\t\t\t\t\tstroke-width: 0.625 !important;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@media (max-width: 768px) {\n\t\t\t.close{\n\t\t\t\tsvg{\n\t\t\t\t\twidth: ${adjust(28)}px;\n\t\t\t\t\theight: ${adjust(28)}px;\n\n\t\t\t\t\tline{\n\t\t\t\t\t\tstroke-width: 0.54 !important;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.actions{\n\t\t\tmargin-left: ${adjust(16)}px;\n\n\t\t\tbutton{\n\t\t\t\tmargin-left: ${adjust(8)}px;\n\t\t\t}\n\t\t}\n\n\t\t.content{\n\t\t\tflex: 1;\n\t\t\tmin-height: 0;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\toverflow-y: auto;\n\t\t\tmargin-right: ${adjust(-16)}px;\n\t\t\tpadding-right: ${adjust(16)}px;\n\t\t}\n\t`;\r\n    }\r\n    render() {\r\n        let shouldRenderClose = !this.slots.action;\r\n        return (0, flit_1.html) `\n\t\t\t<template\n\t\t\t\ttabindex=\"0\"\n\t\t\t\t${(0, flit_1.show)(this.opened, { ...this.getTransition(), onend: this.onTransitionEnd })}\n\t\t\t>\n\t\t\t\t<div class=\"mask\"\n\t\t\t\t\t:refElement=\"mask\"\n\t\t\t\t\t${(0, flit_1.show)(this.opened, this.getTransition())}\n\t\t\t\t/>\n\n\t\t\t\t<div class=\"header\">\n\t\t\t\t\t<div class=\"title\">${this.title}</div>\n\n\t\t\t\t\t<div class=\"actions\" :show=${this.slots.action}>\n\t\t\t\t\t\t<slot name=\"action\" />\n\t\t\t\t\t</div>\n\n\t\t\t\t\t${shouldRenderClose ? (0, flit_1.html) `\n\t\t\t\t\t\t<div class=\"close\" @click=${this.hide}>\n\t\t\t\t\t\t\t<f-icon .type=\"close\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t` : ''}\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"content\">\n\t\t\t\t\t<slot />\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    getTransition() {\r\n        return { name: 'fade', enterAtStart: true };\r\n    }\r\n    onTransitionEnd(type, finish) {\r\n        if (type === 'leave' && finish) {\r\n            this.el.remove();\r\n            this.onTransitionLeaveEnd();\r\n        }\r\n    }\r\n    onTransitionLeaveEnd() { }\r\n    onConnected() {\r\n        (0, flit_1.untilRenderComplete)().then(() => {\r\n            if (this.refElements.mask && this.el.previousElementSibling !== this.refElements.mask) {\r\n                this.el.before(this.refElements.mask);\r\n            }\r\n            this.align();\r\n            (0, flit_1.on)(window, 'resize', this.onWindowResize, this);\r\n            let unwatch = (0, ff_1.watchLayout)(this.el, 'size', () => this.align());\r\n            this.once('disconnected', unwatch);\r\n        });\r\n    }\r\n    onDisconnected() {\r\n        if (this.refElements.mask) {\r\n            this.refElements.mask.remove();\r\n        }\r\n        (0, flit_1.off)(window, 'resize', this.onWindowResize, this);\r\n    }\r\n    onWindowResize() {\r\n        if (this.opened) {\r\n            this.align();\r\n        }\r\n    }\r\n    align() {\r\n        (0, ff_1.align)(this.el, document.documentElement, 'c');\r\n    }\r\n    /**\r\n     * To show the modal, you may `renderComponent` and then call `show()` or append to `body`.\r\n     * If you want render modal as a child element  and append into document automatically,\r\n     * just call `show` in `onConnected`.\r\n     */\r\n    show() {\r\n        this.opened = true;\r\n        if (this.appendTo) {\r\n            (0, element_1.appendTo)(this.el, this.appendTo);\r\n        }\r\n    }\r\n    hide() {\r\n        this.opened = false;\r\n    }\r\n};\r\nModal = __decorate([\r\n    (0, flit_1.define)('f-modal')\r\n], Modal);\r\nexports.Modal = Modal;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Dropdown = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst popup_1 = require(\"../bindings/popup\");\r\n/**\r\n * `Dropdown` is abstract class for any component having popup content to show.\r\n * You should extend it to implement some dropdown type components, like `Select`.\r\n  */\r\nclass Dropdown extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.popupBinding = null;\r\n        /** Whether dropdown content is opened. */\r\n        this.opened = false;\r\n        /** Trigger event type. Default value is `click`. */\r\n        this.trigger = 'click';\r\n        /** Whether shows triangle. Default value is `true`. */\r\n        this.triangle = true;\r\n        /**\r\n         * Align position with trigger element.\r\n         * Default value is 'b', means bottom position.\r\n         */\r\n        this.alignPosition = 'b';\r\n        /**\r\n         * Align margin betweens trigger element and popup content.\r\n         * Default value is '3' in pixels.\r\n         */\r\n        this.alignMargin = 3;\r\n        /**\r\n         * Transition to play when begin to show or hide popup content.\r\n         * Default value is fade css transition.\r\n         */\r\n        this.transition = { name: 'fade' };\r\n        /**\r\n         * Delay in milliseconds before showing popup content.\r\n         * Default value is `100` ms.\r\n         */\r\n        this.showDelay = 100;\r\n        /**\r\n         * Delay in milliseconds before hiding popup content.\r\n         * Default value is `100` ms.\r\n         */\r\n        this.hideDelay = 100;\r\n    }\r\n    static style() {\r\n        let { mainColor } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t}\n\n\t\t.opened{\n\t\t\tcolor: ${mainColor};\n\t\t}\n\n\t\t.down-icon{\n\t\t\tmargin-right: 6px;\n\t\t}\n\n\t\t.popup{\n\t\t\tpadding: 5px 0;\n\t\t}\n\n\t\t.list{\n\t\t\toverflow-y: auto;\n\t\t\tmax-height: 100%;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        let { trigger, triangle, alignPosition, alignMargin, transition, showDelay, hideDelay } = this;\r\n        let toPopup = (0, flit_1.refBinding)((0, popup_1.popup)(this.renderPopup.bind(this), { trigger, triangle, alignPosition, alignMargin, transition, showDelay, hideDelay }), this.refBinding.bind(this));\r\n        return (0, flit_1.html) `\n\t\t\t<template :class.opened=${this.opened} ${toPopup}>\n\t\t\t\t<slot />\n\t\t\t\t<f-icon class=\"down-icon\" .type=\"down\" />\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    renderPopup() {\r\n        return (0, flit_1.html) `\n\t\t\t<f-popup\n\t\t\t\tclass=\"popup\"\n\t\t\t\t.triangle=${this.triangle}\n\t\t\t/>\n\t\t`;\r\n    }\r\n    refBinding(binding) {\r\n        this.popupBinding = binding;\r\n        this.popupBinding.on('openedStateChange', this.setOpened, this);\r\n        this.popupBinding.on('willAlign', this.onWillAlign, this);\r\n    }\r\n    setOpened(opened) {\r\n        this.opened = opened;\r\n        if (opened) {\r\n            this.onPopupOpened();\r\n        }\r\n    }\r\n    onPopupOpened() { }\r\n    onWillAlign() { }\r\n    showPopup() {\r\n        if (this.popupBinding) {\r\n            this.popupBinding.showPopupLater();\r\n        }\r\n    }\r\n    hidePopup() {\r\n        if (this.popupBinding) {\r\n            this.popupBinding.hidePopupLater();\r\n        }\r\n    }\r\n}\r\nexports.Dropdown = Dropdown;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ContextMenu = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst popup_1 = require(\"../components/popup\");\r\n/** `<f-contextmenu>` is used for render a context menu after right clicking. */\r\nlet ContextMenu = class ContextMenu extends popup_1.Popup {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.triangle = false;\r\n    }\r\n    static style() {\r\n        let { adjust } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t${super.style()}\n\t\t:host{\n\t\t\tposition: fixed;\n\t\t\tborder-radius: 0;\n\t\t\t\n\t\t\t.option__f-list{\n\t\t\t\tpadding: ${adjust(2)}px ${adjust(8)}px;\n\t\t\t}\n\n\t\t\tf-list{\n\t\t\t\tborder-bottom: none;\n\t\t\t}\n\t\t}\n\t\t`.extends(super.style());\r\n    }\r\n    onReady() {\r\n        super.onReady();\r\n        // Avoid mousedown event at a contextmenu broadcast and cause parent popup hidden. \r\n        (0, flit_1.on)(this.el, 'mousedown.stop', () => { }, this);\r\n    }\r\n};\r\nContextMenu = __decorate([\r\n    (0, flit_1.define)('f-contextmenu')\r\n], ContextMenu);\r\nexports.ContextMenu = ContextMenu;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Radio = exports.RadioGroup = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\n/** `<f-radiogroup>` can contain several `<f-radio>` elements as it's child radios. */\r\nlet RadioGroup = class RadioGroup extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** All child `<f-checkbox>`. */\r\n        this.radios = [];\r\n        /** Current value, child radio which have same value will be checked. */\r\n        this.value = null;\r\n    }\r\n    /** Retister a child radio. */\r\n    register(radio) {\r\n        this.radios.push(radio);\r\n        radio.on('change', this.onRadioChange.bind(this, radio));\r\n    }\r\n    onRadioChange(changedRadio) {\r\n        for (let radio of this.radios) {\r\n            if (radio !== changedRadio) {\r\n                radio.checked = false;\r\n            }\r\n        }\r\n        this.value = changedRadio.value;\r\n        this.emit('change', this.value);\r\n    }\r\n};\r\nRadioGroup = __decorate([\r\n    (0, flit_1.define)('f-radiogroup')\r\n], RadioGroup);\r\nexports.RadioGroup = RadioGroup;\r\n/** `<f-radio>` just like `<input type=radio>`, you can click to check one radio in a radio group. */\r\nlet Radio = class Radio extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.radioGroup = null;\r\n        /** Whether the radio was checked. */\r\n        this.checked = false;\r\n        /** If having a parent `<f-radiogroup>`, the `value` property will be assign to it after current ratio checked. */\r\n        this.value = null;\r\n    }\r\n    static style() {\r\n        let { mainColor, adjust, focusBlurRadius } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tvertical-align: top;\n\t\t\talign-items: center;\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover{\n\t\t\t\tcolor: ${mainColor};\n\t\t\t}\n\n\t\t\t&:focus{\n\t\t\t\tcolor: ${mainColor};\n\n\t\t\t\t.icon{\n\t\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.icon{\n\t\t\tposition: relative;\n\t\t\ttop: -2px;\n\t\t\tborder-radius: 50%;\n\t\t\tmargin-right: ${adjust(6)}px;\n\t\t}\n\n\t\t.checked{\n\t\t\tcolor: ${mainColor};\n\t\t}\n\t\n\t\t.label{\n\t\t\tflex: 1;\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t\t`;\r\n    }\r\n    onCreated() {\r\n        let group = (0, flit_1.getClosestComponentOfType)(this.el, RadioGroup);\r\n        if (group) {\r\n            this.radioGroup = group;\r\n            this.checked = this.radioGroup.value == this.value;\r\n            this.radioGroup.register(this);\r\n        }\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<template\n\t\t\t\ttabindex=\"0\"\n\t\t\t\t:class.checked=${this.checked}\n\t\t\t\t@click=${this.onClick}\n\t\t\t\t@focus=${this.onFocus}\n\t\t\t>\n\t\t\t\t<f-icon class=\"icon\" .type=${this.checked ? 'radio-checked' : 'radio-unchecked'} />\n\t\t\t\t<div class=\"label\">\n\t\t\t\t\t<slot />\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    onClick() {\r\n        if (!this.checked) {\r\n            this.checked = true;\r\n            this.emit('change', true);\r\n        }\r\n    }\r\n    onFocus() {\r\n        if (!this.checked) {\r\n            (0, flit_1.once)(this.el, 'blur', this.onBlur, this);\r\n            (0, flit_1.once)(document, 'keydown.enter', this.onEnter, this);\r\n        }\r\n    }\r\n    onBlur() {\r\n        (0, flit_1.off)(document, 'keydown', this.onEnter, this);\r\n    }\r\n    onEnter() {\r\n        this.onClick();\r\n    }\r\n};\r\nRadio = __decorate([\r\n    (0, flit_1.define)('f-radio')\r\n], Radio);\r\nexports.Radio = Radio;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Tag = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\n/** `<f-tag>` used to give a label to an item. */\r\nlet Tag = class Tag extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Unique value to identify current tag. */\r\n        this.value = null;\r\n        /**\r\n         * Whether current tag closeable.\r\n         * Not tag element were not removed automatically,\r\n         * you must capture close event and update rendered result.\r\n         */\r\n        this.closable = false;\r\n    }\r\n    static style() {\r\n        let { borderColor, borderRadius, adjust, adjustFontSize } = theme_1.theme;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tborder: 1px solid ${borderColor};\n\t\t\tborder-radius: ${borderRadius}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tline-height: ${adjust(18)}px;\n\t\t\theight: ${adjust(20)}px;\n\t\t\tpadding: 0 ${adjust(6)}px 0 ${adjust(6)}px;\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover{\n\t\t\t\topacity: 0.9;\n\t\t\t}\n\n\t\t\t&:active{\n\t\t\t\topacity: 0.8;\n\t\t\t}\n\t\t}\n\t\n\t\t.icon{\n\t\t\tposition: relative;\n\t\t\ttop: -1px;\n\t\t\tmargin-left: ${adjust(4)}px;\n\t\t\tmargin-right: ${adjust(-4)}px;\n\t\t\tdisplay: inline-flex;\n\n\t\t\tf-icon{\n\t\t\t\tmargin: auto;\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<slot />\n\t\t\t${this.closable ? (0, flit_1.html) `<div class=\"icon\" @click=${this.close}><f-icon .type=\"close\" /></div>` : ''}\n\t\t`;\r\n    }\r\n    close() {\r\n        this.emit('close', this.value);\r\n    }\r\n};\r\nTag = __decorate([\r\n    (0, flit_1.define)('f-tag')\r\n], Tag);\r\nexports.Tag = Tag;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Slider = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst ff_1 = require(\"@pucelle/ff\");\r\nconst tooltip_1 = require(\"../bindings/tooltip\");\r\n/** `<f-slider>` provides a range selector, you may pick one value by sliding in the bar. */\r\nlet Slider = class Slider extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Whether in vertical mode. Defult value is `false` */\r\n        this.vertical = false;\r\n        /** Minimum value. Defult value is `0`. */\r\n        this.min = 0;\r\n        /** Maximum value. Defult value is `100`. */\r\n        this.max = 100;\r\n        /** Value step when increasing or decreasing. Defult value is `1`. */\r\n        this.step = 1;\r\n        /** Current value. Defult value is `0`. */\r\n        this.value = 0;\r\n        /** Fixed decimal count of progress text. Default value is `null`. */\r\n        this.decimalCount = null;\r\n        this.draging = false;\r\n    }\r\n    static style() {\r\n        let { mainColor, borderColor, adjust, adjustFontSize, focusBlurRadius, backgroundColor } = theme_1.theme;\r\n        let grooveSize = 1;\r\n        let ballSize = Math.ceil(adjust(7)) * 2 + grooveSize;\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tdisplay: inline-flex;\n\t\t\tvertical-align: top;\n\t\t\tflex-direction: column;\n\t\t\tjustify-content: center;\n\t\t\tposition: relative;\n\t\t\twidth: ${adjust(150)}px;\n\t\t\theight: ${adjust(28)}px;\n\t\t\tfont-size: ${adjustFontSize(13)}px;\n\t\t\tcursor: pointer;\n\n\t\t\t&:focus .ball{\n\t\t\t\tbox-shadow: 0 0 ${focusBlurRadius}px ${mainColor};\n\t\t\t\tborder-color: ${mainColor};\n\t\t\t}\n\t\t}\n\n\t\t.groove{\n\t\t\tposition: relative;\n\t\t\theight: ${grooveSize}px;\n\t\t}\n\n\t\t.groove-bg{\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tbackground: ${borderColor};\n\t\t}\n\t\n\t\t.progress{\n\t\t\tposition: relative;\n\t\t\tbackground: ${mainColor};\n\t\t\theight: 100%;\n\t\t}\n\t\n\t\t.ball{\n\t\t\tposition: absolute;\n\t\t\ttop: -${(ballSize - grooveSize) / 2}px;\n\t\t\tmargin-left: -${Math.round(ballSize / 2)}px;\n\t\t\twill-change: top, left;\n\t\t\tborder-radius: 50%;\n\t\t\tborder: 1px solid ${borderColor};\n\t\t\tbackground: ${backgroundColor};\n\t\t\tfloat: right;\n\t\t\twidth: ${ballSize}px;\n\t\t\theight: ${ballSize}px;\n\n\t\t\t&:hover{\n\t\t\t\tborder-color: ${mainColor};\n\t\t\t}\n\t\t}\n\n\t\t.dragging{\n\t\t\t.ball{\n\t\t\t\tborder-color: ${mainColor.darken(10)};\n\t\t\t\tbackground: ${mainColor.darken(10)};\n\t\t\t}\n\t\t}\n\n\t\t.vertical{\n\t\t\twidth: ${adjust(30)}px;\n\t\t\theight: ${adjust(150)}px;\n\t\t\tflex-direction: row;\n\n\t\t\t.groove{\n\t\t\t\twidth: ${grooveSize}px;\n\t\t\t\theight: 100%;\n\t\t\t}\n\n\t\t\t.progress{\n\t\t\t\tposition: absolute;\n\t\t\t\tbottom: 0;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 0;\n\t\t\t}\n\n\t\t\t.ball{\n\t\t\t\tmargin: -${Math.round(ballSize / 2)}px -${(ballSize - grooveSize) / 2}px;\n\t\t\t}\n\t\t}\n\n\t\t.tooltip{\n\t\t\tfont-family: consolas;\n\t\t\tfont-size: ${adjustFontSize(14)}px;\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        let tip = (0, tooltip_1.tooltip)(this.renderTooltipContent(), {\r\n            alignTo: () => this.refElements.ball,\r\n            alignPosition: this.vertical ? 'r' : 't',\r\n            keepVisible: this.draging,\r\n        });\r\n        let sizeStyle = {};\r\n        if (this.vertical) {\r\n            sizeStyle.height = this.getPercent() + '%';\r\n        }\r\n        else {\r\n            sizeStyle.width = this.getPercent() + '%';\r\n        }\r\n        let positionStyle = {};\r\n        if (this.vertical) {\r\n            positionStyle.top = (100 - this.getPercent()) + '%';\r\n        }\r\n        else {\r\n            positionStyle.left = this.getPercent() + '%';\r\n        }\r\n        return (0, flit_1.html) `\n\t\t\t<template\n\t\t\t\ttabindex=\"0\"\n\t\t\t\t:class.vertical=${this.vertical}\n\t\t\t\t:class.dragging=${this.draging}\n\t\t\t\t${tip}\n\t\t\t\t@mousedown=${this.onMouseDown}\n\t\t\t\t@focus=${this.onFocus}\n\t\t\t\t@blur=${this.onBlur}\n\t\t\t>\n\t\t\t\t<div class=\"groove\" :refElement=\"groove\">\n\t\t\t\t\t<div class=\"groove-bg\" />\n\t\t\t\t\t<div class=\"progress\" :style=${sizeStyle} />\n\t\t\t\t\t<div class=\"ball\" :refElement=\"ball\" :style=${positionStyle} />\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    renderTooltipContent() {\r\n        let decimalCount = this.decimalCount;\r\n        if (decimalCount === null) {\r\n            decimalCount = String(this.step).replace(/^\\d+\\.?/, '').length;\r\n        }\r\n        let tipText = this.value.toFixed(decimalCount);\r\n        return (0, flit_1.html) `<span class=\"${this.scopeClassName('tooltip')}\">${tipText}</span>`;\r\n    }\r\n    getPercent() {\r\n        if (this.value === this.min) {\r\n            return 0;\r\n        }\r\n        let percentage = (this.value - this.min) / (this.max - this.min) * 100;\r\n        return (0, ff_1.constrain)(percentage, 0, 100);\r\n    }\r\n    onMouseDown(e) {\r\n        let rect = (0, ff_1.getRect)(this.refElements.groove);\r\n        // Avoid mouse leave to cause it hide.\r\n        ff_1.MouseLeave.lock(this.el);\r\n        this.draging = true;\r\n        // If clicked the ball, not move; only move when clicked the groove.\r\n        if (!e.target.matches(this.scopeClassName('.ball'))) {\r\n            this.changeValueByEvent(e, rect);\r\n        }\r\n        let onMouseMove = (e) => {\r\n            // Disable selecting text unexpectedly, and makesure ball not lose focus.\r\n            e.preventDefault();\r\n            this.changeValueByEvent(e, rect);\r\n        };\r\n        (0, flit_1.on)(document, 'mousemove', onMouseMove);\r\n        (0, flit_1.once)(document, 'mouseup', () => {\r\n            ff_1.MouseLeave.unlock(this.el);\r\n            (0, flit_1.off)(document, 'mousemove', onMouseMove);\r\n            this.draging = false;\r\n            this.emit('dragend');\r\n        });\r\n        this.emit('dragstart');\r\n    }\r\n    changeValueByEvent(e, rect) {\r\n        let rate;\r\n        if (this.vertical) {\r\n            rate = (0, ff_1.constrain)(1 - (e.clientY - rect.top) / rect.height, 0, 1);\r\n        }\r\n        else {\r\n            rate = (0, ff_1.constrain)((e.clientX - rect.left) / rect.width, 0, 1);\r\n        }\r\n        let diff = (this.max - this.min) * rate;\r\n        if (this.step) {\r\n            diff = Math.round(diff / this.step) * this.step;\r\n        }\r\n        let oldValue = this.value;\r\n        let newValue = (0, ff_1.toDecimal)(this.min + diff, 4);\r\n        if (newValue !== oldValue) {\r\n            this.emit('change', this.value = newValue);\r\n        }\r\n    }\r\n    onWheel(e) {\r\n        if (!this.step || document.activeElement !== this.el) {\r\n            return;\r\n        }\r\n        let newValue;\r\n        // deltaY < 0 when wheel up\r\n        if (e.deltaY < 0 && this.vertical || e.deltaY > 0 && !this.vertical) {\r\n            newValue = (0, ff_1.toDecimal)(Math.min(this.value + this.step, this.max), 4);\r\n        }\r\n        else {\r\n            newValue = (0, ff_1.toDecimal)(Math.max(this.value - this.step, this.min), 4);\r\n        }\r\n        if (newValue !== this.value) {\r\n            this.emit('change', this.value = newValue);\r\n        }\r\n    }\r\n    onFocus() {\r\n        this.onBlur();\r\n        (0, flit_1.on)(document, 'keydown', this.onKeyDown, this);\r\n        (0, flit_1.on)(document, 'wheel.prevent', this.onWheel, this);\r\n    }\r\n    onKeyDown(e) {\r\n        let newValue;\r\n        if (this.vertical) {\r\n            if (e.key === 'ArrowUp') {\r\n                e.preventDefault();\r\n                newValue = Math.min(this.value + this.step, this.max);\r\n            }\r\n            else if (e.key === 'ArrowDown') {\r\n                e.preventDefault();\r\n                newValue = Math.max(this.value - this.step, this.min);\r\n            }\r\n        }\r\n        else {\r\n            if (e.key === 'ArrowLeft') {\r\n                e.preventDefault();\r\n                newValue = Math.max(this.value - this.step, this.min);\r\n            }\r\n            else if (e.key === 'ArrowRight') {\r\n                e.preventDefault();\r\n                newValue = Math.min(this.value + this.step, this.max);\r\n            }\r\n        }\r\n        if (e.key === 'Escape') {\r\n            e.preventDefault();\r\n            this.el.blur();\r\n        }\r\n        if (newValue !== undefined && newValue !== this.value) {\r\n            this.emit('change', this.value = newValue);\r\n        }\r\n    }\r\n    onBlur() {\r\n        (0, flit_1.off)(document, 'keydown', this.onKeyDown, this);\r\n        (0, flit_1.off)(document, 'wheel', this.onWheel, this);\r\n    }\r\n};\r\nSlider = __decorate([\r\n    (0, flit_1.define)('f-slider')\r\n], Slider);\r\nexports.Slider = Slider;\r\n","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Popup = void 0;\r\nconst flit_1 = require(\"@pucelle/flit\");\r\nconst theme_1 = require(\"../style/theme\");\r\nconst element_1 = require(\"../utils/element\");\r\n/** `<f-popup>` is the container for popup content. */\r\nlet Popup = class Popup extends flit_1.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Options to overwrite default popup binding to control default alignment.\r\n         * Will be overwritten by options passed to `popup(...)`.\r\n         */\r\n        this.defaultPopupOptions = null;\r\n        this.binding = null;\r\n        /** Show triangle element in herizontal order - left or right position. */\r\n        this.herizontal = false;\r\n        /** Whether shows triangle element. */\r\n        this.triangle = true;\r\n        /** Where to append current popup. */\r\n        this.appendTo = 'body';\r\n    }\r\n    static style() {\r\n        let { popupBorderRadius, popupBackgroundColor, popupShadowBlurRadius, popupShadowColor, adjust } = theme_1.theme;\r\n        let w = adjust(14);\r\n        let h = adjust(9);\r\n        let x = adjust(11);\r\n        return (0, flit_1.css) `\n\t\t:host{\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\n\t\t\t// Same with window, so if in window, we must move it behind the window\n\t\t\tz-index: 1000;\n\n\t\t\tbackground: ${popupBackgroundColor};\n\t\t\tborder-radius: ${popupBorderRadius}px;\n\n\t\t\t// 3px drop shadow nearly equals 6px in box-shadow.\n\t\t\tfilter: drop-shadow(0 0 ${popupShadowBlurRadius / 2}px ${popupShadowColor});\n\t\t}\n\n\t\t.triangle{\n\t\t\t// Triangle should set \"top\" position, not others.\n\t\t\tposition: absolute;\n\t\t\tborder-left: ${w / 2}px solid transparent;\n\t\t\tborder-right: ${w / 2}px solid transparent;\n\t\t\tborder-bottom: ${h}px solid ${popupBackgroundColor};\n\t\t\ttop: -${h}px;\n\t\t\tleft: ${x}px;\t// 11 + 5 = 16\n\n\t\t\t&-herizontal{\n\t\t\t\tborder-top: ${w / 2}px solid transparent;\n\t\t\t\tborder-bottom: ${w / 2}px solid transparent;\n\t\t\t\tborder-right: ${h}px solid ${popupBackgroundColor};\n\t\t\t\tborder-left: 0;\n\t\t\t\ttop: ${x}px;\n\t\t\t\tleft: -${h}px;\n\t\t\t}\n\t\t}\n\t\t`;\r\n    }\r\n    render() {\r\n        return (0, flit_1.html) `\n\t\t\t<template tabindex=\"0\">\n\t\t\t\t${this.triangle ? (0, flit_1.html) `\n\t\t\t\t\t<div class=\"triangle\" :refElement=\"triangle\" :class.triangle-herizontal=${this.herizontal} />\n\t\t\t\t` : ''}\n\t\t\t\t<slot />\n\t\t\t</template>\n\t\t`;\r\n    }\r\n    // Call `update` every time after restored from `cache(...)`.\r\n    onConnected() {\r\n        // Why render `<popup>` to body?\r\n        // It's very common that the `el` is covered or clipped,\r\n        // which will cause the `<popup>` is not fully visible.\r\n        // You can still render the `<popup>` in the same scroller with `<popup>`.\r\n        // Why inserted into body every time?\r\n        // Most popups share same `z-index`, append newly opened `<popup>` will makesure it covers others.\r\n        // Note that:\r\n        // The template `content` can't pass into `<popup>` as an argument,\r\n        // it will cause the template was parsed in `<popup>` context.\r\n        // The `<popup>` will be cached in `<popup>`, and element will be removed when not in use.\r\n        // After restored from `cache`, it will be inserted back into `<popup>`.\r\n        // So here we need to move it to `body` after every time rendered.\r\n        // If there are serval nodes which belong to an template you need to append into another element,\r\n        // Don't forget to move the anchor nodes, or the whole template nodes into the target element,\r\n        // or they will can't be removed because they are outside of the template node ranges.\r\n        // In the future, we may implement a flit directive `renderTo(..., ...)`, \r\n        // to render elements and it's anchor node to another element.\r\n        this.applyAppendTo();\r\n    }\r\n    /** Set related popup binding. */\r\n    setBinding(binding) {\r\n        this.binding = binding;\r\n    }\r\n    /**\r\n     * Insert popup element into target that specified by `appendTo`.\r\n     * Can also ensure\r\n     */\r\n    applyAppendTo() {\r\n        if (this.appendTo) {\r\n            (0, element_1.appendTo)(this.el, this.appendTo);\r\n        }\r\n    }\r\n    /** Close popup content, may play leave transition. */\r\n    close() {\r\n        if (this.binding) {\r\n            this.binding.hidePopupLater();\r\n        }\r\n        else {\r\n            this.el.remove();\r\n        }\r\n    }\r\n    /** Get the trigger element. */\r\n    getTriggerElement() {\r\n        var _a;\r\n        return ((_a = this.binding) === null || _a === void 0 ? void 0 : _a.getTriggerElement()) || null;\r\n    }\r\n};\r\nPopup = __decorate([\r\n    (0, flit_1.define)('f-popup')\r\n], Popup);\r\nexports.Popup = Popup;\r\n","import { Component, define, html } from '@pucelle/flit';\ndefine('mm-configuration-map', class extends Component {\n    render() {\n        return html `\n\t\t<template class=\"mm-configuration-map\">\n\t\t\t<header>Map</header>\n\n\n\t\t\t<section>\n\t\t\t\t<mm-struct-theme-select\n\t\t\t\t\t.themeName=${this.minderExported.commands.queryValue('StructTheme')}\n\t\t\t\t\t@@select=${this.setStructTheme}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Struct Theme</header>\n\t\t\t</section>\n\n\n\t\t\t<section>\n\t\t\t\t<mm-color-theme-select\n\t\t\t\t\t.themeName=${this.minderExported.commands.queryValue('ColorTheme')}\n\t\t\t\t\t@@select=${this.setColorTheme}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Color Theme</header>\n\t\t\t</section>\n\n\n\t\t\t<section>\n\t\t\t\t<mm-color-select\n\t\t\t\t\t.color=${this.minderExported.commands.queryValue('BackgroundColor')}\n\t\t\t\t\t@@select=${this.setBackgroundColor}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Background Color</header>\n\t\t\t</section>\n\n\n\t\t\t<section>\n\t\t\t\t<mm-multi-color-select\n\t\t\t\t\t.multiColor=${this.minderExported.commands.queryValue('RootMultiConnectColor')}\n\t\t\t\t\t@@select=${this.setMultiConnectColor}\n\t\t\t\t/>\n\t\t\t\t<header>Multi-Branch Color</header>\n\t\t\t</section>\n\n\n\t\t\t<section>\n\t\t\t\t<f-switch\n\t\t\t\t\t.value=${this.minderExported.commands.queryValue('RootTaperedLine')}\n\t\t\t\t\t@@change=${this.setTaperedLine}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Tapered Line</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('RootTaperedLineStartWidth')}\n\t\t\t>\n\t\t\t\t<f-slider\n\t\t\t\t\tclass=\"mm-radius-slider\"\n\t\t\t\t\t.value=${this.minderExported.commands.queryValue('RootTaperedLineStartWidth') || 0}\n\t\t\t\t\t.min=${5}\n\t\t\t\t\t.max=${20}\n\t\t\t\t\t.step=${1}\n\t\t\t\t\t@@change=${this.setTaperedStartWidth}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Tapered Start Width</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('RootTaperedLinePower')}\n\t\t\t>\n\t\t\t\t<f-slider\n\t\t\t\t\tclass=\"mm-radius-slider\"\n\t\t\t\t\t.value=${this.minderExported.commands.queryValue('BranchTaperedLinePower') || 0}\n\t\t\t\t\t.min=${-1}\n\t\t\t\t\t.max=${3}\n\t\t\t\t\t.step=${0.1}\n\t\t\t\t\t@@change=${this.setTaperedPower}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Tapered Power</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('RootConnectOutAdjust')}\n\t\t\t>\n\t\t\t\t<mm-connect-out-adjust-select\n\t\t\t\t\t.outAdjust=${this.minderExported.commands.queryValue('RootConnectOutAdjust') || 'none'}\n\t\t\t\t\t@@select=${this.setConnectOutAdjust}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Connect Out Adjust</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:show=${this.minderExported.commands.canExec('JustifySameDeepthWidth')}\n\t\t\t>\n\t\t\t\t<f-switch\n\t\t\t\t\t.value=${this.minderExported.commands.queryValue('JustifySameDeepthWidth')}\n\t\t\t\t\t@@change=${this.setJustifySameDeepthWidth}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Justify Same Depth Width</header>\n\t\t\t</section>\n\n\t\t</template>\n\t\t`;\n    }\n    setColorTheme(themeName) {\n        this.minderExported.commands.exec('ColorTheme', themeName);\n    }\n    setStructTheme(themeName) {\n        this.minderExported.commands.exec('StructTheme', themeName);\n    }\n    setBackgroundColor(color) {\n        this.minderExported.commands.exec('BackgroundColor', color);\n    }\n    setMultiConnectColor(multiColor) {\n        // 注意传递过来的 multiColor 可能为空字符串.\n        this.minderExported.commands.exec('RootMultiConnectColor', multiColor || undefined);\n    }\n    setTaperedLine(tapered) {\n        this.minderExported.commands.exec('RootTaperedLine', tapered);\n    }\n    setTaperedStartWidth(width) {\n        this.minderExported.commands.exec('RootTaperedLineStartWidth', width);\n    }\n    setTaperedPower(power) {\n        this.minderExported.commands.exec('RootTaperedLinePower', power);\n    }\n    setConnectOutAdjust(adjustTo) {\n        this.minderExported.commands.exec('RootConnectOutAdjust', adjustTo);\n    }\n    setJustifySameDeepthWidth(justify) {\n        this.minderExported.commands.exec('JustifySameDeepthWidth', justify);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup, tooltip } from '@pucelle/flit-ui';\ndefine('mm-color-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.color = '';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-color-select\"\n\t\t\t:style.background=${this.color}\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup' })}\n\t\t/>\n\t\t`;\n    }\n    renderMenu() {\n        return html `<mm-color-menu .herizontal @@select=${this.onSelectColor} />`;\n    }\n    onSelectColor(color) {\n        this.color = color;\n        this.emit('select', color);\n    }\n});\ndefine('mm-color-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.COLORS = [\n            '#000000', '#424242', '#626262', '#9d9d95', '#c7c7c7', '#efefef', '#f7f7f7', '#ffffff',\n            // 这一行满饱和度的颜色作为背景简直是折磨眼睛.\n            //'#ff0000', '#ff9d00', '#ffff00', '#00ff00', '#00ffff', '#0000ff', '#9d00ff', '#ff00ff',\n            '#f7c7cf', '#ffebcb', '#ffebcb', '#d7efd7', '#d3dbe7', '#cfe7f7', '#d3dbe7', '#e7d7df',\n            '#e79d9d', '#ffc79d', '#ffe79d', '#b5d7a5', '#a5c7cf', '#9dc7ef', '#b5a5d7', '#d7a5bd',\n            '#e76262', '#f7ad6a', '#ffd762', '#95bd7a', '#72a5ad', '#6aaddf', '#8d7ac7', '#c77aa5',\n            '#cf0000', '#e79538', '#efc730', '#6aa54a', '#4a7a8d', '#3885c7', '#624aa5', '#a54a7a',\n            '#9d0000', '#b56208', '#bd9500', '#387a20', '#104a5a', '#085295', '#301872', '#721842',\n            '#620000', '#7a3800', '#285218', '#285218', '#083038', '#003062', '#20104a', '#4a1030'\n        ];\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-color-menu\">\n\t\t\t<ul>\n\t\t\t${this.COLORS.map(color => html `\n\t\t\t\t\t<li\n\t\t\t\t\t\t:style.background=${color}\n\t\t\t\t\t\t${tooltip(`Color ${color}`, { alignPosition: 't' })}\n\t\t\t\t\t\t@click=${() => this.onClickColor(color)}\n\t\t\t\t\t.>\n\t\t\t\t`)}\n\t\t\t</ul>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    onClickColor(color) {\n        this.emit('select', color);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup, tooltip } from '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\ndefine('mm-multi-color-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.multiColor = '';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-multi-color-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup' })}\n\t\t>\n\t\t\t<mm-multi-color .name=${this.multiColor} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `\n\t\t<mm-multi-color-menu\n\t\t\t.herizontal\n\t\t\t.multiColor=${this.multiColor}\n\t\t\t@@select=${this.onSelectMultiColor}\n\t\t/>\n\t\t`;\n    }\n    onSelectMultiColor(color) {\n        this.multiColor = color;\n        this.emit('select', color);\n    }\n});\ndefine('mm-multi-color', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.name = '';\n    }\n    render() {\n        let colors = MinderExported.MultiColors[this.name] || ['#e0e0e0'];\n        return html `\n\t\t<template class=\"mm-multi-color\">\n\t\t\t${colors.map(color => html `\n\t\t\t\t<div :style.background=${color}></div>\n\t\t\t`)}\n\t\t</template>\n\t\t`;\n    }\n});\ndefine('mm-multi-color-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.multiColor = '';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-multi-color-menu\">\n\t\t\t<mm-multi-color @click=${() => this.onClickColor('')} />\n\n\t\t\t${Object.keys(MinderExported.MultiColors).map(multiColor => html `\n\t\t\t\t\t<mm-multi-color\n\t\t\t\t\t\t.name=${multiColor}\n\t\t\t\t\t\t:class.active=${multiColor === this.multiColor}\n\t\t\t\t\t\t${tooltip(`MultiColor ${multiColor}`, { alignPosition: 't' })}\n\t\t\t\t\t\t@click=${() => this.onClickColor(multiColor)}\n\t\t\t\t\t/>\n\t\t\t\t`)}\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    onClickColor(color) {\n        this.emit('select', color);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup, tooltip } from '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\ndefine('mm-color-theme-select', class extends Component {\n    render() {\n        return html `\n\t\t\t<template class=\"mm-color-theme-select\"\n\t\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', cacheable: true, canShrinkInY: true })}\n\t\t\t>\n\t\t\t\t<mm-color-theme\n\t\t\t\t\t.name=${this.themeName}\n\t\t\t\t/>\n\t\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `\n\t\t\t<mm-color-theme-menu\n\t\t\t\t.herizontal\n\t\t\t\t.themeName=${this.themeName}\n\t\t\t\t@@select=${this.onSelectThemeName}\n\t\t\t/>\n\t\t`;\n    }\n    onSelectThemeName(color) {\n        this.emit('select', color);\n    }\n});\ndefine('mm-color-theme', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.name = '';\n    }\n    async onReady() {\n        this.watchImmediately(() => this.name, async (name) => {\n            var _a;\n            (_a = this.el.firstElementChild) === null || _a === void 0 ? void 0 : _a.remove();\n            let svg = await MinderExported.colorThemePreviewer.renderSVG(name, {\n                style: {\n                    root: { 'radius': 20, 'connect': 'fork-rounded' },\n                    main: { 'radius': 15 },\n                }\n            });\n            if (svg) {\n                this.el.append(svg.element);\n            }\n        });\n    }\n    render() {\n        return html `\n\t\t\t<template class=\"mm-color-theme\" />\n\t\t`;\n    }\n});\ndefine('mm-color-theme-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.themeName = '';\n    }\n    render() {\n        return html `\n\t\t\t<template class=\"mm-color-theme-menu\">\n\t\t\t\t<div class=\"mm-color-theme-menu-scroller\">\n\t\t\t\t\t${Object.keys(MinderExported.ColorThemes).sort().map(themeName => html `\n\t\t\t\t\t\t\t<mm-color-theme\n\t\t\t\t\t\t\t\t.name=${themeName}\n\t\t\t\t\t\t\t\t:class.active=${themeName === this.themeName}\n\t\t\t\t\t\t\t\t${tooltip(`Theme ${themeName}`, { alignPosition: 'l' })}\n\t\t\t\t\t\t\t\t@click=${() => this.onClickTheme(themeName)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t`)}\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t`.extends(super.render());\n    }\n    onClickTheme(color) {\n        this.emit('select', color);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup, tooltip } from '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\ndefine('mm-struct-theme-select', class extends Component {\n    render() {\n        return html `\n\t\t\t<template class=\"mm-struct-theme-select\"\n\t\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', cacheable: true, canShrinkInY: true })}\n\t\t\t>\n\t\t\t\t<mm-struct-theme\n\t\t\t\t\t.name=${this.themeName}\n\t\t\t\t/>\n\t\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `\n\t\t\t<mm-struct-theme-menu\n\t\t\t\t.herizontal\n\t\t\t\t.themeName=${this.themeName}\n\t\t\t\t@@select=${this.onSelectThemeName}\n\t\t\t/>\n\t\t`;\n    }\n    onSelectThemeName(struct) {\n        this.emit('select', struct);\n    }\n});\ndefine('mm-struct-theme', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.name = '';\n    }\n    async onReady() {\n        this.watchImmediately(() => this.name, async (name) => {\n            var _a;\n            (_a = this.el.firstElementChild) === null || _a === void 0 ? void 0 : _a.remove();\n            let svg = await MinderExported.structThemePreviewer.renderSVG(name, {\n                style: {\n                    root: { 'fill-color': '#555455', 'radius': 20 },\n                    main: { 'fill-color': '#aca29d', 'radius': 15 },\n                }\n            });\n            if (svg) {\n                this.el.append(svg.element);\n            }\n        });\n    }\n    render() {\n        return html `\n\t\t\t<template class=\"mm-struct-theme\" />\n\t\t`;\n    }\n});\ndefine('mm-struct-theme-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.themeName = '';\n    }\n    render() {\n        return html `\n\t\t\t<template class=\"mm-struct-theme-menu\">\n\t\t\t\t<div class=\"mm-struct-theme-menu-scroller\">\n\t\t\t\t\t${Object.keys(MinderExported.StructThemes).sort().map(themeName => html `\n\t\t\t\t\t\t\t<mm-struct-theme\n\t\t\t\t\t\t\t\t.name=${themeName}\n\t\t\t\t\t\t\t\t:class.active=${themeName === this.themeName}\n\t\t\t\t\t\t\t\t${tooltip(`Theme ${themeName}`, { alignPosition: 'l' })}\n\t\t\t\t\t\t\t\t@click=${() => this.onClickTheme(themeName)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t`)}\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t`.extends(super.render());\n    }\n    onClickTheme(struct) {\n        this.emit('select', struct);\n    }\n});\n","import { html, Component, define } from '@pucelle/flit';\ndefine('mm-zoom-show', class extends Component {\n    onCreated() {\n        this.minderExported.on('paper-view-transform-update', this.update, this);\n    }\n    render() {\n        return html `\n\t\t\t<template class=\"mm-zoom-show\">\n\t\t\t\t${Math.round(this.minderExported.commands.queryValue('ViewZoom') * 100)}%\n\t\t\t</template>\n\t\t`;\n    }\n});\n","import { html, Component, define } from '@pucelle/flit';\nimport { popup } from '@pucelle/flit-ui';\ndefine('mm-exporter', class extends Component {\n    render() {\n        return html `\n\t\t\t<template class=\"mm-exporter\" ${popup(() => this.renderMenu())}>\n\t\t\t\tExport\n\t\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `\n\t\t\t<f-menu class=\"mm-exporter-menu\">\n\t\t\t\t<ul>\n\t\t\t\t\t<li @click=${() => this.exportAs('text')}>Text</li>\n\t\t\t\t\t<li @click=${() => this.exportAs('svg')}>SVG</li>\n\t\t\t\t\t<li @click=${() => this.exportAs('json')}>JSON</li>\n\t\t\t\t\t<li @click=${() => this.exportAs('jpeg')}>JPEG</li>\n\t\t\t\t\t<li @click=${() => this.exportAs('png')}>PNG</li>\n\t\t\t\t\t<!-- <li>Docx</li>\n\t\t\t\t\t<li>PDF</li> -->\n\t\t\t\t</ul>\n\t\t\t</f-menu>\n\t\t`;\n    }\n    exportAs(format) {\n        this.minderExported.exportAsFile(format, 'gitmind', { expandAll: true, fillDefaultText: true });\n    }\n});\n","import { html, Component, define } from '@pucelle/flit';\nimport { dialog, tooltip } from '@pucelle/flit-ui';\nimport { loadImage } from '../../src/utils/net';\nimport { selectFile } from '@pucelle/ff';\ndefine('mm-toolbar', class extends Component {\n    render() {\n        return html `\n\t\t<template class=\"mm-toolbar\"\n\t\t\t:hide=${this.minderExported.status.isReadonly()}\n\t\t>\n\t\t\t<ul>\n\n\t\t\t\t<li class=\"bar\"\n\t\t\t\t\t:class.disabled=${!this.minderExported.commands.canExec('BranchAddSibling')}\n\t\t\t\t\t${tooltip(html `\n\t\t\t\t\t\t\t<header class=\"mm-toolbar-tooltip-header\">Add Topic ${this.renderShortcutKey('BranchAddSibling')}</header>\n\t\t\t\t\t\t\t<div class=\"mm-toolbar-tooltip-text\">Add a topic after selected topic</div>\n\t\t\t\t\t\t`, { alignPosition: 't' })}\n\t\t\t\t\t@click=${() => this.minderExported.commands.exec('BranchAddSibling')}\n\t\t\t\t>Topic</li>\n\n\t\t\t\t<li class=\"bar\"\n\t\t\t\t\t:class.disabled=${!this.minderExported.commands.canExec('BranchAddChild')}\n\t\t\t\t\t${tooltip(html `\n\t\t\t\t\t\t\t<header class=\"mm-toolbar-tooltip-header\">Add Sub Topic ${this.renderShortcutKey('BranchAddChild')}</header>\n\t\t\t\t\t\t\t<div class=\"mm-toolbar-tooltip-text\">Add a child topic to selected topic</div>\n\t\t\t\t\t\t`, { alignPosition: 't' })}\n\t\t\t\t\t@click=${() => this.minderExported.commands.exec('BranchAddChild')}\n\t\t\t\t>Sub Topic</li>\n\n\t\t\t\t<li class=\"bar\"\n\t\t\t\t\t:class.disabled=${!this.minderExported.commands.canExec('BranchDuplicate')}\n\t\t\t\t\t${tooltip(html `\n\t\t\t\t\t\t\t<header class=\"mm-toolbar-tooltip-header\">Duplicate Topic ${this.renderShortcutKey('BranchDuplicate')}</header>\n\t\t\t\t\t\t\t<div class=\"mm-toolbar-tooltip-text\">Duplicate selected topic</div>\n\t\t\t\t\t\t`, { alignPosition: 't' })}\n\t\t\t\t\t@click=${() => this.minderExported.commands.exec('BranchDuplicate')}\n\t\t\t\t>Duplicate</li>\n\t\t\t\t\t\n\t\t\t\t<li class=\"spliter\"></li>\n\n\t\t\t\t<li class=\"bar\"\n\t\t\t\t\t:class.disabled=${!(this.minderExported.commands.canExec('RelLineAdd') || this.minderExported.commands.canExec('RelLineAddBetween'))}\n\t\t\t\t\t${tooltip(html `\n\t\t\t\t\t\t\t<header class=\"mm-toolbar-tooltip-header\">Add Relationship Line ${this.renderShortcutKey('RelLineAdd')}</header>\n\t\t\t\t\t\t\t<div class=\"mm-toolbar-tooltip-text\">${this.minderExported.commands.canExec('RelLineAdd')\n            ? 'Add a relationship line from selected topic'\n            : 'Add a relationship line between selected topics'}</div>\n\t\t\t\t\t\t`, { alignPosition: 't' })}\n\t\t\t\t\t@click=${() => {\n            this.minderExported.commands.canExec('RelLineAdd')\n                ? this.minderExported.commands.exec('RelLineAdd')\n                : this.minderExported.commands.exec('RelLineAddBetween');\n        }}\n\t\t\t\t>Relationship</li>\n\n\t\t\t\t<li class=\"bar\"\n\t\t\t\t\t:class.disabled=${!this.minderExported.commands.canExec('SummaryAdd')}\n\t\t\t\t\t${tooltip(html `\n\t\t\t\t\t\t\t<header class=\"mm-toolbar-tooltip-header\">Add Summary ${this.renderShortcutKey('SummaryAdd')}</header>\n\t\t\t\t\t\t\t<div class=\"mm-toolbar-tooltip-text\">Add a summary to selected topics</div>\n\t\t\t\t\t\t`, { alignPosition: 't' })}\n\t\t\t\t\t@click=${() => this.minderExported.commands.exec('SummaryAdd')}\n\t\t\t\t>Summary</li>\n\t\t\t\t\n\t\t\t\t<li class=\"spliter\"></li>\n\t\t\t\t\n\t\t\t\t<li class=\"bar\"\n\t\t\t\t\t:class.disabled=${!this.minderExported.commands.canExec('Image')}\n\t\t\t\t\t@click=${this.pickImage}\n\t\t\t\t\t${tooltip(html `\n\t\t\t\t\t\t\t<header class=\"mm-toolbar-tooltip-header\">Add Image ${this.renderShortcutKey('Image')}</header>\n\t\t\t\t\t\t\t<div class=\"mm-toolbar-tooltip-text\">Pick a image from your driver for selected topic</div>\n\t\t\t\t\t\t`, { alignPosition: 't' })}\n\t\t\t\t>\n\t\t\t\t\tPick Image\n\t\t\t\t</li>\n\n\t\t\t\t<li class=\"bar\"\n\t\t\t\t\t:class.disabled=${!this.minderExported.commands.canExec('Hyperlink')}\n\t\t\t\t\t@click=${this.setHyperlink}\n\t\t\t\t\t${tooltip(html `\n\t\t\t\t\t\t\t<header class=\"mm-toolbar-tooltip-header\">Add Hyperlink ${this.renderShortcutKey('Hyperlink')}</header>\n\t\t\t\t\t\t\t<div class=\"mm-toolbar-tooltip-text\">Add a hyperlink to selected topic</div>\n\t\t\t\t\t\t`, { alignPosition: 't' })}\n\t\t\t\t>\n\t\t\t\t\tHyperlink\n\t\t\t\t</li>\n\n\t\t\t\t<li class=\"bar\"\n\t\t\t\t\t:class.disabled=${!this.minderExported.commands.canExec('Note')}\n\t\t\t\t\t@click=${this.setNote}\n\t\t\t\t\t${tooltip(html `\n\t\t\t\t\t\t\t<header class=\"mm-toolbar-tooltip-header\">Add Note ${this.renderShortcutKey('Note')}</header>\n\t\t\t\t\t\t\t<div class=\"mm-toolbar-tooltip-text\">Add note to selected topic</div>\n\t\t\t\t\t\t`, { alignPosition: 't' })}\n\t\t\t\t>\n\t\t\t\t\tNote\n\t\t\t\t</li>\n\n\t\t\t\t<li class=\"spliter\"></li>\n\n\t\t\t\t<!-- <li class=\"bar\"\n\t\t\t\t\t:class.disabled=${!this.minderExported.commands.canExec('BoundaryAdd')}\n\t\t\t\t\t@click=${this.addBoundary}\n\t\t\t\t\t${tooltip(html `\n\t\t\t\t\t\t\t<header class=\"mm-toolbar-tooltip-header\">Add Boundary ${this.renderShortcutKey('Note')}</header>\n\t\t\t\t\t\t\t<div class=\"mm-toolbar-tooltip-text\">Add boundary to selected topics</div>\n\t\t\t\t\t\t`, { alignPosition: 't' })}\n\t\t\t\t>\n\t\t\t\t\tBoundary\n\t\t\t\t</li> -->\n\n\t\t\t\t<!-- <li class=\"spliter\"></li> -->\n\t\t\t\t\n\t\t\t\t<li class=\"bar\"\n\t\t\t\t\t@click=${this.doPresentation}\n\t\t\t\t\t${tooltip(html `\n\t\t\t\t\t\t\t<header class=\"mm-toolbar-tooltip-header\">Presentation</header>\n\t\t\t\t\t\t\t<div class=\"mm-toolbar-tooltip-text\">Click to start presentation</div>\n\t\t\t\t\t\t`, { alignPosition: 't' })}\n\t\t\t\t>\n\t\t\t\t\tPresentation\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</template>\n\t\t`;\n    }\n    renderShortcutKey(commandName) {\n        let keys = this.minderExported.commands.getShortcutKeys(commandName);\n        if (!keys) {\n            return '';\n        }\n        else {\n            return html `<span>(${keys.join(', ')})</span>`;\n        }\n    }\n    async pickImage() {\n        let file = await selectFile('image/*');\n        if (!file) {\n            return;\n        }\n        let uri = URL.createObjectURL(file);\n        let image = await loadImage(uri);\n        let size = {\n            width: image.naturalWidth,\n            height: image.naturalHeight,\n        };\n        this.setImage(uri, file.name, size);\n    }\n    setImage(image, name, naturalSize) {\n        let maxSize = 300;\n        let size = undefined;\n        // 宽高最大值不能超过 300.\n        // s * w <= 300 => s <= 300 / w\n        if (naturalSize) {\n            let scaling = Math.min(maxSize / naturalSize.width, maxSize / naturalSize.height);\n            size = { ...naturalSize };\n            size.width = Math.round(size.width * scaling);\n            size.height = Math.round(size.height * scaling);\n        }\n        this.minderExported.commands.exec('Image', {\n            url: image || undefined,\n            title: name || undefined,\n            naturalSize,\n            size\n        });\n    }\n    async setHyperlink() {\n        var _a;\n        let link = await dialog.prompt('Input hyperlink location:', {\n            defaultValue: ((_a = this.minderExported.commands.queryValue('Hyperlink')) === null || _a === void 0 ? void 0 : _a.url) || '',\n        });\n        if (link !== undefined) {\n            this.minderExported.commands.exec('Hyperlink', link || undefined, undefined);\n        }\n    }\n    async setNote() {\n        let note = await dialog.prompt('Input note:', {\n            defaultValue: this.minderExported.commands.queryValue('Note') || '',\n            inputType: 'textarea',\n        });\n        if (note !== undefined) {\n            this.minderExported.commands.exec('Note', note || undefined);\n        }\n    }\n    async addBoundary() {\n        this.minderExported.commands.exec('BoundaryAdd');\n    }\n    doPresentation() {\n        this.minderExported.presentation.start({\n            author: 'FF',\n        }, {\n            enterFullscreen: true,\n        });\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\ndefine('mm-birdeye-previewer', class extends Component {\n    onCreated() {\n        let previewer = this.minderExported.requestBirdEyePreview();\n        previewer.appendTo(this.el);\n    }\n    render() {\n        return html `\n\t\t\t<template class=\"mm-birdeye-previewer\" />\n\t\t`;\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\ndefine('mm-configuration-node-shape', class extends Component {\n    render() {\n        var _a;\n        return html `\n\t\t<template class=\"mm-configuration-node-shape\">\n\t\t\t<header>Node Shape Style</header>\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeShape')}\n\t\t\t>\n\t\t\t\t<mm-shape-select\n\t\t\t\t\t.allowedShapeNames=${this.minderExported.getAllowedShapeNames()}\n\t\t\t\t\t.shapeName=${(_a = this.minderExported.commands.queryValue('NodeShape')) !== null && _a !== void 0 ? _a : 'rect'}\n\t\t\t\t\t@@select=${this.setShape}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Shape</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeFillColor')}\n\t\t\t>\n\t\t\t\t<mm-color-select\n\t\t\t\t\t.color=${this.minderExported.commands.queryValue('NodeFillColor')}\n\t\t\t\t\t@@select=${this.setFillColor}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Fill Color</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeStrokeWidth')}\n\t\t\t>\n\t\t\t\t<mm-border-width-select\n\t\t\t\t\t.width=${this.minderExported.commands.queryValue('NodeStrokeWidth')}\n\t\t\t\t\t@@select=${this.setStrokeWidth}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Border Width</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeStrokeColor')}\n\t\t\t>\n\t\t\t\t<mm-color-select\n\t\t\t\t\t.color=${this.minderExported.commands.queryValue('NodeStrokeColor')}\n\t\t\t\t\t@@select=${this.setStrokeColor}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Stroke Color</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeRadius')}\n\t\t\t>\n\t\t\t\t<f-slider\n\t\t\t\t\tclass=\"mm-radius-slider\"\n\t\t\t\t\t.value=${this.minderExported.commands.queryValue('NodeRadius') || 0}\n\t\t\t\t\t.max=${50}\n\t\t\t\t\t.step=${1}\n\t\t\t\t\t@@change=${this.setRadius}\n\t\t\t\t\t@@dragstart=${this.setRadiusStart}\n\t\t\t\t\t@@dragend=${this.setRadiusEnd}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Radius</header>\n\t\t\t</section>\n\n\n\t\t</template>\n\t\t`;\n    }\n    setShape(shape) {\n        this.minderExported.commands.exec('NodeShape', shape);\n    }\n    setRadiusStart() {\n        this.minderExported.history.startRecording();\n    }\n    setRadiusEnd() {\n        this.minderExported.history.endRecording();\n    }\n    setRadius(radius) {\n        this.minderExported.commands.exec('NodeRadius', radius);\n    }\n    setFillColor(color) {\n        this.minderExported.commands.exec('NodeFillColor', color);\n    }\n    setStrokeWidth(width) {\n        this.minderExported.commands.exec('NodeStrokeWidth', width);\n    }\n    setStrokeColor(color) {\n        this.minderExported.commands.exec('NodeStrokeColor', color);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup, tooltip } from '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\ndefine('mm-shape-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.allowedShapeNames = [];\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-shape-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', cacheable: true })}\n\t\t>\n\t\t\t<mm-shape\n\t\t\t\t.name=${this.shapeName}\n\t\t\t\t${tooltip(this.shapeName, { alignPosition: 'r' })}\n\t\t\t/>\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `\n\t\t<mm-shape-menu\n\t\t\t.herizontal\n\t\t\t.allowedShapeNames=${this.allowedShapeNames}\n\t\t\t.shapeName=${this.shapeName}\n\t\t\t@@select=${this.onSelectShape}\n\t\t/>`;\n    }\n    onSelectShape(shapeName) {\n        this.shapeName = shapeName;\n        this.emit('select', shapeName);\n    }\n});\ndefine('mm-shape', class extends Component {\n    onReady() {\n        this.watchImmediately(() => this.name, () => this.updateSVG());\n    }\n    async updateSVG() {\n        var _a;\n        let svg = await MinderExported.shapePreviewer.renderSVG(this.name);\n        (_a = this.el.querySelector('svg')) === null || _a === void 0 ? void 0 : _a.remove();\n        this.el.append(svg.element);\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-shape\" />\n\t\t`;\n    }\n});\ndefine('mm-shape-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.allowedShapeNames = [];\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-shape-menu\">\n\t\t\t<ul>\n\t\t\t${MinderExported.ShapeNames.map(shapeName => html `\n\t\t\t\t\t<li \n\t\t\t\t\t\t:class.active=${shapeName === this.shapeName}\n\t\t\t\t\t\t:enable=${this.allowedShapeNames.includes(shapeName)}\n\t\t\t\t\t\t${tooltip(shapeName, { alignPosition: 't' })}\n\t\t\t\t\t\t@click=${() => this.onClickShape(shapeName)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<mm-shape\n\t\t\t\t\t\t\t.name=${shapeName}\n\n\t\t\t\t\t\t/>\n\t\t\t\t\t</li>\n\t\t\t\t`)}\n\t\t\t</ul>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    onClickShape(shapeName) {\n        this.emit('select', shapeName);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup } from '@pucelle/flit-ui';\ndefine('mm-border-width-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.width = 0;\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-border-width-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup' })}\n\t\t>\n\t\t\t<mm-border-width .width=${this.width} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `<mm-border-width-menu\n\t\t\t.herizontal\n\t\t\t.width=${this.width}\n\t\t\t@@select=${this.onSelectBorderWidth}\n\t\t/>`;\n    }\n    onSelectBorderWidth(borderWidth) {\n        this.width = borderWidth;\n        this.emit('select', borderWidth);\n    }\n});\ndefine('mm-border-width', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.width = 0;\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-border-width\">\n\t\t\t<div :style.height.px=${this.width} />\n\t\t</template>\n\t\t`;\n    }\n});\ndefine('mm-border-width-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.width = 0;\n        this.BorderWidths = [\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n        ];\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-border-width-menu\">\n\t\t\t${this.BorderWidths.map(borderWidth => html `\n\t\t\t\t\t<mm-border-width\n\t\t\t\t\t\t.width=${borderWidth}\n\t\t\t\t\t\t:class.active=${borderWidth === this.width}\n\t\t\t\t\t\t@click=${() => this.onClickBorderWidth(borderWidth)}\n\t\t\t\t\t/>\n\t\t\t\t`)}\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    onClickBorderWidth(borderWidth) {\n        this.emit('select', borderWidth);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { dialog, PopupBinding, TooltipBinding } from '@pucelle/flit-ui';\ndefine('mm-configuration-node-content', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.iconMenuPopedUp = false;\n        this.priorityIconMenuPopedUp = false;\n        this.progressIconMenuPopedUp = false;\n    }\n    onCreated() {\n        this.bindClickContentIconEvent();\n        this.bindContentHyperlinkHoverEvent();\n        this.bindContentNoteHoverEvent();\n    }\n    bindClickContentIconEvent() {\n        this.minderExported.on('content-icon-click', (image, _node, type) => {\n            if (type === 'icon') {\n                this.showIconMenu(image.element.parentNode);\n            }\n            else if (type === 'priority') {\n                this.showPriorityIconMenu(image.element);\n            }\n            else if (type === 'progress') {\n                this.showProgressIconMenu(image.element);\n            }\n        });\n    }\n    bindContentHyperlinkHoverEvent() {\n        this.minderExported.on('content-hyperlink-hover-in', (hyperlinkIcon, node) => {\n            this.showHyperlinkTooltip(hyperlinkIcon.element, node);\n        });\n    }\n    bindContentNoteHoverEvent() {\n        this.minderExported.on('content-note-hover-in', (noteIcon, node) => {\n            this.showNoteTooltip(noteIcon.element, node);\n        });\n        this.minderExported.on('content-note-click', () => {\n            this.setNote();\n        });\n    }\n    showIconMenu(target) {\n        if (this.iconMenuPopedUp) {\n            return;\n        }\n        let renderFn = () => {\n            var _a;\n            let iconNames = (_a = this.minderExported.commands.queryValue('Icon')) !== null && _a !== void 0 ? _a : [];\n            return html `\n\t\t\t\t<mm-icon-menu\n\t\t\t\t\t.iconNames=${iconNames}\n\t\t\t\t\t@@select=${this.toggleIcon}\n\t\t\t\t/>\n\t\t\t`;\n        };\n        let binding = new PopupBinding(target, this);\n        let options = { trigger: 'click' };\n        binding.update(renderFn, options);\n        binding.showPopup();\n        this.on('updated', () => {\n            binding.update(renderFn, options);\n        });\n        binding.on('openedStateChange', (opened) => {\n            if (opened === false) {\n                binding.remove();\n                this.iconMenuPopedUp = false;\n            }\n        });\n        this.iconMenuPopedUp = true;\n    }\n    showPriorityIconMenu(target) {\n        if (this.priorityIconMenuPopedUp) {\n            return;\n        }\n        let renderFn = () => {\n            let priority = this.minderExported.commands.queryValue('Priority');\n            return html `\n\t\t\t\t<mm-icon-priority-menu\n\t\t\t\t\t.priority=${priority}\n\t\t\t\t\t@@select=${this.setPriority}\n\t\t\t\t/>\n\t\t\t`;\n        };\n        let binding = new PopupBinding(target, this);\n        let options = { trigger: 'click' };\n        binding.update(renderFn, options);\n        binding.showPopup();\n        this.on('updated', () => {\n            binding.update(renderFn, options);\n        });\n        binding.on('openedStateChange', (opened) => {\n            if (opened === false) {\n                binding.remove();\n                this.priorityIconMenuPopedUp = false;\n            }\n        });\n        this.priorityIconMenuPopedUp = true;\n    }\n    showProgressIconMenu(target) {\n        if (this.progressIconMenuPopedUp) {\n            return;\n        }\n        let renderFn = () => {\n            let progress = this.minderExported.commands.queryValue('Progress');\n            return html `\n\t\t\t\t<mm-icon-progress-menu\n\t\t\t\t\t.progress=${progress}\n\t\t\t\t\t@@select=${this.setProgress}\n\t\t\t\t/>\n\t\t\t`;\n        };\n        let binding = new PopupBinding(target, this);\n        let options = { trigger: 'click' };\n        binding.update(renderFn, options);\n        binding.showPopup();\n        this.on('updated', () => {\n            binding.update(renderFn, options);\n        });\n        binding.on('openedStateChange', (opened) => {\n            if (opened === false) {\n                binding.remove();\n                this.progressIconMenuPopedUp = false;\n            }\n        });\n        this.progressIconMenuPopedUp = true;\n    }\n    showHyperlinkTooltip(target, node) {\n        let tooltip = new TooltipBinding(target, this);\n        let title = node.data.data.hyperlinkTitle\n            ? node.data.data.hyperlink + ` (${node.data.data.hyperlink})`\n            : node.data.data.hyperlink;\n        tooltip.update(title, { trigger: 'hover', key: 'content-tooltip', alignPosition: 'b' });\n        tooltip.showPopup();\n    }\n    showNoteTooltip(target, node) {\n        let tooltip = new TooltipBinding(target, this);\n        let note = node.data.data.note;\n        tooltip.update(note, { trigger: 'hover', key: 'content-tooltip', alignPosition: 'b' });\n        tooltip.showPopup();\n    }\n    render() {\n        var _a, _b, _c;\n        return html `\n\t\t<template class=\"mm-configuration-node-content\">\n\t\t\t<header>Node Content</header>\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('Icon')}\n\t\t\t>\n\t\t\t\t<mm-icon-select\n\t\t\t\t\t.iconNames=${(_a = this.minderExported.commands.queryValue('Icon')) !== null && _a !== void 0 ? _a : []}\n\t\t\t\t\t@@select=${this.toggleIcon}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Icons</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('Icon')}\n\t\t\t>\n\t\t\t\t<mm-icon-priority-select\n\t\t\t\t\t.priority=${(_b = this.minderExported.commands.queryValue('Priority')) !== null && _b !== void 0 ? _b : -1}\n\t\t\t\t\t@@select=${this.setPriority}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Priority</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('Icon')}\n\t\t\t>\n\t\t\t\t<mm-icon-progress-select\n\t\t\t\t\t.progress=${(_c = this.minderExported.commands.queryValue('Progress')) !== null && _c !== void 0 ? _c : -1}\n\t\t\t\t\t@@select=${this.setProgress}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Progress</header>\n\t\t\t</section>\n\t\t</template>\n\t\t`;\n    }\n    toggleIcon(iconName, willAdd) {\n        if (willAdd) {\n            this.minderExported.commands.exec('AddIcon', iconName);\n        }\n        else {\n            this.minderExported.commands.exec('RemoveIcon', iconName);\n        }\n    }\n    setPriority(priority) {\n        let currentPriority = this.minderExported.commands.queryValue('Priority');\n        this.minderExported.commands.exec('Priority', priority === currentPriority ? undefined : priority);\n    }\n    setProgress(progress) {\n        let currentProgress = this.minderExported.commands.queryValue('Progress');\n        this.minderExported.commands.exec('Progress', progress === currentProgress ? undefined : progress);\n    }\n    async setNote() {\n        let note = await dialog.prompt('Input note:', {\n            defaultValue: this.minderExported.commands.queryValue('Note') || '',\n            inputType: 'textarea',\n        });\n        if (note !== undefined) {\n            this.minderExported.commands.exec('Note', note || undefined);\n        }\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup, tooltip } from '@pucelle/flit-ui';\nimport { IconURLMap } from '../resources/icons';\ndefine('mm-icon-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.iconNames = [];\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-icon-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', cacheable: true })}\n\t\t>\n\t\t\t${this.iconNames.map(name => html `\n\t\t\t\t\t<mm-icon .name=${name} />\n\t\t\t\t`)}\n\t\t\t\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `\n\t\t<mm-icon-menu\n\t\t\t.herizontal\n\t\t\t.iconNames=${this.iconNames}\n\t\t\t@@select=${this.onSelectIcon}\n\t\t/>\n\t\t`;\n    }\n    onSelectIcon(iconName, willAdd) {\n        this.emit('select', iconName, willAdd);\n    }\n});\ndefine('mm-icon', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.name = '';\n    }\n    render() {\n        return html `\n\t\t\t<template class=\"mm-icon\">\n\t\t\t\t<img src=${IconURLMap[this.name]}>\n\t\t\t</template>\n\t\t`;\n    }\n});\ndefine('mm-icon-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.iconNames = [];\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-icon-menu\">\n\t\t\t${Object.keys(IconURLMap).map(icon => html `\n\t\t\t\t\t<mm-icon\n\t\t\t\t\t\t.name=${icon}\n\t\t\t\t\t\t:class.active=${this.iconNames.includes(icon)}\n\t\t\t\t\t\t${tooltip(`Icon ${icon}`, { alignPosition: 't' })}\n\t\t\t\t\t\t@click=${() => this.onClickIcon(icon)}\n\t\t\t\t\t/>\n\t\t\t\t`)}\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    onClickIcon(iconName) {\n        if (this.iconNames.includes(iconName)) {\n            this.emit('select', iconName, false);\n        }\n        else {\n            this.emit('select', iconName, true);\n        }\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup, tooltip } from '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\ndefine('mm-icon-priority-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.priority = 0;\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-icon-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', cacheable: true })}\n\t\t>\n\t\t\t<mm-icon-priority .priority=${this.priority} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `\n\t\t<mm-icon-priority-menu\n\t\t\t.herizontal\n\t\t\t.priority=${this.priority}\n\t\t\t@@select=${this.onSelectIcon}\n\t\t/>\n\t\t`;\n    }\n    onSelectIcon(priority) {\n        this.emit('select', priority);\n    }\n});\ndefine('mm-icon-priority', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.priority = 0;\n    }\n    onCreated() {\n        this.watchImmediately(() => this.priority, () => {\n            var _a;\n            (_a = this.el.querySelector('svg')) === null || _a === void 0 ? void 0 : _a.remove();\n            this.el.append(MinderExported.IconPreviewer.renderPriority(this.priority, 24).element);\n        });\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-icon\" />\n\t\t`;\n    }\n});\ndefine('mm-icon-priority-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.priority = 0;\n    }\n    render() {\n        let count = MinderExported.PriorityColors.length;\n        let priorities = [];\n        for (let i = 0; i < count; i++) {\n            priorities[i] = i + 1;\n        }\n        return html `\n\t\t<template class=\"mm-icon-menu\">\n\t\t\t${priorities.map(priority => html `\n\t\t\t\t\t<mm-icon-priority\n\t\t\t\t\t\t.priority=${priority}\n\t\t\t\t\t\t:class.active=${this.priority === priority}\n\t\t\t\t\t\t${tooltip(`Priority ${priority}`, { alignPosition: 't' })}\n\t\t\t\t\t\t@click=${() => this.onClickIcon(priority)}\n\t\t\t\t\t/>\n\t\t\t\t`)}\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    onClickIcon(priority) {\n        this.emit('select', priority);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup, tooltip } from '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\ndefine('mm-icon-progress-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.progress = 0;\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-icon-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', cacheable: true })}\n\t\t>\n\t\t\t<mm-icon-progress .progress=${this.progress} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `\n\t\t<mm-icon-progress-menu\n\t\t\t.herizontal\n\t\t\t.progress=${this.progress}\n\t\t\t@@select=${this.onSelectIcon}\n\t\t/>\n\t\t`;\n    }\n    onSelectIcon(progress) {\n        this.emit('select', progress);\n    }\n});\ndefine('mm-icon-progress', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.progress = -1;\n    }\n    onCreated() {\n        this.watchImmediately(() => this.progress, () => {\n            var _a;\n            (_a = this.el.querySelector('svg')) === null || _a === void 0 ? void 0 : _a.remove();\n            this.el.append(MinderExported.IconPreviewer.renderProgress(this.progress, 24).element);\n        });\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-icon\" />\n\t\t`;\n    }\n});\ndefine('mm-icon-progress-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.progress = 0;\n    }\n    render() {\n        let count = 8;\n        let priorities = [];\n        for (let i = 0; i <= count; i++) {\n            priorities[i] = i;\n        }\n        return html `\n\t\t<template class=\"mm-icon-menu\">\n\t\t\t${priorities.map(progress => html `\n\t\t\t\t\t<mm-icon-progress\n\t\t\t\t\t\t.progress=${progress}\n\t\t\t\t\t\t:class.active=${this.progress === progress}\n\t\t\t\t\t\t${tooltip(`Priority ${progress}`, { alignPosition: 't' })}\n\t\t\t\t\t\t@click=${() => this.onClickIcon(progress)}\n\t\t\t\t\t/>\n\t\t\t\t`)}\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    onClickIcon(progress) {\n        this.emit('select', progress);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { PopupBinding } from '@pucelle/flit-ui';\ndefine('mm-configuration-node-text', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.textEditorPopupBinding = null;\n        this.katexEditorPopupBinding = null;\n    }\n    onCreated() {\n        this.bindTextEditorEnterEvent();\n        this.bindClickingKatexEvent();\n    }\n    bindTextEditorEnterEvent() {\n        this.minderExported.on('editor-enter', (editorElement) => {\n            this.showEditorToolbarMenu(editorElement);\n        });\n        this.minderExported.on('editor-exit', () => {\n            this.hideEditorToolbarMenu();\n        });\n    }\n    showEditorToolbarMenu(target) {\n        if (this.textEditorPopupBinding) {\n            this.textEditorPopupBinding.showPopup();\n            return;\n        }\n        let renderFn = () => {\n            return html `\n\t\t\t\t<mm-text-editor-toolbar\n\t\t\t\t\t.minderExported=${this.minderExported}\n\t\t\t\t\t@mousedown.stop.prevent=${() => { }}\n\t\t\t\t\t@@add-match-expression=${() => this.showKatexEditPopup(this.minderExported.getTextEditorElement(), '')}\n\t\t\t\t/>\n\t\t\t`;\n        };\n        let binding = new PopupBinding(target, this);\n        let options = { trigger: 'none' };\n        binding.update(renderFn, options);\n        binding.showPopup();\n        this.on('updated', () => {\n            binding.update(renderFn, options);\n        });\n        this.minderExported.on('editor-area-updated', this.onEditorAreaUpdatedForToolbar, this);\n        this.textEditorPopupBinding = binding;\n    }\n    hideEditorToolbarMenu() {\n        var _a;\n        (_a = this.textEditorPopupBinding) === null || _a === void 0 ? void 0 : _a.remove();\n        this.minderExported.off('editor-area-updated', this.onEditorAreaUpdatedForToolbar, this);\n        this.textEditorPopupBinding = null;\n    }\n    onEditorAreaUpdatedForToolbar() {\n        // 触发 popup 重绘.\n        this.update();\n    }\n    bindClickingKatexEvent() {\n        this.minderExported.on('editor-katex-focus', (katexEl, source) => {\n            this.showKatexEditPopup(katexEl, source);\n        });\n    }\n    showKatexEditPopup(katexEl, source) {\n        this.minderExported.lockTextEditor();\n        if (this.katexEditorPopupBinding) {\n            if (this.katexEditorPopupBinding.getTriggerElement() === katexEl) {\n                this.katexEditorPopupBinding.showPopup();\n                return;\n            }\n            else {\n                this.hideKatexEditPopup();\n            }\n        }\n        let renderFn = () => {\n            return html `\n\t\t\t\t<mm-text-katex-editor\n\t\t\t\t\t.value=${source}\n\t\t\t\t\t@keydown=${this.onKatexEditorKeyDown}\n\t\t\t\t\t@@change=${this.submitKatex}\n\t\t\t\t\t@@cancel=${this.hideKatexEditPopup}\n\t\t\t\t/>\n\t\t\t`;\n        };\n        let binding = new PopupBinding(katexEl, this);\n        let options = { trigger: 'none' };\n        binding.update(renderFn, options);\n        binding.showPopup();\n        this.on('updated', () => {\n            binding.update(renderFn, options);\n        });\n        this.minderExported.on('editor-area-updated', this.onEditorAreaUpdatedForKatex, this);\n        this.katexEditorPopupBinding = binding;\n    }\n    hideKatexEditPopup() {\n        var _a;\n        this.minderExported.unlockTextEditor();\n        this.minderExported.off('editor-area-updated', this.onEditorAreaUpdatedForKatex, this);\n        (_a = this.katexEditorPopupBinding) === null || _a === void 0 ? void 0 : _a.remove();\n        this.katexEditorPopupBinding = null;\n    }\n    onEditorAreaUpdatedForKatex() {\n        // 触发 popup 重绘.\n        this.update();\n    }\n    render() {\n        var _a, _b, _c, _d, _e;\n        return html `\n\t\t<template class=\"mm-configuration-node-content\">\n\t\t\t<header>Node Text Style</header>\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeTextFontFamily')}\n\t\t\t>\n\t\t\t\t<mm-font-family-select\n\t\t\t\t\t.fontFamily=${(_a = this.minderExported.commands.queryValue('NodeTextFontFamily')) !== null && _a !== void 0 ? _a : ''}\n\t\t\t\t\t@@select=${this.setFontFamily}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Font Family</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeTextFontSize')}\n\t\t\t>\n\t\t\t\t<mm-font-size-select\n\t\t\t\t\t.fontSize=${(_b = this.minderExported.commands.queryValue('NodeTextFontSize')) !== null && _b !== void 0 ? _b : ''}\n\t\t\t\t\t@@select=${this.setFontSize}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Font Size</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeTextLineHeight')}\n\t\t\t>\n\t\t\t\t<mm-line-height-select\n\t\t\t\t\t.fontSize=${(_c = this.minderExported.commands.queryValue('NodeTextLineHeight')) !== null && _c !== void 0 ? _c : ''}\n\t\t\t\t\t@@select=${this.setLineHeight}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Line Height</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeTextColor')}\n\t\t\t>\n\t\t\t\t<mm-color-select\n\t\t\t\t\t.color=${this.minderExported.commands.queryValue('NodeTextColor')}\n\t\t\t\t\t@@select=${this.setTextColor}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Text Color</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeTextAlign')}\n\t\t\t>\n\t\t\t\t<mm-text-align-select\n\t\t\t\t\t.textAlign=${(_d = this.minderExported.commands.queryValue('NodeTextAlign')) !== null && _d !== void 0 ? _d : 'center'}\n\t\t\t\t\t@@select=${this.setTextAlign}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Text Align</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeTextVerticalAlign')}\n\t\t\t>\n\t\t\t\t<mm-text-vertical-align-select\n\t\t\t\t\t.textVerticalAlign=${(_e = this.minderExported.commands.queryValue('NodeTextVerticalAlign')) !== null && _e !== void 0 ? _e : 'center'}\n\t\t\t\t\t@@select=${this.setTextVerticalAlign}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Text Vertical Align</header>\n\t\t\t</section>\n\n\t\t</template>\n\t\t`;\n    }\n    setFontFamily(fontFamily) {\n        this.minderExported.commands.exec('NodeTextFontFamily', fontFamily);\n    }\n    setFontSize(fontSize) {\n        this.minderExported.commands.exec('NodeTextFontSize', fontSize);\n    }\n    setLineHeight(lineHeight) {\n        this.minderExported.commands.exec('NodeTextLineHeight', lineHeight);\n    }\n    setTextColor(color) {\n        this.minderExported.commands.exec('NodeTextColor', color);\n    }\n    setTextAlign(textAlign) {\n        this.minderExported.commands.exec('NodeTextAlign', textAlign);\n    }\n    setTextVerticalAlign(textAlign) {\n        this.minderExported.commands.exec('NodeTextVerticalAlign', textAlign);\n    }\n    onKatexEditorKeyDown(e) {\n        if (e.key === 'Escape') {\n            this.hideKatexEditPopup();\n        }\n    }\n    submitKatex(value) {\n        this.minderExported.commands.exec('TextSetKatex', value);\n        this.hideKatexEditPopup();\n    }\n});\n","import { define, html } from '@pucelle/flit';\nimport { Popup, tooltip } from '@pucelle/flit-ui';\ndefine('mm-text-editor-toolbar', class extends Popup {\n    render() {\n        let style = this.minderExported.getTextEditorSelectionStyle() || {};\n        return html `\n\t\t<template class=\"mm-text-editor-toolbar\">\n\t\t\t<ul>\n\t\t\t\t<li\n\t\t\t\t\t:style.font-weight=${style['font-weight'] || ''}\n\t\t\t\t\t:class.active=${style['font-weight'] === 'bold'}\n\t\t\t\t\t:enable=${this.canExec('TextBold')}\n\t\t\t\t\t${tooltip(html `Toggle Bold ${this.renderShortcutKey('TextBold')}`, { alignPosition: 'b' })}\n\t\t\t\t\t@click=${() => this.exec('TextBold')}\n\t\t\t\t>\n\t\t\t\t\tB\n\t\t\t\t</li>\n\n\t\t\t\t<li\n\t\t\t\t\t:style.font-style=${style['font-style'] || ''}\n\t\t\t\t\t:class.active=${style['font-style'] === 'italic'}\n\t\t\t\t\t:enable=${this.canExec('TextItalic')}\n\t\t\t\t\t${tooltip(html `Toggle Italic ${this.renderShortcutKey('TextItalic')}`, { alignPosition: 'b' })}\n\t\t\t\t\t@click=${() => this.exec('TextItalic')}\n\t\t\t\t>\n\t\t\t\t\tI\n\t\t\t\t</li>\n\n\t\t\t\t<li\n\t\t\t\t\t:style.text-decoration=${style['text-underline'] ? 'underline' : ''}\n\t\t\t\t\t:class.active=${style['text-underline'] ? 'underline' : ''}\n\t\t\t\t\t:enable=${this.canExec('TextUnderline')}\n\t\t\t\t\t${tooltip(html `Toggle Underline ${this.renderShortcutKey('TextUnderline')}`, { alignPosition: 'b' })}\n\t\t\t\t\t@click=${() => this.exec('TextUnderline')}\n\t\t\t\t>\n\t\t\t\t\tU\n\t\t\t\t</li>\n\n\t\t\t\t<li\n\t\t\t\t\t:style.text-decoration=${style['text-line-through'] ? 'line-through' : ''}\n\t\t\t\t\t:class.active=${style['text-line-through'] ? 'line-through' : ''}\n\t\t\t\t\t:enable=${this.canExec('TextStrikeThrough')}\n\t\t\t\t\t${tooltip(html `Toggle Strike Through ${this.renderShortcutKey('TextStrikeThrough')}`, { alignPosition: 'b' })}\n\t\t\t\t\t@click=${() => this.exec('TextStrikeThrough')}\n\t\t\t\t>\n\t\t\t\t\tS\n\t\t\t\t</li>\n\n\t\t\t\t<li\n\t\t\t\t\t:enable=${this.canExec('TextClearStyle')}\n\t\t\t\t\t${tooltip(html `Clear Style ${this.renderShortcutKey('TextClearStyle')}`, { alignPosition: 'b' })}\n\t\t\t\t\t@click=${() => this.exec('TextClearStyle')}\n\t\t\t\t>\n\t\t\t\t\tC\n\t\t\t\t</li>\n\n\t\t\t\t<li\n\t\t\t\t\t:enable=${this.canExec('TextSetKatex')}\n\t\t\t\t\t${tooltip(html `Add Math Expression ${this.renderShortcutKey('TextSetKatex')}`, { alignPosition: 'b' })}\n\t\t\t\t\t@click=${this.addMathExpression}\n\t\t\t\t>\n\t\t\t\t\tM\n\t\t\t\t</li>\n\n\t\t\t</ul>\n\t\t</template>\n\t\t`;\n    }\n    onConnected() {\n        this.minderExported.on('editor-update-selection', this.update, this);\n    }\n    onDisconnected() {\n        this.minderExported.off('editor-update-selection', this.update, this);\n    }\n    renderShortcutKey(commandName) {\n        let keys = this.minderExported.commands.getShortcutKeys(commandName);\n        if (!keys) {\n            return '';\n        }\n        else {\n            return html `<span>(${keys.join(', ')})</span>`;\n        }\n    }\n    exec(commandName) {\n        this.minderExported.commands.exec(commandName);\n    }\n    canExec(commandName) {\n        return this.minderExported.commands.canExec(commandName);\n    }\n    addMathExpression() {\n        this.emit('add-match-expression');\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup } from '@pucelle/flit-ui';\ndefine('mm-font-family-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.fontFamily = '';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-font-family-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', canShrinkInY: true })}\n\t\t>\n\t\t\t<mm-font-family .fontFamily=${this.fontFamily} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `<mm-font-family-menu\n\t\t\t.herizontal\n\t\t\t.fontFamily=${this.fontFamily}\n\t\t\t@@select=${this.onSelectFontFamily}\n\t\t/>`;\n    }\n    onSelectFontFamily(fontFamily) {\n        this.fontFamily = fontFamily;\n        this.emit('select', fontFamily);\n    }\n});\ndefine('mm-font-family', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.fontFamily = '';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-font-family\"\n\t\t\t:style.font-family=${this.fontFamily}\n\t\t>\n\t\t\t${this.fontFamily || 'Default Font'}\n\t\t</template>\n\t\t`;\n    }\n});\ndefine('mm-font-family-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.FontFamilies = [\n            'Arial',\n            'Arial Black',\n            'Book Antiqua',\n            'Charcoal',\n            'Comic Sans MS',\n            'Consolas',\n            'Courier',\n            'Courier New',\n            'cursive',\n            'Gadget',\n            'Geneva',\n            'Georgia',\n            'Helvetica',\n            'Impact',\n            'Lucida Grande',\n            'Lucida Sans Unicode',\n            'Monaco',\n            'Palatino',\n            'Palatino Linotype',\n            'sans-serif',\n            'Tahoma',\n            'Times',\n            'Times New Roman',\n            'Trebuchet MS',\n            'Verdana',\n            \"ADAM.CG PRO\",\n            \"Abhaya Libre\",\n            \"Agency FB\",\n            \"Aladin\",\n            \"Alegreya Sans SC\",\n            \"Amandella Script\",\n            \"Arizonia\",\n            \"Bad Script\",\n            \"Baloo Bhaina 2\",\n            \"Barlow\",\n            \"Barrio\",\n            \"Berlin Sans FB\",\n            \"BlowBrush\",\n            \"Britannic\",\n            \"Cabin Sketch\",\n            \"Cursive Serif\",\n            \"Dancing Script\",\n            \"Dolce Vita\",\n            \"Hamurz Free Version\",\n            \"KG Broken Vessels Sketch\",\n            \"Kaushan Script\",\n            \"Montserrat Alternates\",\n            \"NISCRIPT\",\n            \"Permanent Marker\",\n            \"Playlist\",\n            \"SJNMDJW\",\n            \"Source Sans Pro\"\n        ];\n        this.fontFamily = '';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-font-family-menu\">\n\t\t\t<div class=\"mm-font-family-menu-scroller\">\n\t\t\t\t${this.FontFamilies.map(fontFamily => html `\n\t\t\t\t\t\t<mm-font-family\n\t\t\t\t\t\t\t.fontFamily=${fontFamily}\n\t\t\t\t\t\t\t:class.active=${fontFamily === this.fontFamily}\n\t\t\t\t\t\t\t@click=${() => this.selectFontFamily(fontFamily)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t`)}\n\t\t\t</div>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    selectFontFamily(fontFamily) {\n        this.emit('select', fontFamily);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup } from '@pucelle/flit-ui';\ndefine('mm-font-size-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.fontSize = 14;\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-font-size-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', canShrinkInY: true })}\n\t\t>\n\t\t\t<mm-font-size .fontSize=${this.fontSize} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `<mm-font-size-menu\n\t\t\t.herizontal\n\t\t\t.fontSize=${this.fontSize}\n\t\t\t@@select=${this.onSelectFontSize}\n\t\t/>`;\n    }\n    onSelectFontSize(fontSize) {\n        this.fontSize = fontSize;\n        this.emit('select', fontSize);\n    }\n});\ndefine('mm-font-size', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.fontSize = 14;\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-font-size\"\n\t\t\t:style.font-size.px=${this.fontSize}\n\t\t>\n\t\t\t${this.fontSize}\n\t\t</template>\n\t\t`;\n    }\n});\ndefine('mm-font-size-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.FontSizes = [\n            12,\n            13,\n            14,\n            16,\n            18,\n            20,\n            24,\n            28,\n            32,\n            36,\n            40,\n        ];\n        this.fontSize = 14;\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-font-size-menu\">\n\t\t\t<div class=\"mm-font-size-menu-scroller\">\n\t\t\t\t${this.FontSizes.map(fontSize => html `\n\t\t\t\t\t\t<mm-font-size\n\t\t\t\t\t\t\t.fontSize=${fontSize}\n\t\t\t\t\t\t\t:class.active=${fontSize === this.fontSize}\n\t\t\t\t\t\t\t:style.line-height=\"1.5\"\n\t\t\t\t\t\t\t@click=${() => this.selectFontSize(fontSize)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t`)}\n\t\t\t</div>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    selectFontSize(fontSize) {\n        this.emit('select', fontSize);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup } from '@pucelle/flit-ui';\ndefine('mm-line-height-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.lineHeight = 1.2;\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-line-height-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', canShrinkInY: true })}\n\t\t>\n\t\t\t<mm-line-height .lineHeight=${this.lineHeight} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `<mm-line-height-menu\n\t\t\t.herizontal\n\t\t\t.lineHeight=${this.lineHeight}\n\t\t\t@@select=${this.onSelectLineHeight}\n\t\t/>`;\n    }\n    onSelectLineHeight(lineHeight) {\n        this.lineHeight = lineHeight;\n        this.emit('select', lineHeight);\n    }\n});\ndefine('mm-line-height', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.lineHeight = 1.2;\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-line-height\">\n\t\t\t${this.lineHeight}\n\t\t</template>\n\t\t`;\n    }\n});\ndefine('mm-line-height-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.LineHeights = [\n            1.0,\n            1.1,\n            1.2,\n            1.3,\n            1.4,\n            1.5,\n            1.6,\n            1.7,\n            1.8,\n            1.9,\n            2.0,\n        ];\n        this.lineHeight = 1.2;\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-line-height-menu\">\n\t\t\t<div class=\"mm-line-height-menu-scroller\">\n\t\t\t\t${this.LineHeights.map(lineHeight => html `\n\t\t\t\t\t\t<mm-line-height\n\t\t\t\t\t\t\t.lineHeight=${lineHeight}\n\t\t\t\t\t\t\t:class.active=${lineHeight === this.lineHeight}\n\t\t\t\t\t\t\t@click=${() => this.selectLineHeight(lineHeight)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t`)}\n\t\t\t</div>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    selectLineHeight(lineHeight) {\n        this.emit('select', lineHeight);\n    }\n});\n","import { capitalize } from '@pucelle/ff';\nimport { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup } from '@pucelle/flit-ui';\ndefine('mm-text-align-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.textAlign = 'center';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-text-align-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', canShrinkInY: true })}\n\t\t>\n\t\t\t<mm-text-align .textAlign=${this.textAlign} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `<mm-text-align-menu\n\t\t\t.herizontal\n\t\t\t.textAlign=${this.textAlign}\n\t\t\t@@select=${this.onSelectTextAlign}\n\t\t/>`;\n    }\n    onSelectTextAlign(textAlign) {\n        this.textAlign = textAlign;\n        this.emit('select', textAlign);\n    }\n});\ndefine('mm-text-align', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.textAlign = 'center';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-text-align\"\n\t\t\t:style.text-align=${this.textAlign}\n\t\t>\n\t\t\t${capitalize(this.textAlign)}\n\t\t</template>\n\t\t`;\n    }\n});\ndefine('mm-text-align-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.TextAligns = [\n            'left',\n            'center',\n            'right',\n        ];\n        this.textAlign = 'center';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-text-align-menu\">\n\t\t\t<div class=\"mm-text-align-menu-scroller\">\n\t\t\t\t${this.TextAligns.map(textAlign => html `\n\t\t\t\t\t\t<mm-text-align\n\t\t\t\t\t\t\t.textAlign=${textAlign}\n\t\t\t\t\t\t\t:class.active=${textAlign === this.textAlign}\n\t\t\t\t\t\t\t@click=${() => this.selectTextAlign(textAlign)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t`)}\n\t\t\t</div>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    selectTextAlign(textAlign) {\n        this.emit('select', textAlign);\n    }\n});\n","import { capitalize } from '@pucelle/ff';\nimport { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup } from '@pucelle/flit-ui';\ndefine('mm-text-vertical-align-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.textVerticalAlign = 'center';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-text-vertical-align-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', canShrinkInY: true })}\n\t\t>\n\t\t\t<mm-text-vertical-align .textVerticalAlign=${this.textVerticalAlign} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `<mm-text-vertical-align-menu\n\t\t\t.herizontal\n\t\t\t.textVerticalAlign=${this.textVerticalAlign}\n\t\t\t@@select=${this.onSelectTextVerticalAlign}\n\t\t/>`;\n    }\n    onSelectTextVerticalAlign(textVerticalAlign) {\n        this.textVerticalAlign = textVerticalAlign;\n        this.emit('select', textVerticalAlign);\n    }\n});\ndefine('mm-text-vertical-align', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.textVerticalAlign = 'center';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-text-vertical-align\">\n\t\t\t${capitalize(this.textVerticalAlign)}\n\t\t</template>\n\t\t`;\n    }\n});\ndefine('mm-text-vertical-align-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.TextVerticalAligns = [\n            'top',\n            'center',\n            'bottom',\n        ];\n        this.textVerticalAlign = 'center';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-text-vertical-align-menu\">\n\t\t\t<div class=\"mm-text-vertical-align-menu-scroller\">\n\t\t\t\t${this.TextVerticalAligns.map(textVerticalAlign => html `\n\t\t\t\t\t\t<mm-text-vertical-align\n\t\t\t\t\t\t\t.textVerticalAlign=${textVerticalAlign}\n\t\t\t\t\t\t\t:class.active=${textVerticalAlign === this.textVerticalAlign}\n\t\t\t\t\t\t\t@click=${() => this.selectTextVerticalAlign(textVerticalAlign)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t`)}\n\t\t\t</div>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    selectTextVerticalAlign(textVerticalAlign) {\n        this.emit('select', textVerticalAlign);\n    }\n});\n","import { define, html, untilRenderComplete } from '@pucelle/flit';\nimport { Popup } from '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\ndefine('mm-text-katex-editor', class extends Popup {\n    constructor() {\n        super(...arguments);\n        this.value = '';\n        this.triangle = true;\n        this.katexLibradyLoaded = false;\n    }\n    async onCreated() {\n        // 确保 Katex 已经加载完毕.\n        await MinderExported.ExternalResources.ensureKatexResourcesLoaded();\n        this.katexLibradyLoaded = true;\n    }\n    render() {\n        return html `\n\t\t\t<template class=\"mm-text-katex-editor\">\n\t\t\t\t<textarea\n\t\t\t\t\t:refElement=${this.refTextarea}\n\t\t\t\t\t:model=\"value\"\n\t\t\t\t\t@keydown=${this.onKeyDown}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\t:enable=${this.katexLibradyLoaded}\n\t\t\t\t\t@click=${this.submitValue}\n\t\t\t\t>\n\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t</template>\n\t\t`.extends(super.render());\n    }\n    async refTextarea(el) {\n        await untilRenderComplete();\n        el.focus();\n    }\n    onKeyDown(e) {\n        if (e.key === 'Enter') {\n            this.submitValue();\n            e.preventDefault();\n        }\n        else if (e.key === 'Escape') {\n            this.emit('cancel');\n        }\n    }\n    submitValue() {\n        this.emit('change', this.value);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\ndefine('mm-configuration-node-connect', class extends Component {\n    onCreated() { }\n    render() {\n        var _a, _b;\n        return html `\n\t\t<template class=\"mm-configuration-node-content\">\n\t\t\t<header>Branch & Connection</header>\n\n\t\t\t<section\n\t\t\t\t:show=${this.minderExported.commands.canExec('BranchLayout')}\n\t\t\t>\n\t\t\t\t<mm-layout-name-select\n\t\t\t\t\t.layoutName=${(_a = this.minderExported.commands.queryValue('BranchLayout')) !== null && _a !== void 0 ? _a : ''}\n\t\t\t\t\t.allowedLayoutNames=${this.minderExported.getAllowedLayoutNames()}\n\t\t\t\t\t@@select=${this.setLayoutName}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Branch Layout</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeConnect')}\n\t\t\t>\n\t\t\t\t<mm-connect-name-select\n\t\t\t\t\t.connectName=${(_b = this.minderExported.commands.queryValue('NodeConnect')) !== null && _b !== void 0 ? _b : ''}\n\t\t\t\t\t.allowedConnectNames=${this.minderExported.getAllowedConnectNames()}\n\t\t\t\t\t@@select=${this.setConnectName}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Branch Connect</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeConnect')}\n\t\t\t>\n\t\t\t\t<mm-border-width-select\n\t\t\t\t\t.width=${this.minderExported.commands.queryValue('NodeConnectWidth')}\n\t\t\t\t\t@@select=${this.setConnectWidth}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Connect Width</header>\n\t\t\t</section>\n\n\n\t\t\t<section>\n\t\t\t\t<mm-color-select\n\t\t\t\t\t.color=${this.minderExported.commands.queryValue('NodeConnectColor')}\n\t\t\t\t\t@@select=${this.setConnectColor}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Connect Color</header>\n\t\t\t</section>\n\n\n\t\t\t<!-- <section\n\t\t\t\t:show=${this.minderExported.commands.canExec('NodeConnectMultiColor')}\n\t\t\t>\n\t\t\t\t<mm-multi-color-select\n\t\t\t\t\t:enable=${this.minderExported.commands.canExec('NodeConnectMultiColor')}\n\t\t\t\t\t.multiColor=${this.minderExported.commands.queryValue('NodeConnectMultiColor')}\n\t\t\t\t\t@@select=${this.setConnectMultiColor}\n\t\t\t\t/>\n\t\t\t\t<header>Multi-Branch Color</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:show=${this.minderExported.commands.canExec('BranchTaperedLine')}\n\t\t\t>\n\t\t\t\t<f-switch\n\t\t\t\t\t:show=${this.minderExported.commands.canExec('BranchTaperedLine')}\n\t\t\t\t\t.value=${this.minderExported.commands.queryValue('BranchTaperedLine')}\n\t\t\t\t\t@@change=${this.setTaperedLine}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Tapered Line</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:show=${this.minderExported.commands.canExec('BranchTaperedLinePower')}\n\t\t\t>\n\t\t\t\t<f-slider\n\t\t\t\t\tclass=\"mm-radius-slider\"\n\t\t\t\t\t.value=${this.minderExported.commands.queryValue('BranchTaperedLinePower') || 0}\n\t\t\t\t\t.min=${-1}\n\t\t\t\t\t.max=${3}\n\t\t\t\t\t.step=${0.1}\n\t\t\t\t\t@@change=${this.setTaperedPower}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Tapered Power</header>\n\t\t\t</section>\n\t\t\t\n\n\t\t\t<section\n\t\t\t\t:show=${this.minderExported.commands.canExec('BranchTaperedLineStartWidth')}\n\t\t\t>\n\t\t\t\t<f-slider\n\t\t\t\t\tclass=\"mm-radius-slider\"\n\t\t\t\t\t.value=${this.minderExported.commands.queryValue('BranchTaperedLineStartWidth') || 0}\n\t\t\t\t\t.min=${5}\n\t\t\t\t\t.max=${20}\n\t\t\t\t\t.step=${1}\n\t\t\t\t\t@@change=${this.setTaperedStartWidth}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Tapered Start Width</header>\n\t\t\t</section>\n\n\n\t\t\t<section\n\t\t\t\t:show=${this.minderExported.commands.canExec('BranchConnectOutAdjust')}\n\t\t\t>\n\t\t\t\t<mm-connect-out-adjust-select\n\t\t\t\t\t.outAdjust=${this.minderExported.commands.queryValue('BranchConnectOutAdjust') || 'none'}\n\t\t\t\t\t@@select=${this.setConnectOutAdjust}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Connect Out Adjust</header>\n\t\t\t</section> -->\n\t\t</template>\n\t\t`;\n    }\n    setLayoutName(layoutName) {\n        this.minderExported.commands.exec('BranchLayout', layoutName);\n    }\n    setConnectName(connectName) {\n        this.minderExported.commands.exec('NodeConnect', connectName);\n    }\n    setConnectWidth(width) {\n        this.minderExported.commands.exec('NodeConnectWidth', width);\n    }\n    setConnectColor(color) {\n        this.minderExported.commands.exec('NodeConnectColor', color);\n    }\n    setConnectMultiColor(color) {\n        this.minderExported.commands.exec('NodeConnectMultiColor', color);\n    }\n    setTaperedLine(tapered) {\n        this.minderExported.commands.exec('BranchTaperedLine', tapered);\n    }\n    setTaperedPower(power) {\n        this.minderExported.commands.exec('BranchTaperedLinePower', power);\n    }\n    setTaperedStartWidth(width) {\n        this.minderExported.commands.exec('BranchTaperedLineStartWidth', width);\n    }\n    setConnectOutAdjust(adjustTo) {\n        this.minderExported.commands.exec('BranchConnectOutAdjust', adjustTo);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup, tooltip } from '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\ndefine('mm-layout-name-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.layoutName = 'right';\n        this.allowedLayoutNames = [];\n    }\n    render() {\n        return html `\n\t\t\t<template class=\"mm-layout-name-select\"\n\t\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', canShrinkInY: true, cacheable: true })}\n\t\t\t>\n\t\t\t\t<mm-layout-name\n\t\t\t\t\t.name=${this.layoutName}\n\t\t\t\t\t${tooltip(this.layoutName, { alignPosition: 'r' })}\n\t\t\t\t/>\n\t\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `<mm-layout-name-menu\n\t\t\t.herizontal\n\t\t\t.layoutName=${this.layoutName}\n\t\t\t.allowedLayoutNames=${this.allowedLayoutNames}\n\t\t\t@@select=${this.onSelectlayoutName}\n\t\t/>`;\n    }\n    onSelectlayoutName(layoutName) {\n        this.layoutName = layoutName;\n        this.emit('select', layoutName);\n    }\n});\ndefine('mm-layout-name', class extends Component {\n    onReady() {\n        this.watchImmediately(() => this.name, () => this.updateSVG());\n    }\n    async updateSVG() {\n        var _a;\n        let svg = await MinderExported.layoutPreviewer.renderSVG(this.name, {\n            subNodeCount: 0,\n            style: {\n                root: { 'fill-color': '#555455', 'radius': 20 },\n                main: { 'fill-color': '#aca29d', 'radius': 15 },\n            }\n        });\n        (_a = this.el.querySelector('svg')) === null || _a === void 0 ? void 0 : _a.remove();\n        this.el.append(svg.element);\n    }\n    render() {\n        return html `\n\t\t\t<template class=\"mm-layout-name\" />\n\t\t`;\n    }\n});\ndefine('mm-layout-name-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.layoutName = 'right';\n        this.allowedLayoutNames = [];\n    }\n    render() {\n        let groups = [];\n        for (let i = 0; i < this.allowedLayoutNames.length; i++) {\n            groups[Math.floor(i / 2)] = groups[Math.floor(i / 2)] || [];\n            groups[Math.floor(i / 2)].push(this.allowedLayoutNames[i]);\n        }\n        return html `\n\t\t<template class=\"mm-layout-name-menu\">\n\t\t\t<div class=\"mm-layout-name-menu-scroller\">\n\t\t\t\t${groups.map(names => html `\n\t\t\t\t\t\t<div class=\"mm-layout-name-menu-line\">\n\t\t\t\t\t\t\t${names.map(layoutName => html `\n\t\t\t\t\t\t\t\t<mm-layout-name\n\t\t\t\t\t\t\t\t\t.name=${layoutName}\n\t\t\t\t\t\t\t\t\t:enable=${this.allowedLayoutNames.includes(layoutName)}\n\t\t\t\t\t\t\t\t\t:class.active=${layoutName === this.layoutName}\n\t\t\t\t\t\t\t\t\t${tooltip(layoutName, { alignPosition: 't' })}\n\t\t\t\t\t\t\t\t\t@click=${() => this.selectlayoutName(layoutName)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t`)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`).flat()}\n\t\t\t</div>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    selectlayoutName(layoutName) {\n        this.emit('select', layoutName);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup, tooltip } from '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\ndefine('mm-connect-name-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.connectName = 'fork';\n        this.allowedConnectNames = [];\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-connect-name-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', canShrinkInY: true, cacheable: true })}\n\t\t>\n\t\t\t<mm-connect-name\n\t\t\t\t.name=${this.connectName}\n\t\t\t\t${tooltip(this.connectName, { alignPosition: 'r' })}\n\t\t\t/>\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `<mm-connect-name-menu\n\t\t\t.herizontal\n\t\t\t.connectName=${this.connectName}\n\t\t\t.allowedConnectNames=${this.allowedConnectNames}\n\t\t\t@@select=${this.onSelectconnectName}\n\t\t/>`;\n    }\n    onSelectconnectName(connectName) {\n        this.connectName = connectName;\n        this.emit('select', connectName);\n    }\n});\ndefine('mm-connect-name', class extends Component {\n    onReady() {\n        this.watchImmediately(() => this.name, () => this.updateSVG());\n    }\n    async updateSVG() {\n        var _a;\n        let svg = await MinderExported.connectLinePreviewer.renderSVG(this.name);\n        (_a = this.el.querySelector('svg')) === null || _a === void 0 ? void 0 : _a.remove();\n        this.el.append(svg.element);\n    }\n    render() {\n        return html `\n\t\t\t<template class=\"mm-connect-name\" />\n\t\t`;\n    }\n});\ndefine('mm-connect-name-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.connectName = 'fork';\n        this.allowedConnectNames = [];\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-connect-name-menu\">\n\t\t\t<div class=\"mm-connect-name-menu-scroller\">\n\t\t\t\t${this.allowedConnectNames.map(connectName => html `\n\t\t\t\t\t\t<mm-connect-name\n\t\t\t\t\t\t\t.name=${connectName}\n\t\t\t\t\t\t\t:enable=${this.allowedConnectNames.includes(connectName)}\n\t\t\t\t\t\t\t:class.active=${connectName === this.connectName}\n\t\t\t\t\t\t\t${tooltip(connectName, { alignPosition: 't' })}\n\t\t\t\t\t\t\t@click=${() => this.selectconnectName(connectName)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t`)}\n\t\t\t</div>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    selectconnectName(connectName) {\n        this.emit('select', connectName);\n    }\n});\n","import { capitalize } from '@pucelle/ff';\nimport { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup } from '@pucelle/flit-ui';\ndefine('mm-connect-out-adjust-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.outAdjust = '';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-connect-out-adjust-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup' })}\n\t\t>\n\t\t\t<mm-connect-out-adjust .outAdjust=${this.outAdjust} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `<mm-connect-out-adjust-menu\n\t\t\t.herizontal\n\t\t\t.outAdjust=${this.outAdjust}\n\t\t\t@@select=${this.onSelectOutAdjust}\n\t\t/>`;\n    }\n    onSelectOutAdjust(outAdjust) {\n        this.outAdjust = outAdjust;\n        this.emit('select', outAdjust);\n    }\n});\ndefine('mm-connect-out-adjust', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.outAdjust = '';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-connect-out-adjust\">\n\t\t\t${capitalize(this.outAdjust)}\n\t\t</template>\n\t\t`;\n    }\n});\ndefine('mm-connect-out-adjust-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.outAdjustData = [\n            'none',\n            'evenly',\n            'center',\n        ];\n        this.outAdjust = '';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-connect-out-adjust-menu\">\n\t\t\t<div class=\"mm-connect-out-adjust-menu-scroller\">\n\t\t\t\t${this.outAdjustData.map(outAdjust => html `\n\t\t\t\t\t\t<mm-connect-out-adjust\n\t\t\t\t\t\t\t.outAdjust=${outAdjust}\n\t\t\t\t\t\t\t:class.active=${outAdjust === this.outAdjust}\n\t\t\t\t\t\t\t@click=${() => this.selectoutAdjust(outAdjust)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t`)}\n\t\t\t</div>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    selectoutAdjust(outAdjust) {\n        this.emit('select', outAdjust);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\ndefine('mm-configuration-node-relline', class extends Component {\n    onCreated() { }\n    render() {\n        return html `\n\t\t<template class=\"mm-configuration-node-content\">\n\t\t\t<header>Rel-Line</header>\n\n\n\t\t\t<section\n\t\t\t\t:enable=${this.minderExported.commands.canExec('RelLineWidth')}\n\t\t\t>\n\t\t\t\t<mm-border-width-select\n\t\t\t\t\t.width=${this.minderExported.commands.queryValue('RelLineWidth')}\n\t\t\t\t\t@@select=${this.setRelLineWidth}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Line Width</header>\n\t\t\t</section>\n\n\n\t\t\t<section>\n\t\t\t\t<mm-color-select\n\t\t\t\t\t.color=${this.minderExported.commands.queryValue('RelLineColor')}\n\t\t\t\t\t@@select=${this.setRelLineColor}\n\t\t\t\t/>\n\t\t\t\t<div class=\"spacer\"></div>\n\t\t\t\t<header>Line Color</header>\n\t\t\t</section>\n\n\n\t\t\t<section>\n\t\t\t\t<mm-relline-shape-select\n\t\t\t\t\t.shapeName=${this.minderExported.commands.queryValue('RelLineLineType')}\n\t\t\t\t\t@@select=${this.setShapeName}\n\t\t\t\t/>\n\t\t\t\t<header>Shape</header>\n\t\t\t</section>\n\n\n\t\t\t<section>\n\t\t\t\t<mm-relline-marker-select\n\t\t\t\t\t.markerEdge='start'\n\t\t\t\t\t.markerName=${this.minderExported.commands.queryValue('RelLineMarkerStart') || 'line'}\n\t\t\t\t\t@@select=${this.setMarkerStartName}\n\t\t\t\t/>\n\t\t\t\t<header>Marker Start</header>\n\t\t\t</section>\n\n\n\t\t\t<section>\n\t\t\t\t<mm-relline-marker-select\n\t\t\t\t\t.markerEdge='end'\n\t\t\t\t\t.markerName=${this.minderExported.commands.queryValue('RelLineMarkerEnd') || 'line'}\n\t\t\t\t\t@@select=${this.setMarkerEndName}\n\t\t\t\t/>\n\t\t\t\t<header>Marker End</header>\n\t\t\t</section>\n\n\n\t\t</template>\n\t\t`;\n    }\n    setRelLineWidth(width) {\n        this.minderExported.commands.exec('RelLineWidth', width);\n    }\n    setRelLineColor(color) {\n        this.minderExported.commands.exec('RelLineColor', color);\n    }\n    setShapeName(shapeName) {\n        this.minderExported.commands.exec('RelLineLineType', shapeName);\n    }\n    setMarkerStartName(markerName) {\n        this.minderExported.commands.exec('RelLineMarkerStart', markerName);\n    }\n    setMarkerEndName(markerName) {\n        this.minderExported.commands.exec('RelLineMarkerEnd', markerName);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup } from '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\ndefine('mm-relline-shape-select', class extends Component {\n    render() {\n        return html `\n\t\t<template class=\"mm-relline-shape-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', cacheable: true })}\n\t\t>\n\t\t\t<mm-relline-shape .name=${this.shapeName} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `\n\t\t<mm-relline-shape-menu\n\t\t\t.herizontal\n\t\t\t.shapeName=${this.shapeName}\n\t\t\t@@select=${this.onSelectShape}\n\t\t/>`;\n    }\n    onSelectShape(shapeName) {\n        this.shapeName = shapeName;\n        this.emit('select', shapeName);\n    }\n});\ndefine('mm-relline-shape', class extends Component {\n    render() {\n        return html `\n\t\t<template class=\"mm-relline-shape\">\n\t\t\t${this.name}\n\t\t</template>\n\t\t`;\n    }\n});\ndefine('mm-relline-shape-menu', class extends Menu {\n    render() {\n        return html `\n\t\t<template class=\"mm-relline-shape-menu\">\n\t\t\t${MinderExported.RelLineShapeNames.map(shapeName => html `\n\t\t\t\t\t<mm-relline-shape\n\t\t\t\t\t\t.name=${shapeName}\n\t\t\t\t\t\t:class.active=${shapeName === this.shapeName}\n\t\t\t\t\t\t@click=${() => this.onClickShape(shapeName)}\n\t\t\t\t\t/>\n\t\t\t\t`)}\n\t\t\t</ul>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    onClickShape(shapeName) {\n        this.emit('select', shapeName);\n    }\n});\n","import { Component, define, html } from '@pucelle/flit';\nimport { Menu, popup, tooltip } from '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\ndefine('mm-relline-marker-select', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.markerEdge = 'start';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-relline-marker-select\"\n\t\t\t${popup(() => this.renderMenu(), { alignPosition: 'l', key: 'popup', cacheable: true })}\n\t\t>\n\t\t\t<mm-relline-marker .name=${this.markerName} .markerEdge=${this.markerEdge} />\n\t\t</template>\n\t\t`;\n    }\n    renderMenu() {\n        return html `\n\t\t<mm-relline-marker-menu\n\t\t\t.herizontal\n\t\t\t.markerEdge=${this.markerEdge}\n\t\t\t.markerName=${this.markerName}\n\t\t\t@@select=${this.onSelectMarker}\n\t\t/>`;\n    }\n    onSelectMarker(markerName) {\n        this.markerName = markerName;\n        this.emit('select', markerName);\n    }\n});\ndefine('mm-relline-marker', class extends Component {\n    constructor() {\n        super(...arguments);\n        this.markerEdge = 'start';\n    }\n    onReady() {\n        this.watchImmediately(() => this.name, () => this.updateShapeSVG());\n    }\n    updateShapeSVG() {\n        var _a;\n        let svg = this.markerEdge === 'start'\n            ? MinderExported.RelLineMarkerPreviewer.renderStartSVG(this.name)\n            : MinderExported.RelLineMarkerPreviewer.renderEndSVG(this.name);\n        (_a = this.el.querySelector('svg')) === null || _a === void 0 ? void 0 : _a.remove();\n        this.el.append(svg.element);\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-relline-marker\" ${tooltip(this.name)} />\n\t\t`;\n    }\n});\ndefine('mm-relline-marker-menu', class extends Menu {\n    constructor() {\n        super(...arguments);\n        this.markerEdge = 'start';\n    }\n    render() {\n        return html `\n\t\t<template class=\"mm-relline-marker-menu\">\n\t\t\t${MinderExported.RelLineMarkerNames.map(markerName => html `\n\t\t\t\t\t<mm-relline-marker\n\t\t\t\t\t\t.markerEdge=${this.markerEdge}\n\t\t\t\t\t\t.name=${markerName}\n\t\t\t\t\t\t:class.active=${markerName === this.markerName}\n\t\t\t\t\t\t@click=${() => this.onClickMarker(markerName)}\n\t\t\t\t\t/>\n\t\t\t\t`)}\n\t\t\t</ul>\n\t\t</template>\n\t\t`.extends(super.render());\n    }\n    onClickMarker(markerName) {\n        this.emit('select', markerName);\n    }\n});\n","import { html, Component, define, updateAllComponents } from '@pucelle/flit';\nimport '@pucelle/flit-ui';\nimport { MinderExported } from 'mindmap-core';\nimport '../customize/gitmind/index';\nimport { IconURLMap } from './resources/icons';\nimport './components';\nimport { storage } from '@pucelle/ff';\nimport { DefaultDatas } from './data';\nimport { notification } from '@pucelle/flit-ui';\nMinderExported.Customization.setExternalResourceOptions({\n    iconURLs: IconURLMap,\n});\ndefine('mindmap-core-preview', class extends Component {\n    constructor() {\n        var _a;\n        super(...arguments);\n        this.dataId = ((_a = location.search.match(/\\bid=([\\w-]+)/)) === null || _a === void 0 ? void 0 : _a[1]) || 'mine';\n    }\n    async onCreated() {\n        let isLocalhost = location.hostname === 'localhost' || location.hostname === '127.0.0.1';\n        this.minderExported = new MinderExported({\n            paperPadding: [10, 260, 10, 10],\n            alwaysKeepsTextEditorAlive: true,\n            willCacheData: true,\n            viewControlAfterPassiveSelected: 'visible',\n            expandedStateMode: isLocalhost ? 'sync' : 'local',\n        }, {\n            'content': {\n                'can-line-wrap': false,\n            }\n        });\n        this.minderExported.appendTo(this.el);\n        this.minderExported.import(await this.getData());\n        window.minderExported = this.minderExported;\n        if (this.shouldCacheAndRestore()) {\n            window.onbeforeunload = () => {\n                this.minderExported.dataCacher.save();\n                storage.set('mindmap_data_id', this.minderExported.getId());\n            };\n        }\n        else if (!isLocalhost) {\n            this.minderExported.status.setReadonly();\n            notification.info(`This document is working on \"readonly mode\"!`);\n        }\n        this.minderExported.on([\n            'import',\n            'data-change',\n            'selection-change'\n        ], () => {\n            updateAllComponents();\n        });\n        // let token = parseQuery(location.search).token\n        // if (token) {\n        // \tthis.minderExported.cooperate.start({\n        // \t\tversion: storage.get('mindmap_data_version', 0),\n        // \t\tdocumentId: this.minderExported.getId()!,\n        // \t\tendpoint: 'xxx.com/app/collaboration',\n        // \t\tidentityToken: token,\n        // \t})\n        // \t// 会执行恢复缓存.\n        // \tthis.minderExported.on('coop-cache-detected', async (callback: (restoreCache: boolean) => void) => {\n        // \t\tlet yes = await dialog.confirm(`You have some unsaved modifications, do you want to restore them?`)\n        // \t\tcallback(yes === 'ok')\n        // \t})\n        // \tlet notify = notification.unique()\n        // \t// 执行保存.\n        // \tthis.minderExported.on('coop-to-save', (callback: (success: boolean) => void) => {\n        // \t\tnotify.info(`Was choosed to execute saving!`)\n        // \t\tthis.minderExported.dataCacher.save()\n        // \t\tstorage.set('mindmap_data_id', this.minderExported.getId())\n        // \t\tstorage.set('mindmap_data_version', this.minderExported.cooperate.getCurrentVersion())\n        // \t\tcallback(true)\n        // \t})\n        // \t// 有用户保存.\n        // \tthis.minderExported.on('coop-saved', (userId: number) => {\n        // \t\tlet userInfo = this.minderExported.cooperate.getUserInfo(userId)!\n        // \t\tnotify.info(`User \"${userInfo?.nickname ?? 'Unknown'}\" has just saved the document!`)\n        // \t})\n        // \t// 手动关闭.\n        // \tthis.minderExported.on('coop-closed', () => {\n        // \t\tnotify.info(`Cooperation was closed manually!`)\n        // \t})\n        // \t// 同步完成.\n        // \tthis.minderExported.on('coop-synced', () => {\n        // \t\tnotify.info(`Cooperation synced syccessfully!`)\n        // \t})\n        // \t// 等待同步.\n        // \tthis.minderExported.on('coop-retrying', () => {\n        // \t\tnotify.info(`Cooperation disconnected, is retrying to restore connect!`)\n        // \t})\n        // \t// 拒绝删除.\n        // \tthis.minderExported.on('coop-delete-locked-denied', (ids: string[]) => {\n        // \t\tnotify.info(`Deleting nodes was denied \"${ids.join(', ')}\" because they or their ancestors are editing by other ones!`)\n        // \t})\n        // \t// 拒绝编辑.\n        // \tthis.minderExported.on('coop-edit-locked-denied', (id: string) => {\n        // \t\tnotify.info(`Editing node was denied \"${id}\" because it is editing by another one!`)\n        // \t})\n        // }\n    }\n    shouldCacheAndRestore() {\n        // let fromJsonData = Object.keys(DefaultDatas).includes(this.dataId)\n        // let isLocalhost = location.hostname === 'localhost' || location.hostname === '127.0.0.1' || /^192\\.168/.test(location.hostname)\n        // return isLocalhost && !fromJsonData\n        return this.dataId === 'mine';\n    }\n    async getData() {\n        let id = storage.get('mindmap_data_id');\n        if (this.shouldCacheAndRestore() && await this.minderExported.dataCacher.hasCache(id)) {\n            return (await this.minderExported.dataCacher.getCache(id));\n        }\n        else if (DefaultDatas[this.dataId]) {\n            return DefaultDatas[this.dataId];\n        }\n        else {\n            return {\n                \"id\": \"962ced41-9828-4ab9-937f-dd84f369dfe9\",\n                \"created\": 1667528473117,\n                \"modified\": 1667528473117,\n                \"version\": \"2.1.0\",\n                \"style\": {\n                    \"theme\": { 'colorTheme': 'anniversary-1' },\n                    \"root\": {},\n                    \"floatRoot\": {}\n                },\n                \"root\": {\n                    \"data\": {\n                        \"id\": \"1385b49a-e57b-416e-a586-7a0d659930d1\",\n                        \"expanded\": true,\n                        \"text\": \"Hello, MindMap\",\n                    }\n                },\n                \"floatRoots\": [],\n                \"relLines\": []\n            };\n        }\n    }\n    render() {\n        return html `\n\t\t\t<mm-configuration .minderExported=${this.minderExported} />\n\t\t\t<mm-exporter .minderExported=${this.minderExported} />\n\t\t\t<mm-zoom-show .minderExported=${this.minderExported} />\n\t\t\t<mm-birdeye-previewer .minderExported=${this.minderExported} />\n\t\t\t<mm-toolbar .minderExported=${this.minderExported} />\n\t\t`;\n    }\n});\ndefine('mm-configuration', class extends Component {\n    render() {\n        return html `\n\t\t<template class=\"mm-configuration\">\n\t\t\t${this.renderMapPart()}\n\t\t\t${this.renderNodePart()}\n\t\t</template>\n\t\t`;\n    }\n    renderMapPart() {\n        let selectedNode = this.minderExported.commands.canExec('NodeTextBold');\n        return html `\n\t\t\t<mm-configuration-map\n\t\t\t\t.minderExported=${this.minderExported}\n\t\t\t\t:hide=${selectedNode || this.minderExported.status.isReadonly()}\n\t\t\t/>\n\t\t`;\n    }\n    renderNodePart() {\n        return html `\n\t\t\t<mm-configuration-node-shape\n\t\t\t\t.minderExported=${this.minderExported}\n\t\t\t\t:show=${this.minderExported.commands.canExec('NodeShape')}\n\t\t\t/>\n\t\t\t<mm-configuration-node-content\n\t\t\t\t.minderExported=${this.minderExported}\n\t\t\t\t:show=${this.minderExported.commands.canExec('Image')}\n\t\t\t/>\n\t\t\t<mm-configuration-node-text\n\t\t\t\t.minderExported=${this.minderExported}\n\t\t\t\t:show=${this.minderExported.commands.canExec('NodeTextAlign')}\n\t\t\t/>\n\t\t\t<mm-configuration-node-connect\n\t\t\t\t.minderExported=${this.minderExported}\n\t\t\t\t:show=${this.minderExported.commands.canExec('NodeConnect')}\n\t\t\t/>\n\t\t\t<mm-configuration-node-relline\n\t\t\t\t.minderExported=${this.minderExported}\n\t\t\t\t:show=${this.minderExported.commands.canExec('RelLineColor')}\n\t\t\t/>\n\t\t`;\n    }\n});\n"],"names":[],"sourceRoot":""}